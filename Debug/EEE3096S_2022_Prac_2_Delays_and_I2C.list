
EEE3096S_2022_Prac_2_Delays_and_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004aac  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08004b6c  08004b6c  00014b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c98  08004c98  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004c98  08004c98  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c98  08004c98  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c98  08004c98  00014c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c9c  08004c9c  00014c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004ca0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  20000070  08004d10  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08004d10  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cf3f  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000200a  00000000  00000000  0002cfd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab0  00000000  00000000  0002efe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d8  00000000  00000000  0002fa98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012bb4  00000000  00000000  00030470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e3f8  00000000  00000000  00043024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006b5fe  00000000  00000000  0005141c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bca1a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e90  00000000  00000000  000bca6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004b54 	.word	0x08004b54

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08004b54 	.word	0x08004b54

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_f2iz>:
 8000234:	0241      	lsls	r1, r0, #9
 8000236:	0042      	lsls	r2, r0, #1
 8000238:	0fc3      	lsrs	r3, r0, #31
 800023a:	0a49      	lsrs	r1, r1, #9
 800023c:	2000      	movs	r0, #0
 800023e:	0e12      	lsrs	r2, r2, #24
 8000240:	2a7e      	cmp	r2, #126	; 0x7e
 8000242:	dd03      	ble.n	800024c <__aeabi_f2iz+0x18>
 8000244:	2a9d      	cmp	r2, #157	; 0x9d
 8000246:	dd02      	ble.n	800024e <__aeabi_f2iz+0x1a>
 8000248:	4a09      	ldr	r2, [pc, #36]	; (8000270 <__aeabi_f2iz+0x3c>)
 800024a:	1898      	adds	r0, r3, r2
 800024c:	4770      	bx	lr
 800024e:	2080      	movs	r0, #128	; 0x80
 8000250:	0400      	lsls	r0, r0, #16
 8000252:	4301      	orrs	r1, r0
 8000254:	2a95      	cmp	r2, #149	; 0x95
 8000256:	dc07      	bgt.n	8000268 <__aeabi_f2iz+0x34>
 8000258:	2096      	movs	r0, #150	; 0x96
 800025a:	1a82      	subs	r2, r0, r2
 800025c:	40d1      	lsrs	r1, r2
 800025e:	4248      	negs	r0, r1
 8000260:	2b00      	cmp	r3, #0
 8000262:	d1f3      	bne.n	800024c <__aeabi_f2iz+0x18>
 8000264:	0008      	movs	r0, r1
 8000266:	e7f1      	b.n	800024c <__aeabi_f2iz+0x18>
 8000268:	3a96      	subs	r2, #150	; 0x96
 800026a:	4091      	lsls	r1, r2
 800026c:	e7f7      	b.n	800025e <__aeabi_f2iz+0x2a>
 800026e:	46c0      	nop			; (mov r8, r8)
 8000270:	7fffffff 	.word	0x7fffffff

08000274 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800027a:	f000 fcc1 	bl	8000c00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800027e:	f000 f855 	bl	800032c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000282:	f000 f943 	bl	800050c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000286:	f000 f8b3 	bl	80003f0 <MX_I2C1_Init>
  MX_DMA_Init();
 800028a:	f000 f921 	bl	80004d0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800028e:	f000 f8ef 	bl	8000470 <MX_USART2_UART_Init>
  {
	 /* USER CODE END WHILE */
	 //TO DO:
	 //TASK 1
	 //First run this with nothing else in the loop and scope pin PC8 on an oscilloscope
	 pause_sec(1);
 8000292:	23fe      	movs	r3, #254	; 0xfe
 8000294:	059b      	lsls	r3, r3, #22
 8000296:	1c18      	adds	r0, r3, #0
 8000298:	f000 f9b0 	bl	80005fc <pause_sec>
	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 800029c:	2380      	movs	r3, #128	; 0x80
 800029e:	005b      	lsls	r3, r3, #1
 80002a0:	4a1d      	ldr	r2, [pc, #116]	; (8000318 <main+0xa4>)
 80002a2:	0019      	movs	r1, r3
 80002a4:	0010      	movs	r0, r2
 80002a6:	f001 f922 	bl	80014ee <HAL_GPIO_TogglePin>

	 //TO DO:
	 //TASK 6
	 getTime();
 80002aa:	f000 f9dd 	bl	8000668 <getTime>

	 sprintf(buffer, "%d \r\n", time);
 80002ae:	4b1b      	ldr	r3, [pc, #108]	; (800031c <main+0xa8>)
 80002b0:	491b      	ldr	r1, [pc, #108]	; (8000320 <main+0xac>)
 80002b2:	481c      	ldr	r0, [pc, #112]	; (8000324 <main+0xb0>)
 80002b4:	681a      	ldr	r2, [r3, #0]
 80002b6:	685b      	ldr	r3, [r3, #4]
 80002b8:	f003 fac2 	bl	8003840 <siprintf>
	 //This creates a string "55555555555555" with a pointer called buffer

	 //Transmit data via UART
	 //Blocking! fine for small buffers
	 if (HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 1000) != HAL_OK)
 80002bc:	23fa      	movs	r3, #250	; 0xfa
 80002be:	009b      	lsls	r3, r3, #2
 80002c0:	4918      	ldr	r1, [pc, #96]	; (8000324 <main+0xb0>)
 80002c2:	4819      	ldr	r0, [pc, #100]	; (8000328 <main+0xb4>)
 80002c4:	220e      	movs	r2, #14
 80002c6:	f002 fb1b 	bl	8002900 <HAL_UART_Transmit>
 80002ca:	1e03      	subs	r3, r0, #0
 80002cc:	d001      	beq.n	80002d2 <main+0x5e>
	    Error_Handler();
 80002ce:	f000 faa5 	bl	800081c <Error_Handler>

	 HAL_Delay(500);
 80002d2:	23fa      	movs	r3, #250	; 0xfa
 80002d4:	005b      	lsls	r3, r3, #1
 80002d6:	0018      	movs	r0, r3
 80002d8:	f000 fcf6 	bl	8000cc8 <HAL_Delay>

	 //YOUR CODE HERE
	 //sprintf(buffer, "%d \r\n", "Test of Time");
	 int result = epochFromTime(time);
 80002dc:	4b0f      	ldr	r3, [pc, #60]	; (800031c <main+0xa8>)
 80002de:	6818      	ldr	r0, [r3, #0]
 80002e0:	6859      	ldr	r1, [r3, #4]
 80002e2:	f000 fa23 	bl	800072c <epochFromTime>
 80002e6:	0003      	movs	r3, r0
 80002e8:	607b      	str	r3, [r7, #4]
	 //pause_sec(5);
	 sprintf(buffer, "%d \r\n", result);
 80002ea:	687a      	ldr	r2, [r7, #4]
 80002ec:	490c      	ldr	r1, [pc, #48]	; (8000320 <main+0xac>)
 80002ee:	4b0d      	ldr	r3, [pc, #52]	; (8000324 <main+0xb0>)
 80002f0:	0018      	movs	r0, r3
 80002f2:	f003 faa5 	bl	8003840 <siprintf>
	 if (HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 1000) != HAL_OK)
 80002f6:	23fa      	movs	r3, #250	; 0xfa
 80002f8:	009b      	lsls	r3, r3, #2
 80002fa:	490a      	ldr	r1, [pc, #40]	; (8000324 <main+0xb0>)
 80002fc:	480a      	ldr	r0, [pc, #40]	; (8000328 <main+0xb4>)
 80002fe:	220e      	movs	r2, #14
 8000300:	f002 fafe 	bl	8002900 <HAL_UART_Transmit>
 8000304:	1e03      	subs	r3, r0, #0
 8000306:	d001      	beq.n	800030c <main+0x98>
	 	    Error_Handler();
 8000308:	f000 fa88 	bl	800081c <Error_Handler>
	 HAL_Delay(500);
 800030c:	23fa      	movs	r3, #250	; 0xfa
 800030e:	005b      	lsls	r3, r3, #1
 8000310:	0018      	movs	r0, r3
 8000312:	f000 fcd9 	bl	8000cc8 <HAL_Delay>
  {
 8000316:	e7bc      	b.n	8000292 <main+0x1e>
 8000318:	48000800 	.word	0x48000800
 800031c:	200001b0 	.word	0x200001b0
 8000320:	08004b6c 	.word	0x08004b6c
 8000324:	200001a0 	.word	0x200001a0
 8000328:	200000d8 	.word	0x200000d8

0800032c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800032c:	b590      	push	{r4, r7, lr}
 800032e:	b097      	sub	sp, #92	; 0x5c
 8000330:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000332:	2428      	movs	r4, #40	; 0x28
 8000334:	193b      	adds	r3, r7, r4
 8000336:	0018      	movs	r0, r3
 8000338:	2330      	movs	r3, #48	; 0x30
 800033a:	001a      	movs	r2, r3
 800033c:	2100      	movs	r1, #0
 800033e:	f003 fa5c 	bl	80037fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000342:	2318      	movs	r3, #24
 8000344:	18fb      	adds	r3, r7, r3
 8000346:	0018      	movs	r0, r3
 8000348:	2310      	movs	r3, #16
 800034a:	001a      	movs	r2, r3
 800034c:	2100      	movs	r1, #0
 800034e:	f003 fa54 	bl	80037fa <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000352:	1d3b      	adds	r3, r7, #4
 8000354:	0018      	movs	r0, r3
 8000356:	2314      	movs	r3, #20
 8000358:	001a      	movs	r2, r3
 800035a:	2100      	movs	r1, #0
 800035c:	f003 fa4d 	bl	80037fa <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000360:	0021      	movs	r1, r4
 8000362:	187b      	adds	r3, r7, r1
 8000364:	2202      	movs	r2, #2
 8000366:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000368:	187b      	adds	r3, r7, r1
 800036a:	2201      	movs	r2, #1
 800036c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800036e:	187b      	adds	r3, r7, r1
 8000370:	2210      	movs	r2, #16
 8000372:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000374:	187b      	adds	r3, r7, r1
 8000376:	2202      	movs	r2, #2
 8000378:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800037a:	187b      	adds	r3, r7, r1
 800037c:	2200      	movs	r2, #0
 800037e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000380:	187b      	adds	r3, r7, r1
 8000382:	22a0      	movs	r2, #160	; 0xa0
 8000384:	0392      	lsls	r2, r2, #14
 8000386:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000388:	187b      	adds	r3, r7, r1
 800038a:	2200      	movs	r2, #0
 800038c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800038e:	187b      	adds	r3, r7, r1
 8000390:	0018      	movs	r0, r3
 8000392:	f001 fd17 	bl	8001dc4 <HAL_RCC_OscConfig>
 8000396:	1e03      	subs	r3, r0, #0
 8000398:	d001      	beq.n	800039e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800039a:	f000 fa3f 	bl	800081c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800039e:	2118      	movs	r1, #24
 80003a0:	187b      	adds	r3, r7, r1
 80003a2:	2207      	movs	r2, #7
 80003a4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003a6:	187b      	adds	r3, r7, r1
 80003a8:	2202      	movs	r2, #2
 80003aa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ac:	187b      	adds	r3, r7, r1
 80003ae:	2200      	movs	r2, #0
 80003b0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003b2:	187b      	adds	r3, r7, r1
 80003b4:	2200      	movs	r2, #0
 80003b6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003b8:	187b      	adds	r3, r7, r1
 80003ba:	2101      	movs	r1, #1
 80003bc:	0018      	movs	r0, r3
 80003be:	f002 f81b 	bl	80023f8 <HAL_RCC_ClockConfig>
 80003c2:	1e03      	subs	r3, r0, #0
 80003c4:	d001      	beq.n	80003ca <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80003c6:	f000 fa29 	bl	800081c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80003ca:	1d3b      	adds	r3, r7, #4
 80003cc:	2220      	movs	r2, #32
 80003ce:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80003d0:	1d3b      	adds	r3, r7, #4
 80003d2:	2200      	movs	r2, #0
 80003d4:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003d6:	1d3b      	adds	r3, r7, #4
 80003d8:	0018      	movs	r0, r3
 80003da:	f002 f95f 	bl	800269c <HAL_RCCEx_PeriphCLKConfig>
 80003de:	1e03      	subs	r3, r0, #0
 80003e0:	d001      	beq.n	80003e6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80003e2:	f000 fa1b 	bl	800081c <Error_Handler>
  }
}
 80003e6:	46c0      	nop			; (mov r8, r8)
 80003e8:	46bd      	mov	sp, r7
 80003ea:	b017      	add	sp, #92	; 0x5c
 80003ec:	bd90      	pop	{r4, r7, pc}
	...

080003f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003f4:	4b1b      	ldr	r3, [pc, #108]	; (8000464 <MX_I2C1_Init+0x74>)
 80003f6:	4a1c      	ldr	r2, [pc, #112]	; (8000468 <MX_I2C1_Init+0x78>)
 80003f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80003fa:	4b1a      	ldr	r3, [pc, #104]	; (8000464 <MX_I2C1_Init+0x74>)
 80003fc:	4a1b      	ldr	r2, [pc, #108]	; (800046c <MX_I2C1_Init+0x7c>)
 80003fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000400:	4b18      	ldr	r3, [pc, #96]	; (8000464 <MX_I2C1_Init+0x74>)
 8000402:	2200      	movs	r2, #0
 8000404:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000406:	4b17      	ldr	r3, [pc, #92]	; (8000464 <MX_I2C1_Init+0x74>)
 8000408:	2201      	movs	r2, #1
 800040a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800040c:	4b15      	ldr	r3, [pc, #84]	; (8000464 <MX_I2C1_Init+0x74>)
 800040e:	2200      	movs	r2, #0
 8000410:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000412:	4b14      	ldr	r3, [pc, #80]	; (8000464 <MX_I2C1_Init+0x74>)
 8000414:	2200      	movs	r2, #0
 8000416:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000418:	4b12      	ldr	r3, [pc, #72]	; (8000464 <MX_I2C1_Init+0x74>)
 800041a:	2200      	movs	r2, #0
 800041c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800041e:	4b11      	ldr	r3, [pc, #68]	; (8000464 <MX_I2C1_Init+0x74>)
 8000420:	2200      	movs	r2, #0
 8000422:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000424:	4b0f      	ldr	r3, [pc, #60]	; (8000464 <MX_I2C1_Init+0x74>)
 8000426:	2200      	movs	r2, #0
 8000428:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800042a:	4b0e      	ldr	r3, [pc, #56]	; (8000464 <MX_I2C1_Init+0x74>)
 800042c:	0018      	movs	r0, r3
 800042e:	f001 f879 	bl	8001524 <HAL_I2C_Init>
 8000432:	1e03      	subs	r3, r0, #0
 8000434:	d001      	beq.n	800043a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000436:	f000 f9f1 	bl	800081c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800043a:	4b0a      	ldr	r3, [pc, #40]	; (8000464 <MX_I2C1_Init+0x74>)
 800043c:	2100      	movs	r1, #0
 800043e:	0018      	movs	r0, r3
 8000440:	f001 fc28 	bl	8001c94 <HAL_I2CEx_ConfigAnalogFilter>
 8000444:	1e03      	subs	r3, r0, #0
 8000446:	d001      	beq.n	800044c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000448:	f000 f9e8 	bl	800081c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800044c:	4b05      	ldr	r3, [pc, #20]	; (8000464 <MX_I2C1_Init+0x74>)
 800044e:	2100      	movs	r1, #0
 8000450:	0018      	movs	r0, r3
 8000452:	f001 fc6b 	bl	8001d2c <HAL_I2CEx_ConfigDigitalFilter>
 8000456:	1e03      	subs	r3, r0, #0
 8000458:	d001      	beq.n	800045e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800045a:	f000 f9df 	bl	800081c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800045e:	46c0      	nop			; (mov r8, r8)
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	2000008c 	.word	0x2000008c
 8000468:	40005400 	.word	0x40005400
 800046c:	2000090e 	.word	0x2000090e

08000470 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000474:	4b14      	ldr	r3, [pc, #80]	; (80004c8 <MX_USART2_UART_Init+0x58>)
 8000476:	4a15      	ldr	r2, [pc, #84]	; (80004cc <MX_USART2_UART_Init+0x5c>)
 8000478:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800047a:	4b13      	ldr	r3, [pc, #76]	; (80004c8 <MX_USART2_UART_Init+0x58>)
 800047c:	2296      	movs	r2, #150	; 0x96
 800047e:	0192      	lsls	r2, r2, #6
 8000480:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000482:	4b11      	ldr	r3, [pc, #68]	; (80004c8 <MX_USART2_UART_Init+0x58>)
 8000484:	2200      	movs	r2, #0
 8000486:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000488:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <MX_USART2_UART_Init+0x58>)
 800048a:	2200      	movs	r2, #0
 800048c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800048e:	4b0e      	ldr	r3, [pc, #56]	; (80004c8 <MX_USART2_UART_Init+0x58>)
 8000490:	2200      	movs	r2, #0
 8000492:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000494:	4b0c      	ldr	r3, [pc, #48]	; (80004c8 <MX_USART2_UART_Init+0x58>)
 8000496:	220c      	movs	r2, #12
 8000498:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800049a:	4b0b      	ldr	r3, [pc, #44]	; (80004c8 <MX_USART2_UART_Init+0x58>)
 800049c:	2200      	movs	r2, #0
 800049e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004a0:	4b09      	ldr	r3, [pc, #36]	; (80004c8 <MX_USART2_UART_Init+0x58>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004a6:	4b08      	ldr	r3, [pc, #32]	; (80004c8 <MX_USART2_UART_Init+0x58>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004ac:	4b06      	ldr	r3, [pc, #24]	; (80004c8 <MX_USART2_UART_Init+0x58>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004b2:	4b05      	ldr	r3, [pc, #20]	; (80004c8 <MX_USART2_UART_Init+0x58>)
 80004b4:	0018      	movs	r0, r3
 80004b6:	f002 f9cf 	bl	8002858 <HAL_UART_Init>
 80004ba:	1e03      	subs	r3, r0, #0
 80004bc:	d001      	beq.n	80004c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80004be:	f000 f9ad 	bl	800081c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	200000d8 	.word	0x200000d8
 80004cc:	40004400 	.word	0x40004400

080004d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004d6:	4b0c      	ldr	r3, [pc, #48]	; (8000508 <MX_DMA_Init+0x38>)
 80004d8:	695a      	ldr	r2, [r3, #20]
 80004da:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <MX_DMA_Init+0x38>)
 80004dc:	2101      	movs	r1, #1
 80004de:	430a      	orrs	r2, r1
 80004e0:	615a      	str	r2, [r3, #20]
 80004e2:	4b09      	ldr	r3, [pc, #36]	; (8000508 <MX_DMA_Init+0x38>)
 80004e4:	695b      	ldr	r3, [r3, #20]
 80004e6:	2201      	movs	r2, #1
 80004e8:	4013      	ands	r3, r2
 80004ea:	607b      	str	r3, [r7, #4]
 80004ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 80004ee:	2200      	movs	r2, #0
 80004f0:	2100      	movs	r1, #0
 80004f2:	200b      	movs	r0, #11
 80004f4:	f000 fcb8 	bl	8000e68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 80004f8:	200b      	movs	r0, #11
 80004fa:	f000 fcca 	bl	8000e92 <HAL_NVIC_EnableIRQ>

}
 80004fe:	46c0      	nop			; (mov r8, r8)
 8000500:	46bd      	mov	sp, r7
 8000502:	b002      	add	sp, #8
 8000504:	bd80      	pop	{r7, pc}
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	40021000 	.word	0x40021000

0800050c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800050c:	b590      	push	{r4, r7, lr}
 800050e:	b08b      	sub	sp, #44	; 0x2c
 8000510:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000512:	2414      	movs	r4, #20
 8000514:	193b      	adds	r3, r7, r4
 8000516:	0018      	movs	r0, r3
 8000518:	2314      	movs	r3, #20
 800051a:	001a      	movs	r2, r3
 800051c:	2100      	movs	r1, #0
 800051e:	f003 f96c 	bl	80037fa <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000522:	4b34      	ldr	r3, [pc, #208]	; (80005f4 <MX_GPIO_Init+0xe8>)
 8000524:	695a      	ldr	r2, [r3, #20]
 8000526:	4b33      	ldr	r3, [pc, #204]	; (80005f4 <MX_GPIO_Init+0xe8>)
 8000528:	2180      	movs	r1, #128	; 0x80
 800052a:	03c9      	lsls	r1, r1, #15
 800052c:	430a      	orrs	r2, r1
 800052e:	615a      	str	r2, [r3, #20]
 8000530:	4b30      	ldr	r3, [pc, #192]	; (80005f4 <MX_GPIO_Init+0xe8>)
 8000532:	695a      	ldr	r2, [r3, #20]
 8000534:	2380      	movs	r3, #128	; 0x80
 8000536:	03db      	lsls	r3, r3, #15
 8000538:	4013      	ands	r3, r2
 800053a:	613b      	str	r3, [r7, #16]
 800053c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800053e:	4b2d      	ldr	r3, [pc, #180]	; (80005f4 <MX_GPIO_Init+0xe8>)
 8000540:	695a      	ldr	r2, [r3, #20]
 8000542:	4b2c      	ldr	r3, [pc, #176]	; (80005f4 <MX_GPIO_Init+0xe8>)
 8000544:	2180      	movs	r1, #128	; 0x80
 8000546:	0289      	lsls	r1, r1, #10
 8000548:	430a      	orrs	r2, r1
 800054a:	615a      	str	r2, [r3, #20]
 800054c:	4b29      	ldr	r3, [pc, #164]	; (80005f4 <MX_GPIO_Init+0xe8>)
 800054e:	695a      	ldr	r2, [r3, #20]
 8000550:	2380      	movs	r3, #128	; 0x80
 8000552:	029b      	lsls	r3, r3, #10
 8000554:	4013      	ands	r3, r2
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800055a:	4b26      	ldr	r3, [pc, #152]	; (80005f4 <MX_GPIO_Init+0xe8>)
 800055c:	695a      	ldr	r2, [r3, #20]
 800055e:	4b25      	ldr	r3, [pc, #148]	; (80005f4 <MX_GPIO_Init+0xe8>)
 8000560:	2180      	movs	r1, #128	; 0x80
 8000562:	0309      	lsls	r1, r1, #12
 8000564:	430a      	orrs	r2, r1
 8000566:	615a      	str	r2, [r3, #20]
 8000568:	4b22      	ldr	r3, [pc, #136]	; (80005f4 <MX_GPIO_Init+0xe8>)
 800056a:	695a      	ldr	r2, [r3, #20]
 800056c:	2380      	movs	r3, #128	; 0x80
 800056e:	031b      	lsls	r3, r3, #12
 8000570:	4013      	ands	r3, r2
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000576:	4b1f      	ldr	r3, [pc, #124]	; (80005f4 <MX_GPIO_Init+0xe8>)
 8000578:	695a      	ldr	r2, [r3, #20]
 800057a:	4b1e      	ldr	r3, [pc, #120]	; (80005f4 <MX_GPIO_Init+0xe8>)
 800057c:	2180      	movs	r1, #128	; 0x80
 800057e:	02c9      	lsls	r1, r1, #11
 8000580:	430a      	orrs	r2, r1
 8000582:	615a      	str	r2, [r3, #20]
 8000584:	4b1b      	ldr	r3, [pc, #108]	; (80005f4 <MX_GPIO_Init+0xe8>)
 8000586:	695a      	ldr	r2, [r3, #20]
 8000588:	2380      	movs	r3, #128	; 0x80
 800058a:	02db      	lsls	r3, r3, #11
 800058c:	4013      	ands	r3, r2
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000592:	23c0      	movs	r3, #192	; 0xc0
 8000594:	009b      	lsls	r3, r3, #2
 8000596:	4818      	ldr	r0, [pc, #96]	; (80005f8 <MX_GPIO_Init+0xec>)
 8000598:	2200      	movs	r2, #0
 800059a:	0019      	movs	r1, r3
 800059c:	f000 ff8a 	bl	80014b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005a0:	193b      	adds	r3, r7, r4
 80005a2:	2201      	movs	r2, #1
 80005a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80005a6:	193b      	adds	r3, r7, r4
 80005a8:	2290      	movs	r2, #144	; 0x90
 80005aa:	0352      	lsls	r2, r2, #13
 80005ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ae:	193b      	adds	r3, r7, r4
 80005b0:	2200      	movs	r2, #0
 80005b2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005b4:	193a      	adds	r2, r7, r4
 80005b6:	2390      	movs	r3, #144	; 0x90
 80005b8:	05db      	lsls	r3, r3, #23
 80005ba:	0011      	movs	r1, r2
 80005bc:	0018      	movs	r0, r3
 80005be:	f000 fe09 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 80005c2:	0021      	movs	r1, r4
 80005c4:	187b      	adds	r3, r7, r1
 80005c6:	22c0      	movs	r2, #192	; 0xc0
 80005c8:	0092      	lsls	r2, r2, #2
 80005ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005cc:	187b      	adds	r3, r7, r1
 80005ce:	2201      	movs	r2, #1
 80005d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d2:	187b      	adds	r3, r7, r1
 80005d4:	2200      	movs	r2, #0
 80005d6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d8:	187b      	adds	r3, r7, r1
 80005da:	2200      	movs	r2, #0
 80005dc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005de:	187b      	adds	r3, r7, r1
 80005e0:	4a05      	ldr	r2, [pc, #20]	; (80005f8 <MX_GPIO_Init+0xec>)
 80005e2:	0019      	movs	r1, r3
 80005e4:	0010      	movs	r0, r2
 80005e6:	f000 fdf5 	bl	80011d4 <HAL_GPIO_Init>

}
 80005ea:	46c0      	nop			; (mov r8, r8)
 80005ec:	46bd      	mov	sp, r7
 80005ee:	b00b      	add	sp, #44	; 0x2c
 80005f0:	bd90      	pop	{r4, r7, pc}
 80005f2:	46c0      	nop			; (mov r8, r8)
 80005f4:	40021000 	.word	0x40021000
 80005f8:	48000800 	.word	0x48000800

080005fc <pause_sec>:

/* USER CODE BEGIN 4 */
void pause_sec(float x)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	//Make sure you've defined DELAY1 and DELAY2 in the private define section
	//__IO int i,j;
	//for (int v=0; v<=x; v++)
	//for (i=0; i<=DELAY2; i++)  // 1 sec
	// for (j=0; j<=DELAY1; j++); // 1 sec
	int timeTaken = (int)x*DELAY1*DELAY2;
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	f7ff fe15 	bl	8000234 <__aeabi_f2iz>
 800060a:	0002      	movs	r2, r0
 800060c:	0013      	movs	r3, r2
 800060e:	019b      	lsls	r3, r3, #6
 8000610:	1a9b      	subs	r3, r3, r2
 8000612:	009b      	lsls	r3, r3, #2
 8000614:	1a9b      	subs	r3, r3, r2
 8000616:	031b      	lsls	r3, r3, #12
 8000618:	60fb      	str	r3, [r7, #12]
	while (timeTaken) {
 800061a:	e002      	b.n	8000622 <pause_sec+0x26>
		timeTaken -= 1;
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	3b01      	subs	r3, #1
 8000620:	60fb      	str	r3, [r7, #12]
	while (timeTaken) {
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d1f9      	bne.n	800061c <pause_sec+0x20>
	}
	//YOUR CODE HERE
}
 8000628:	46c0      	nop			; (mov r8, r8)
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	46bd      	mov	sp, r7
 800062e:	b004      	add	sp, #16
 8000630:	bd80      	pop	{r7, pc}

08000632 <bcdToDec>:
	//YOUR CODE HERE
	return bcd;
}

int bcdToDec(uint8_t val)
{
 8000632:	b580      	push	{r7, lr}
 8000634:	b084      	sub	sp, #16
 8000636:	af00      	add	r7, sp, #0
 8000638:	0002      	movs	r2, r0
 800063a:	1dfb      	adds	r3, r7, #7
 800063c:	701a      	strb	r2, [r3, #0]
    /* Convert binary coded decimal to normal decimal numbers */
	//TO DO:
	//TASK 3
	//Complete the BCD to decimal function

	int result = (int) ( (val/16*10) + (val%16) );
 800063e:	1dfb      	adds	r3, r7, #7
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	091b      	lsrs	r3, r3, #4
 8000644:	b2db      	uxtb	r3, r3
 8000646:	001a      	movs	r2, r3
 8000648:	0013      	movs	r3, r2
 800064a:	009b      	lsls	r3, r3, #2
 800064c:	189b      	adds	r3, r3, r2
 800064e:	005b      	lsls	r3, r3, #1
 8000650:	0019      	movs	r1, r3
 8000652:	1dfb      	adds	r3, r7, #7
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	220f      	movs	r2, #15
 8000658:	4013      	ands	r3, r2
 800065a:	18cb      	adds	r3, r1, r3
 800065c:	60fb      	str	r3, [r7, #12]
	return result;
 800065e:	68fb      	ldr	r3, [r7, #12]
}
 8000660:	0018      	movs	r0, r3
 8000662:	46bd      	mov	sp, r7
 8000664:	b004      	add	sp, #16
 8000666:	bd80      	pop	{r7, pc}

08000668 <getTime>:
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, FIRST_REG, REG_SIZE, set_time, 7, 1000);

}

void getTime (void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b088      	sub	sp, #32
 800066c:	af04      	add	r7, sp, #16
	//The function and RTC supports multithread. That means we can give the function a buffer and first address
	//and it will read 1 byte of data, increment the register address, write another byte and so on

	uint8_t get_time[7];

	uint16_t FIRST_REG = 0x00;
 800066e:	200e      	movs	r0, #14
 8000670:	183b      	adds	r3, r7, r0
 8000672:	2200      	movs	r2, #0
 8000674:	801a      	strh	r2, [r3, #0]
	uint16_t REG_SIZE = 1;
 8000676:	210c      	movs	r1, #12
 8000678:	187b      	adds	r3, r7, r1
 800067a:	2201      	movs	r2, #1
 800067c:	801a      	strh	r2, [r3, #0]

	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, FIRST_REG, REG_SIZE, get_time, 7, 1000);
 800067e:	187b      	adds	r3, r7, r1
 8000680:	8819      	ldrh	r1, [r3, #0]
 8000682:	183b      	adds	r3, r7, r0
 8000684:	881a      	ldrh	r2, [r3, #0]
 8000686:	4827      	ldr	r0, [pc, #156]	; (8000724 <getTime+0xbc>)
 8000688:	23fa      	movs	r3, #250	; 0xfa
 800068a:	009b      	lsls	r3, r3, #2
 800068c:	9302      	str	r3, [sp, #8]
 800068e:	2307      	movs	r3, #7
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	000b      	movs	r3, r1
 8000698:	2100      	movs	r1, #0
 800069a:	f000 ffd9 	bl	8001650 <HAL_I2C_Mem_Read>

	time.seconds = bcdToDec(get_time[0]);
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	0018      	movs	r0, r3
 80006a4:	f7ff ffc5 	bl	8000632 <bcdToDec>
 80006a8:	0003      	movs	r3, r0
 80006aa:	b2da      	uxtb	r2, r3
 80006ac:	4b1e      	ldr	r3, [pc, #120]	; (8000728 <getTime+0xc0>)
 80006ae:	701a      	strb	r2, [r3, #0]
	time.minutes = bcdToDec(get_time[1]);
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	785b      	ldrb	r3, [r3, #1]
 80006b4:	0018      	movs	r0, r3
 80006b6:	f7ff ffbc 	bl	8000632 <bcdToDec>
 80006ba:	0003      	movs	r3, r0
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	4b1a      	ldr	r3, [pc, #104]	; (8000728 <getTime+0xc0>)
 80006c0:	705a      	strb	r2, [r3, #1]
	time.hour = bcdToDec(get_time[2]);
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	789b      	ldrb	r3, [r3, #2]
 80006c6:	0018      	movs	r0, r3
 80006c8:	f7ff ffb3 	bl	8000632 <bcdToDec>
 80006cc:	0003      	movs	r3, r0
 80006ce:	b2da      	uxtb	r2, r3
 80006d0:	4b15      	ldr	r3, [pc, #84]	; (8000728 <getTime+0xc0>)
 80006d2:	709a      	strb	r2, [r3, #2]
	time.dayofweek = bcdToDec(get_time[3]);
 80006d4:	1d3b      	adds	r3, r7, #4
 80006d6:	78db      	ldrb	r3, [r3, #3]
 80006d8:	0018      	movs	r0, r3
 80006da:	f7ff ffaa 	bl	8000632 <bcdToDec>
 80006de:	0003      	movs	r3, r0
 80006e0:	b2da      	uxtb	r2, r3
 80006e2:	4b11      	ldr	r3, [pc, #68]	; (8000728 <getTime+0xc0>)
 80006e4:	70da      	strb	r2, [r3, #3]
	time.dayofmonth = bcdToDec(get_time[4]);
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	791b      	ldrb	r3, [r3, #4]
 80006ea:	0018      	movs	r0, r3
 80006ec:	f7ff ffa1 	bl	8000632 <bcdToDec>
 80006f0:	0003      	movs	r3, r0
 80006f2:	b2da      	uxtb	r2, r3
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <getTime+0xc0>)
 80006f6:	711a      	strb	r2, [r3, #4]
	time.month = bcdToDec(get_time[5]);
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	795b      	ldrb	r3, [r3, #5]
 80006fc:	0018      	movs	r0, r3
 80006fe:	f7ff ff98 	bl	8000632 <bcdToDec>
 8000702:	0003      	movs	r3, r0
 8000704:	b2da      	uxtb	r2, r3
 8000706:	4b08      	ldr	r3, [pc, #32]	; (8000728 <getTime+0xc0>)
 8000708:	715a      	strb	r2, [r3, #5]
	time.year = bcdToDec(get_time[6]);
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	799b      	ldrb	r3, [r3, #6]
 800070e:	0018      	movs	r0, r3
 8000710:	f7ff ff8f 	bl	8000632 <bcdToDec>
 8000714:	0003      	movs	r3, r0
 8000716:	b2da      	uxtb	r2, r3
 8000718:	4b03      	ldr	r3, [pc, #12]	; (8000728 <getTime+0xc0>)
 800071a:	719a      	strb	r2, [r3, #6]

	//YOUR CODE HERE

}
 800071c:	46c0      	nop			; (mov r8, r8)
 800071e:	46bd      	mov	sp, r7
 8000720:	b004      	add	sp, #16
 8000722:	bd80      	pop	{r7, pc}
 8000724:	2000008c 	.word	0x2000008c
 8000728:	200001b0 	.word	0x200001b0

0800072c <epochFromTime>:

int epochFromTime(TIME time){
 800072c:	b580      	push	{r7, lr}
 800072e:	b094      	sub	sp, #80	; 0x50
 8000730:	af00      	add	r7, sp, #0
 8000732:	003b      	movs	r3, r7
 8000734:	6018      	str	r0, [r3, #0]
 8000736:	6059      	str	r1, [r3, #4]
	// It is define above as EPOCH_2022.
	// You can work from that and ignore the effects of leap years/seconds

	//YOUR CODE HERE

	int daySeconds = 86400;
 8000738:	4b34      	ldr	r3, [pc, #208]	; (800080c <epochFromTime+0xe0>)
 800073a:	647b      	str	r3, [r7, #68]	; 0x44
	int epochTime = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	643b      	str	r3, [r7, #64]	; 0x40
	int days = 0;
 8000740:	2300      	movs	r3, #0
 8000742:	64fb      	str	r3, [r7, #76]	; 0x4c

	int monthDays[13] = {0,31,28,31,30,31,30,31,31,30,31,30,31};
 8000744:	2308      	movs	r3, #8
 8000746:	18fa      	adds	r2, r7, r3
 8000748:	4b31      	ldr	r3, [pc, #196]	; (8000810 <epochFromTime+0xe4>)
 800074a:	0010      	movs	r0, r2
 800074c:	0019      	movs	r1, r3
 800074e:	2334      	movs	r3, #52	; 0x34
 8000750:	001a      	movs	r2, r3
 8000752:	f003 f849 	bl	80037e8 <memcpy>
	epochTime = epochTime +((time.year - 22)*daySeconds*365);
 8000756:	003b      	movs	r3, r7
 8000758:	799b      	ldrb	r3, [r3, #6]
 800075a:	3b16      	subs	r3, #22
 800075c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800075e:	435a      	muls	r2, r3
 8000760:	0013      	movs	r3, r2
 8000762:	00db      	lsls	r3, r3, #3
 8000764:	189b      	adds	r3, r3, r2
 8000766:	00db      	lsls	r3, r3, #3
 8000768:	189b      	adds	r3, r3, r2
 800076a:	009a      	lsls	r2, r3, #2
 800076c:	189b      	adds	r3, r3, r2
 800076e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000770:	18d3      	adds	r3, r2, r3
 8000772:	643b      	str	r3, [r7, #64]	; 0x40

	for (int i=1; i<13; i++) {
 8000774:	2301      	movs	r3, #1
 8000776:	64bb      	str	r3, [r7, #72]	; 0x48
 8000778:	e00a      	b.n	8000790 <epochFromTime+0x64>
		days += monthDays[i];
 800077a:	2308      	movs	r3, #8
 800077c:	18fb      	adds	r3, r7, r3
 800077e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000780:	0092      	lsls	r2, r2, #2
 8000782:	58d3      	ldr	r3, [r2, r3]
 8000784:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000786:	18d3      	adds	r3, r2, r3
 8000788:	64fb      	str	r3, [r7, #76]	; 0x4c
	for (int i=1; i<13; i++) {
 800078a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800078c:	3301      	adds	r3, #1
 800078e:	64bb      	str	r3, [r7, #72]	; 0x48
 8000790:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000792:	2b0c      	cmp	r3, #12
 8000794:	ddf1      	ble.n	800077a <epochFromTime+0x4e>
	}

	days += (time.dayofmonth - 1);
 8000796:	003b      	movs	r3, r7
 8000798:	791b      	ldrb	r3, [r3, #4]
 800079a:	3b01      	subs	r3, #1
 800079c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800079e:	18d3      	adds	r3, r2, r3
 80007a0:	64fb      	str	r3, [r7, #76]	; 0x4c
	epochTime += days*daySeconds;
 80007a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80007a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80007a6:	4353      	muls	r3, r2
 80007a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80007aa:	18d3      	adds	r3, r2, r3
 80007ac:	643b      	str	r3, [r7, #64]	; 0x40
	epochTime += (time.hour*3600);
 80007ae:	003b      	movs	r3, r7
 80007b0:	789b      	ldrb	r3, [r3, #2]
 80007b2:	001a      	movs	r2, r3
 80007b4:	0013      	movs	r3, r2
 80007b6:	011b      	lsls	r3, r3, #4
 80007b8:	1a9b      	subs	r3, r3, r2
 80007ba:	011a      	lsls	r2, r3, #4
 80007bc:	1ad2      	subs	r2, r2, r3
 80007be:	0113      	lsls	r3, r2, #4
 80007c0:	001a      	movs	r2, r3
 80007c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007c4:	189b      	adds	r3, r3, r2
 80007c6:	643b      	str	r3, [r7, #64]	; 0x40
	epochTime += (time.minutes*60);
 80007c8:	003b      	movs	r3, r7
 80007ca:	785b      	ldrb	r3, [r3, #1]
 80007cc:	001a      	movs	r2, r3
 80007ce:	0013      	movs	r3, r2
 80007d0:	011b      	lsls	r3, r3, #4
 80007d2:	1a9b      	subs	r3, r3, r2
 80007d4:	009b      	lsls	r3, r3, #2
 80007d6:	001a      	movs	r2, r3
 80007d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007da:	189b      	adds	r3, r3, r2
 80007dc:	643b      	str	r3, [r7, #64]	; 0x40
	epochTime += time.seconds;
 80007de:	003b      	movs	r3, r7
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	001a      	movs	r2, r3
 80007e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007e6:	189b      	adds	r3, r3, r2
 80007e8:	643b      	str	r3, [r7, #64]	; 0x40

	int result = EPOCH_2022 + epochTime;
 80007ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007ec:	4a09      	ldr	r2, [pc, #36]	; (8000814 <epochFromTime+0xe8>)
 80007ee:	4694      	mov	ip, r2
 80007f0:	4463      	add	r3, ip
 80007f2:	63fb      	str	r3, [r7, #60]	; 0x3c

	printf("EPOCH Time for 2022 is => %d", result);
 80007f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80007f6:	4b08      	ldr	r3, [pc, #32]	; (8000818 <epochFromTime+0xec>)
 80007f8:	0011      	movs	r1, r2
 80007fa:	0018      	movs	r0, r3
 80007fc:	f003 f806 	bl	800380c <iprintf>

	return result;
 8000800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8000802:	0018      	movs	r0, r3
 8000804:	46bd      	mov	sp, r7
 8000806:	b014      	add	sp, #80	; 0x50
 8000808:	bd80      	pop	{r7, pc}
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	00015180 	.word	0x00015180
 8000810:	08004b94 	.word	0x08004b94
 8000814:	61cf7d60 	.word	0x61cf7d60
 8000818:	08004b74 	.word	0x08004b74

0800081c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000820:	b672      	cpsid	i
}
 8000822:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000824:	e7fe      	b.n	8000824 <Error_Handler+0x8>
	...

08000828 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082e:	4b0f      	ldr	r3, [pc, #60]	; (800086c <HAL_MspInit+0x44>)
 8000830:	699a      	ldr	r2, [r3, #24]
 8000832:	4b0e      	ldr	r3, [pc, #56]	; (800086c <HAL_MspInit+0x44>)
 8000834:	2101      	movs	r1, #1
 8000836:	430a      	orrs	r2, r1
 8000838:	619a      	str	r2, [r3, #24]
 800083a:	4b0c      	ldr	r3, [pc, #48]	; (800086c <HAL_MspInit+0x44>)
 800083c:	699b      	ldr	r3, [r3, #24]
 800083e:	2201      	movs	r2, #1
 8000840:	4013      	ands	r3, r2
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <HAL_MspInit+0x44>)
 8000848:	69da      	ldr	r2, [r3, #28]
 800084a:	4b08      	ldr	r3, [pc, #32]	; (800086c <HAL_MspInit+0x44>)
 800084c:	2180      	movs	r1, #128	; 0x80
 800084e:	0549      	lsls	r1, r1, #21
 8000850:	430a      	orrs	r2, r1
 8000852:	61da      	str	r2, [r3, #28]
 8000854:	4b05      	ldr	r3, [pc, #20]	; (800086c <HAL_MspInit+0x44>)
 8000856:	69da      	ldr	r2, [r3, #28]
 8000858:	2380      	movs	r3, #128	; 0x80
 800085a:	055b      	lsls	r3, r3, #21
 800085c:	4013      	ands	r3, r2
 800085e:	603b      	str	r3, [r7, #0]
 8000860:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	46bd      	mov	sp, r7
 8000866:	b002      	add	sp, #8
 8000868:	bd80      	pop	{r7, pc}
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	40021000 	.word	0x40021000

08000870 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000870:	b590      	push	{r4, r7, lr}
 8000872:	b08b      	sub	sp, #44	; 0x2c
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000878:	2414      	movs	r4, #20
 800087a:	193b      	adds	r3, r7, r4
 800087c:	0018      	movs	r0, r3
 800087e:	2314      	movs	r3, #20
 8000880:	001a      	movs	r2, r3
 8000882:	2100      	movs	r1, #0
 8000884:	f002 ffb9 	bl	80037fa <memset>
  if(hi2c->Instance==I2C1)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a1c      	ldr	r2, [pc, #112]	; (8000900 <HAL_I2C_MspInit+0x90>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d131      	bne.n	80008f6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000892:	4b1c      	ldr	r3, [pc, #112]	; (8000904 <HAL_I2C_MspInit+0x94>)
 8000894:	695a      	ldr	r2, [r3, #20]
 8000896:	4b1b      	ldr	r3, [pc, #108]	; (8000904 <HAL_I2C_MspInit+0x94>)
 8000898:	2180      	movs	r1, #128	; 0x80
 800089a:	02c9      	lsls	r1, r1, #11
 800089c:	430a      	orrs	r2, r1
 800089e:	615a      	str	r2, [r3, #20]
 80008a0:	4b18      	ldr	r3, [pc, #96]	; (8000904 <HAL_I2C_MspInit+0x94>)
 80008a2:	695a      	ldr	r2, [r3, #20]
 80008a4:	2380      	movs	r3, #128	; 0x80
 80008a6:	02db      	lsls	r3, r3, #11
 80008a8:	4013      	ands	r3, r2
 80008aa:	613b      	str	r3, [r7, #16]
 80008ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008ae:	0021      	movs	r1, r4
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	22c0      	movs	r2, #192	; 0xc0
 80008b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008b6:	187b      	adds	r3, r7, r1
 80008b8:	2212      	movs	r2, #18
 80008ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	187b      	adds	r3, r7, r1
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008c2:	187b      	adds	r3, r7, r1
 80008c4:	2203      	movs	r2, #3
 80008c6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	2201      	movs	r2, #1
 80008cc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ce:	187b      	adds	r3, r7, r1
 80008d0:	4a0d      	ldr	r2, [pc, #52]	; (8000908 <HAL_I2C_MspInit+0x98>)
 80008d2:	0019      	movs	r1, r3
 80008d4:	0010      	movs	r0, r2
 80008d6:	f000 fc7d 	bl	80011d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008da:	4b0a      	ldr	r3, [pc, #40]	; (8000904 <HAL_I2C_MspInit+0x94>)
 80008dc:	69da      	ldr	r2, [r3, #28]
 80008de:	4b09      	ldr	r3, [pc, #36]	; (8000904 <HAL_I2C_MspInit+0x94>)
 80008e0:	2180      	movs	r1, #128	; 0x80
 80008e2:	0389      	lsls	r1, r1, #14
 80008e4:	430a      	orrs	r2, r1
 80008e6:	61da      	str	r2, [r3, #28]
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <HAL_I2C_MspInit+0x94>)
 80008ea:	69da      	ldr	r2, [r3, #28]
 80008ec:	2380      	movs	r3, #128	; 0x80
 80008ee:	039b      	lsls	r3, r3, #14
 80008f0:	4013      	ands	r3, r2
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	46bd      	mov	sp, r7
 80008fa:	b00b      	add	sp, #44	; 0x2c
 80008fc:	bd90      	pop	{r4, r7, pc}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	40005400 	.word	0x40005400
 8000904:	40021000 	.word	0x40021000
 8000908:	48000400 	.word	0x48000400

0800090c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800090c:	b590      	push	{r4, r7, lr}
 800090e:	b08b      	sub	sp, #44	; 0x2c
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000914:	2414      	movs	r4, #20
 8000916:	193b      	adds	r3, r7, r4
 8000918:	0018      	movs	r0, r3
 800091a:	2314      	movs	r3, #20
 800091c:	001a      	movs	r2, r3
 800091e:	2100      	movs	r1, #0
 8000920:	f002 ff6b 	bl	80037fa <memset>
  if(huart->Instance==USART2)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a33      	ldr	r2, [pc, #204]	; (80009f8 <HAL_UART_MspInit+0xec>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d160      	bne.n	80009f0 <HAL_UART_MspInit+0xe4>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800092e:	4b33      	ldr	r3, [pc, #204]	; (80009fc <HAL_UART_MspInit+0xf0>)
 8000930:	69da      	ldr	r2, [r3, #28]
 8000932:	4b32      	ldr	r3, [pc, #200]	; (80009fc <HAL_UART_MspInit+0xf0>)
 8000934:	2180      	movs	r1, #128	; 0x80
 8000936:	0289      	lsls	r1, r1, #10
 8000938:	430a      	orrs	r2, r1
 800093a:	61da      	str	r2, [r3, #28]
 800093c:	4b2f      	ldr	r3, [pc, #188]	; (80009fc <HAL_UART_MspInit+0xf0>)
 800093e:	69da      	ldr	r2, [r3, #28]
 8000940:	2380      	movs	r3, #128	; 0x80
 8000942:	029b      	lsls	r3, r3, #10
 8000944:	4013      	ands	r3, r2
 8000946:	613b      	str	r3, [r7, #16]
 8000948:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	4b2c      	ldr	r3, [pc, #176]	; (80009fc <HAL_UART_MspInit+0xf0>)
 800094c:	695a      	ldr	r2, [r3, #20]
 800094e:	4b2b      	ldr	r3, [pc, #172]	; (80009fc <HAL_UART_MspInit+0xf0>)
 8000950:	2180      	movs	r1, #128	; 0x80
 8000952:	0289      	lsls	r1, r1, #10
 8000954:	430a      	orrs	r2, r1
 8000956:	615a      	str	r2, [r3, #20]
 8000958:	4b28      	ldr	r3, [pc, #160]	; (80009fc <HAL_UART_MspInit+0xf0>)
 800095a:	695a      	ldr	r2, [r3, #20]
 800095c:	2380      	movs	r3, #128	; 0x80
 800095e:	029b      	lsls	r3, r3, #10
 8000960:	4013      	ands	r3, r2
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000966:	0021      	movs	r1, r4
 8000968:	187b      	adds	r3, r7, r1
 800096a:	220c      	movs	r2, #12
 800096c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096e:	187b      	adds	r3, r7, r1
 8000970:	2202      	movs	r2, #2
 8000972:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	187b      	adds	r3, r7, r1
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800097a:	187b      	adds	r3, r7, r1
 800097c:	2203      	movs	r2, #3
 800097e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000980:	187b      	adds	r3, r7, r1
 8000982:	2201      	movs	r2, #1
 8000984:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000986:	187a      	adds	r2, r7, r1
 8000988:	2390      	movs	r3, #144	; 0x90
 800098a:	05db      	lsls	r3, r3, #23
 800098c:	0011      	movs	r1, r2
 800098e:	0018      	movs	r0, r3
 8000990:	f000 fc20 	bl	80011d4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 8000994:	4b1a      	ldr	r3, [pc, #104]	; (8000a00 <HAL_UART_MspInit+0xf4>)
 8000996:	4a1b      	ldr	r2, [pc, #108]	; (8000a04 <HAL_UART_MspInit+0xf8>)
 8000998:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800099a:	4b19      	ldr	r3, [pc, #100]	; (8000a00 <HAL_UART_MspInit+0xf4>)
 800099c:	2210      	movs	r2, #16
 800099e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009a0:	4b17      	ldr	r3, [pc, #92]	; (8000a00 <HAL_UART_MspInit+0xf4>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009a6:	4b16      	ldr	r3, [pc, #88]	; (8000a00 <HAL_UART_MspInit+0xf4>)
 80009a8:	2280      	movs	r2, #128	; 0x80
 80009aa:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009ac:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <HAL_UART_MspInit+0xf4>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009b2:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <HAL_UART_MspInit+0xf4>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80009b8:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <HAL_UART_MspInit+0xf4>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80009be:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <HAL_UART_MspInit+0xf4>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80009c4:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <HAL_UART_MspInit+0xf4>)
 80009c6:	0018      	movs	r0, r3
 80009c8:	f000 fa80 	bl	8000ecc <HAL_DMA_Init>
 80009cc:	1e03      	subs	r3, r0, #0
 80009ce:	d001      	beq.n	80009d4 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 80009d0:	f7ff ff24 	bl	800081c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	4a0a      	ldr	r2, [pc, #40]	; (8000a00 <HAL_UART_MspInit+0xf4>)
 80009d8:	66da      	str	r2, [r3, #108]	; 0x6c
 80009da:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <HAL_UART_MspInit+0xf4>)
 80009dc:	687a      	ldr	r2, [r7, #4]
 80009de:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80009e0:	2200      	movs	r2, #0
 80009e2:	2100      	movs	r1, #0
 80009e4:	201c      	movs	r0, #28
 80009e6:	f000 fa3f 	bl	8000e68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009ea:	201c      	movs	r0, #28
 80009ec:	f000 fa51 	bl	8000e92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009f0:	46c0      	nop			; (mov r8, r8)
 80009f2:	46bd      	mov	sp, r7
 80009f4:	b00b      	add	sp, #44	; 0x2c
 80009f6:	bd90      	pop	{r4, r7, pc}
 80009f8:	40004400 	.word	0x40004400
 80009fc:	40021000 	.word	0x40021000
 8000a00:	2000015c 	.word	0x2000015c
 8000a04:	40020044 	.word	0x40020044

08000a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <NMI_Handler+0x4>

08000a0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <HardFault_Handler+0x4>

08000a14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a18:	46c0      	nop			; (mov r8, r8)
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a2c:	f000 f930 	bl	8000c90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a30:	46c0      	nop			; (mov r8, r8)
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
	...

08000a38 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000a3c:	4b03      	ldr	r3, [pc, #12]	; (8000a4c <DMA1_Channel4_5_IRQHandler+0x14>)
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f000 fb09 	bl	8001056 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8000a44:	46c0      	nop			; (mov r8, r8)
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	46c0      	nop			; (mov r8, r8)
 8000a4c:	2000015c 	.word	0x2000015c

08000a50 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a54:	4b03      	ldr	r3, [pc, #12]	; (8000a64 <USART2_IRQHandler+0x14>)
 8000a56:	0018      	movs	r0, r3
 8000a58:	f001 fffc 	bl	8002a54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a5c:	46c0      	nop			; (mov r8, r8)
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	200000d8 	.word	0x200000d8

08000a68 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b086      	sub	sp, #24
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	60b9      	str	r1, [r7, #8]
 8000a72:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a74:	2300      	movs	r3, #0
 8000a76:	617b      	str	r3, [r7, #20]
 8000a78:	e00a      	b.n	8000a90 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a7a:	e000      	b.n	8000a7e <_read+0x16>
 8000a7c:	bf00      	nop
 8000a7e:	0001      	movs	r1, r0
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	1c5a      	adds	r2, r3, #1
 8000a84:	60ba      	str	r2, [r7, #8]
 8000a86:	b2ca      	uxtb	r2, r1
 8000a88:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	617b      	str	r3, [r7, #20]
 8000a90:	697a      	ldr	r2, [r7, #20]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	dbf0      	blt.n	8000a7a <_read+0x12>
	}

return len;
 8000a98:	687b      	ldr	r3, [r7, #4]
}
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	b006      	add	sp, #24
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b086      	sub	sp, #24
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	60f8      	str	r0, [r7, #12]
 8000aaa:	60b9      	str	r1, [r7, #8]
 8000aac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aae:	2300      	movs	r3, #0
 8000ab0:	617b      	str	r3, [r7, #20]
 8000ab2:	e009      	b.n	8000ac8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	1c5a      	adds	r2, r3, #1
 8000ab8:	60ba      	str	r2, [r7, #8]
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	0018      	movs	r0, r3
 8000abe:	e000      	b.n	8000ac2 <_write+0x20>
 8000ac0:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	617b      	str	r3, [r7, #20]
 8000ac8:	697a      	ldr	r2, [r7, #20]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	dbf1      	blt.n	8000ab4 <_write+0x12>
	}
	return len;
 8000ad0:	687b      	ldr	r3, [r7, #4]
}
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	b006      	add	sp, #24
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <_close>:

int _close(int file)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b082      	sub	sp, #8
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
	return -1;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	425b      	negs	r3, r3
}
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	b002      	add	sp, #8
 8000aec:	bd80      	pop	{r7, pc}

08000aee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b082      	sub	sp, #8
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
 8000af6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	2280      	movs	r2, #128	; 0x80
 8000afc:	0192      	lsls	r2, r2, #6
 8000afe:	605a      	str	r2, [r3, #4]
	return 0;
 8000b00:	2300      	movs	r3, #0
}
 8000b02:	0018      	movs	r0, r3
 8000b04:	46bd      	mov	sp, r7
 8000b06:	b002      	add	sp, #8
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <_isatty>:

int _isatty(int file)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b082      	sub	sp, #8
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
	return 1;
 8000b12:	2301      	movs	r3, #1
}
 8000b14:	0018      	movs	r0, r3
 8000b16:	46bd      	mov	sp, r7
 8000b18:	b002      	add	sp, #8
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	60b9      	str	r1, [r7, #8]
 8000b26:	607a      	str	r2, [r7, #4]
	return 0;
 8000b28:	2300      	movs	r3, #0
}
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	b004      	add	sp, #16
 8000b30:	bd80      	pop	{r7, pc}
	...

08000b34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b3c:	4a14      	ldr	r2, [pc, #80]	; (8000b90 <_sbrk+0x5c>)
 8000b3e:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <_sbrk+0x60>)
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b48:	4b13      	ldr	r3, [pc, #76]	; (8000b98 <_sbrk+0x64>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d102      	bne.n	8000b56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b50:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <_sbrk+0x64>)
 8000b52:	4a12      	ldr	r2, [pc, #72]	; (8000b9c <_sbrk+0x68>)
 8000b54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b56:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <_sbrk+0x64>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	18d3      	adds	r3, r2, r3
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d207      	bcs.n	8000b74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b64:	f002 fe16 	bl	8003794 <__errno>
 8000b68:	0003      	movs	r3, r0
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	425b      	negs	r3, r3
 8000b72:	e009      	b.n	8000b88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b74:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <_sbrk+0x64>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b7a:	4b07      	ldr	r3, [pc, #28]	; (8000b98 <_sbrk+0x64>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	18d2      	adds	r2, r2, r3
 8000b82:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <_sbrk+0x64>)
 8000b84:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000b86:	68fb      	ldr	r3, [r7, #12]
}
 8000b88:	0018      	movs	r0, r3
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	b006      	add	sp, #24
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20002000 	.word	0x20002000
 8000b94:	00000400 	.word	0x00000400
 8000b98:	200001b8 	.word	0x200001b8
 8000b9c:	200001d0 	.word	0x200001d0

08000ba0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000ba4:	46c0      	nop			; (mov r8, r8)
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
	...

08000bac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bac:	480d      	ldr	r0, [pc, #52]	; (8000be4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bae:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb0:	480d      	ldr	r0, [pc, #52]	; (8000be8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bb2:	490e      	ldr	r1, [pc, #56]	; (8000bec <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bb4:	4a0e      	ldr	r2, [pc, #56]	; (8000bf0 <LoopForever+0xe>)
  movs r3, #0
 8000bb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb8:	e002      	b.n	8000bc0 <LoopCopyDataInit>

08000bba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bbe:	3304      	adds	r3, #4

08000bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc4:	d3f9      	bcc.n	8000bba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bc6:	4a0b      	ldr	r2, [pc, #44]	; (8000bf4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bc8:	4c0b      	ldr	r4, [pc, #44]	; (8000bf8 <LoopForever+0x16>)
  movs r3, #0
 8000bca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bcc:	e001      	b.n	8000bd2 <LoopFillZerobss>

08000bce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd0:	3204      	adds	r2, #4

08000bd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd4:	d3fb      	bcc.n	8000bce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000bd6:	f7ff ffe3 	bl	8000ba0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000bda:	f002 fde1 	bl	80037a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bde:	f7ff fb49 	bl	8000274 <main>

08000be2 <LoopForever>:

LoopForever:
    b LoopForever
 8000be2:	e7fe      	b.n	8000be2 <LoopForever>
  ldr   r0, =_estack
 8000be4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000be8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bec:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000bf0:	08004ca0 	.word	0x08004ca0
  ldr r2, =_sbss
 8000bf4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000bf8:	200001d0 	.word	0x200001d0

08000bfc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bfc:	e7fe      	b.n	8000bfc <ADC1_COMP_IRQHandler>
	...

08000c00 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c04:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <HAL_Init+0x24>)
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <HAL_Init+0x24>)
 8000c0a:	2110      	movs	r1, #16
 8000c0c:	430a      	orrs	r2, r1
 8000c0e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000c10:	2000      	movs	r0, #0
 8000c12:	f000 f809 	bl	8000c28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c16:	f7ff fe07 	bl	8000828 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c1a:	2300      	movs	r3, #0
}
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	46c0      	nop			; (mov r8, r8)
 8000c24:	40022000 	.word	0x40022000

08000c28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c28:	b590      	push	{r4, r7, lr}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c30:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <HAL_InitTick+0x5c>)
 8000c32:	681c      	ldr	r4, [r3, #0]
 8000c34:	4b14      	ldr	r3, [pc, #80]	; (8000c88 <HAL_InitTick+0x60>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	0019      	movs	r1, r3
 8000c3a:	23fa      	movs	r3, #250	; 0xfa
 8000c3c:	0098      	lsls	r0, r3, #2
 8000c3e:	f7ff fa6d 	bl	800011c <__udivsi3>
 8000c42:	0003      	movs	r3, r0
 8000c44:	0019      	movs	r1, r3
 8000c46:	0020      	movs	r0, r4
 8000c48:	f7ff fa68 	bl	800011c <__udivsi3>
 8000c4c:	0003      	movs	r3, r0
 8000c4e:	0018      	movs	r0, r3
 8000c50:	f000 f92f 	bl	8000eb2 <HAL_SYSTICK_Config>
 8000c54:	1e03      	subs	r3, r0, #0
 8000c56:	d001      	beq.n	8000c5c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	e00f      	b.n	8000c7c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2b03      	cmp	r3, #3
 8000c60:	d80b      	bhi.n	8000c7a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c62:	6879      	ldr	r1, [r7, #4]
 8000c64:	2301      	movs	r3, #1
 8000c66:	425b      	negs	r3, r3
 8000c68:	2200      	movs	r2, #0
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	f000 f8fc 	bl	8000e68 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <HAL_InitTick+0x64>)
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000c76:	2300      	movs	r3, #0
 8000c78:	e000      	b.n	8000c7c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
}
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	b003      	add	sp, #12
 8000c82:	bd90      	pop	{r4, r7, pc}
 8000c84:	20000000 	.word	0x20000000
 8000c88:	20000008 	.word	0x20000008
 8000c8c:	20000004 	.word	0x20000004

08000c90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c94:	4b05      	ldr	r3, [pc, #20]	; (8000cac <HAL_IncTick+0x1c>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	001a      	movs	r2, r3
 8000c9a:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <HAL_IncTick+0x20>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	18d2      	adds	r2, r2, r3
 8000ca0:	4b03      	ldr	r3, [pc, #12]	; (8000cb0 <HAL_IncTick+0x20>)
 8000ca2:	601a      	str	r2, [r3, #0]
}
 8000ca4:	46c0      	nop			; (mov r8, r8)
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	20000008 	.word	0x20000008
 8000cb0:	200001bc 	.word	0x200001bc

08000cb4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb8:	4b02      	ldr	r3, [pc, #8]	; (8000cc4 <HAL_GetTick+0x10>)
 8000cba:	681b      	ldr	r3, [r3, #0]
}
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	200001bc 	.word	0x200001bc

08000cc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cd0:	f7ff fff0 	bl	8000cb4 <HAL_GetTick>
 8000cd4:	0003      	movs	r3, r0
 8000cd6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	d005      	beq.n	8000cee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ce2:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <HAL_Delay+0x44>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	001a      	movs	r2, r3
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	189b      	adds	r3, r3, r2
 8000cec:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	f7ff ffe0 	bl	8000cb4 <HAL_GetTick>
 8000cf4:	0002      	movs	r2, r0
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	68fa      	ldr	r2, [r7, #12]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d8f7      	bhi.n	8000cf0 <HAL_Delay+0x28>
  {
  }
}
 8000d00:	46c0      	nop			; (mov r8, r8)
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	46bd      	mov	sp, r7
 8000d06:	b004      	add	sp, #16
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	46c0      	nop			; (mov r8, r8)
 8000d0c:	20000008 	.word	0x20000008

08000d10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	0002      	movs	r2, r0
 8000d18:	1dfb      	adds	r3, r7, #7
 8000d1a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d1c:	1dfb      	adds	r3, r7, #7
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	2b7f      	cmp	r3, #127	; 0x7f
 8000d22:	d809      	bhi.n	8000d38 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d24:	1dfb      	adds	r3, r7, #7
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	001a      	movs	r2, r3
 8000d2a:	231f      	movs	r3, #31
 8000d2c:	401a      	ands	r2, r3
 8000d2e:	4b04      	ldr	r3, [pc, #16]	; (8000d40 <__NVIC_EnableIRQ+0x30>)
 8000d30:	2101      	movs	r1, #1
 8000d32:	4091      	lsls	r1, r2
 8000d34:	000a      	movs	r2, r1
 8000d36:	601a      	str	r2, [r3, #0]
  }
}
 8000d38:	46c0      	nop			; (mov r8, r8)
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	b002      	add	sp, #8
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	e000e100 	.word	0xe000e100

08000d44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d44:	b590      	push	{r4, r7, lr}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	0002      	movs	r2, r0
 8000d4c:	6039      	str	r1, [r7, #0]
 8000d4e:	1dfb      	adds	r3, r7, #7
 8000d50:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d52:	1dfb      	adds	r3, r7, #7
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	2b7f      	cmp	r3, #127	; 0x7f
 8000d58:	d828      	bhi.n	8000dac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d5a:	4a2f      	ldr	r2, [pc, #188]	; (8000e18 <__NVIC_SetPriority+0xd4>)
 8000d5c:	1dfb      	adds	r3, r7, #7
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	b25b      	sxtb	r3, r3
 8000d62:	089b      	lsrs	r3, r3, #2
 8000d64:	33c0      	adds	r3, #192	; 0xc0
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	589b      	ldr	r3, [r3, r2]
 8000d6a:	1dfa      	adds	r2, r7, #7
 8000d6c:	7812      	ldrb	r2, [r2, #0]
 8000d6e:	0011      	movs	r1, r2
 8000d70:	2203      	movs	r2, #3
 8000d72:	400a      	ands	r2, r1
 8000d74:	00d2      	lsls	r2, r2, #3
 8000d76:	21ff      	movs	r1, #255	; 0xff
 8000d78:	4091      	lsls	r1, r2
 8000d7a:	000a      	movs	r2, r1
 8000d7c:	43d2      	mvns	r2, r2
 8000d7e:	401a      	ands	r2, r3
 8000d80:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	019b      	lsls	r3, r3, #6
 8000d86:	22ff      	movs	r2, #255	; 0xff
 8000d88:	401a      	ands	r2, r3
 8000d8a:	1dfb      	adds	r3, r7, #7
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	0018      	movs	r0, r3
 8000d90:	2303      	movs	r3, #3
 8000d92:	4003      	ands	r3, r0
 8000d94:	00db      	lsls	r3, r3, #3
 8000d96:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d98:	481f      	ldr	r0, [pc, #124]	; (8000e18 <__NVIC_SetPriority+0xd4>)
 8000d9a:	1dfb      	adds	r3, r7, #7
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	b25b      	sxtb	r3, r3
 8000da0:	089b      	lsrs	r3, r3, #2
 8000da2:	430a      	orrs	r2, r1
 8000da4:	33c0      	adds	r3, #192	; 0xc0
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000daa:	e031      	b.n	8000e10 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dac:	4a1b      	ldr	r2, [pc, #108]	; (8000e1c <__NVIC_SetPriority+0xd8>)
 8000dae:	1dfb      	adds	r3, r7, #7
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	0019      	movs	r1, r3
 8000db4:	230f      	movs	r3, #15
 8000db6:	400b      	ands	r3, r1
 8000db8:	3b08      	subs	r3, #8
 8000dba:	089b      	lsrs	r3, r3, #2
 8000dbc:	3306      	adds	r3, #6
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	18d3      	adds	r3, r2, r3
 8000dc2:	3304      	adds	r3, #4
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	1dfa      	adds	r2, r7, #7
 8000dc8:	7812      	ldrb	r2, [r2, #0]
 8000dca:	0011      	movs	r1, r2
 8000dcc:	2203      	movs	r2, #3
 8000dce:	400a      	ands	r2, r1
 8000dd0:	00d2      	lsls	r2, r2, #3
 8000dd2:	21ff      	movs	r1, #255	; 0xff
 8000dd4:	4091      	lsls	r1, r2
 8000dd6:	000a      	movs	r2, r1
 8000dd8:	43d2      	mvns	r2, r2
 8000dda:	401a      	ands	r2, r3
 8000ddc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	019b      	lsls	r3, r3, #6
 8000de2:	22ff      	movs	r2, #255	; 0xff
 8000de4:	401a      	ands	r2, r3
 8000de6:	1dfb      	adds	r3, r7, #7
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	0018      	movs	r0, r3
 8000dec:	2303      	movs	r3, #3
 8000dee:	4003      	ands	r3, r0
 8000df0:	00db      	lsls	r3, r3, #3
 8000df2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000df4:	4809      	ldr	r0, [pc, #36]	; (8000e1c <__NVIC_SetPriority+0xd8>)
 8000df6:	1dfb      	adds	r3, r7, #7
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	001c      	movs	r4, r3
 8000dfc:	230f      	movs	r3, #15
 8000dfe:	4023      	ands	r3, r4
 8000e00:	3b08      	subs	r3, #8
 8000e02:	089b      	lsrs	r3, r3, #2
 8000e04:	430a      	orrs	r2, r1
 8000e06:	3306      	adds	r3, #6
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	18c3      	adds	r3, r0, r3
 8000e0c:	3304      	adds	r3, #4
 8000e0e:	601a      	str	r2, [r3, #0]
}
 8000e10:	46c0      	nop			; (mov r8, r8)
 8000e12:	46bd      	mov	sp, r7
 8000e14:	b003      	add	sp, #12
 8000e16:	bd90      	pop	{r4, r7, pc}
 8000e18:	e000e100 	.word	0xe000e100
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	1e5a      	subs	r2, r3, #1
 8000e2c:	2380      	movs	r3, #128	; 0x80
 8000e2e:	045b      	lsls	r3, r3, #17
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d301      	bcc.n	8000e38 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e34:	2301      	movs	r3, #1
 8000e36:	e010      	b.n	8000e5a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e38:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <SysTick_Config+0x44>)
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	3a01      	subs	r2, #1
 8000e3e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e40:	2301      	movs	r3, #1
 8000e42:	425b      	negs	r3, r3
 8000e44:	2103      	movs	r1, #3
 8000e46:	0018      	movs	r0, r3
 8000e48:	f7ff ff7c 	bl	8000d44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e4c:	4b05      	ldr	r3, [pc, #20]	; (8000e64 <SysTick_Config+0x44>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e52:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <SysTick_Config+0x44>)
 8000e54:	2207      	movs	r2, #7
 8000e56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	b002      	add	sp, #8
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	e000e010 	.word	0xe000e010

08000e68 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60b9      	str	r1, [r7, #8]
 8000e70:	607a      	str	r2, [r7, #4]
 8000e72:	210f      	movs	r1, #15
 8000e74:	187b      	adds	r3, r7, r1
 8000e76:	1c02      	adds	r2, r0, #0
 8000e78:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000e7a:	68ba      	ldr	r2, [r7, #8]
 8000e7c:	187b      	adds	r3, r7, r1
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	b25b      	sxtb	r3, r3
 8000e82:	0011      	movs	r1, r2
 8000e84:	0018      	movs	r0, r3
 8000e86:	f7ff ff5d 	bl	8000d44 <__NVIC_SetPriority>
}
 8000e8a:	46c0      	nop			; (mov r8, r8)
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	b004      	add	sp, #16
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	0002      	movs	r2, r0
 8000e9a:	1dfb      	adds	r3, r7, #7
 8000e9c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e9e:	1dfb      	adds	r3, r7, #7
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	b25b      	sxtb	r3, r3
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	f7ff ff33 	bl	8000d10 <__NVIC_EnableIRQ>
}
 8000eaa:	46c0      	nop			; (mov r8, r8)
 8000eac:	46bd      	mov	sp, r7
 8000eae:	b002      	add	sp, #8
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b082      	sub	sp, #8
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	f7ff ffaf 	bl	8000e20 <SysTick_Config>
 8000ec2:	0003      	movs	r3, r0
}
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	b002      	add	sp, #8
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d101      	bne.n	8000ee2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e036      	b.n	8000f50 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2221      	movs	r2, #33	; 0x21
 8000ee6:	2102      	movs	r1, #2
 8000ee8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	4a18      	ldr	r2, [pc, #96]	; (8000f58 <HAL_DMA_Init+0x8c>)
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000f02:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	695b      	ldr	r3, [r3, #20]
 8000f14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	69db      	ldr	r3, [r3, #28]
 8000f20:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000f22:	68fa      	ldr	r2, [r7, #12]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	68fa      	ldr	r2, [r7, #12]
 8000f2e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	0018      	movs	r0, r3
 8000f34:	f000 f932 	bl	800119c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2221      	movs	r2, #33	; 0x21
 8000f42:	2101      	movs	r1, #1
 8000f44:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2220      	movs	r2, #32
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000f4e:	2300      	movs	r3, #0
}  
 8000f50:	0018      	movs	r0, r3
 8000f52:	46bd      	mov	sp, r7
 8000f54:	b004      	add	sp, #16
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	ffffc00f 	.word	0xffffc00f

08000f5c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2221      	movs	r2, #33	; 0x21
 8000f68:	5c9b      	ldrb	r3, [r3, r2]
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	d008      	beq.n	8000f82 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2204      	movs	r2, #4
 8000f74:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2220      	movs	r2, #32
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e020      	b.n	8000fc4 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	210e      	movs	r1, #14
 8000f8e:	438a      	bics	r2, r1
 8000f90:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2101      	movs	r1, #1
 8000f9e:	438a      	bics	r2, r1
 8000fa0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000faa:	2101      	movs	r1, #1
 8000fac:	4091      	lsls	r1, r2
 8000fae:	000a      	movs	r2, r1
 8000fb0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2221      	movs	r2, #33	; 0x21
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2220      	movs	r2, #32
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000fc2:	2300      	movs	r3, #0
}
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	b002      	add	sp, #8
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fd4:	210f      	movs	r1, #15
 8000fd6:	187b      	adds	r3, r7, r1
 8000fd8:	2200      	movs	r2, #0
 8000fda:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2221      	movs	r2, #33	; 0x21
 8000fe0:	5c9b      	ldrb	r3, [r3, r2]
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d006      	beq.n	8000ff6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2204      	movs	r2, #4
 8000fec:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000fee:	187b      	adds	r3, r7, r1
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	701a      	strb	r2, [r3, #0]
 8000ff4:	e028      	b.n	8001048 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	210e      	movs	r1, #14
 8001002:	438a      	bics	r2, r1
 8001004:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2101      	movs	r1, #1
 8001012:	438a      	bics	r2, r1
 8001014:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800101e:	2101      	movs	r1, #1
 8001020:	4091      	lsls	r1, r2
 8001022:	000a      	movs	r2, r1
 8001024:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2221      	movs	r2, #33	; 0x21
 800102a:	2101      	movs	r1, #1
 800102c:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2220      	movs	r2, #32
 8001032:	2100      	movs	r1, #0
 8001034:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800103a:	2b00      	cmp	r3, #0
 800103c:	d004      	beq.n	8001048 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	0010      	movs	r0, r2
 8001046:	4798      	blx	r3
    } 
  }
  return status;
 8001048:	230f      	movs	r3, #15
 800104a:	18fb      	adds	r3, r7, r3
 800104c:	781b      	ldrb	r3, [r3, #0]
}
 800104e:	0018      	movs	r0, r3
 8001050:	46bd      	mov	sp, r7
 8001052:	b004      	add	sp, #16
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b084      	sub	sp, #16
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001072:	2204      	movs	r2, #4
 8001074:	409a      	lsls	r2, r3
 8001076:	0013      	movs	r3, r2
 8001078:	68fa      	ldr	r2, [r7, #12]
 800107a:	4013      	ands	r3, r2
 800107c:	d024      	beq.n	80010c8 <HAL_DMA_IRQHandler+0x72>
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	2204      	movs	r2, #4
 8001082:	4013      	ands	r3, r2
 8001084:	d020      	beq.n	80010c8 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2220      	movs	r2, #32
 800108e:	4013      	ands	r3, r2
 8001090:	d107      	bne.n	80010a2 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2104      	movs	r1, #4
 800109e:	438a      	bics	r2, r1
 80010a0:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010aa:	2104      	movs	r1, #4
 80010ac:	4091      	lsls	r1, r2
 80010ae:	000a      	movs	r2, r1
 80010b0:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d100      	bne.n	80010bc <HAL_DMA_IRQHandler+0x66>
 80010ba:	e06a      	b.n	8001192 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	0010      	movs	r0, r2
 80010c4:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80010c6:	e064      	b.n	8001192 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010cc:	2202      	movs	r2, #2
 80010ce:	409a      	lsls	r2, r3
 80010d0:	0013      	movs	r3, r2
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	4013      	ands	r3, r2
 80010d6:	d02b      	beq.n	8001130 <HAL_DMA_IRQHandler+0xda>
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	2202      	movs	r2, #2
 80010dc:	4013      	ands	r3, r2
 80010de:	d027      	beq.n	8001130 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2220      	movs	r2, #32
 80010e8:	4013      	ands	r3, r2
 80010ea:	d10b      	bne.n	8001104 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	210a      	movs	r1, #10
 80010f8:	438a      	bics	r2, r1
 80010fa:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2221      	movs	r2, #33	; 0x21
 8001100:	2101      	movs	r1, #1
 8001102:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800110c:	2102      	movs	r1, #2
 800110e:	4091      	lsls	r1, r2
 8001110:	000a      	movs	r2, r1
 8001112:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2220      	movs	r2, #32
 8001118:	2100      	movs	r1, #0
 800111a:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001120:	2b00      	cmp	r3, #0
 8001122:	d036      	beq.n	8001192 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	0010      	movs	r0, r2
 800112c:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800112e:	e030      	b.n	8001192 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001134:	2208      	movs	r2, #8
 8001136:	409a      	lsls	r2, r3
 8001138:	0013      	movs	r3, r2
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	4013      	ands	r3, r2
 800113e:	d028      	beq.n	8001192 <HAL_DMA_IRQHandler+0x13c>
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	2208      	movs	r2, #8
 8001144:	4013      	ands	r3, r2
 8001146:	d024      	beq.n	8001192 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	210e      	movs	r1, #14
 8001154:	438a      	bics	r2, r1
 8001156:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001160:	2101      	movs	r1, #1
 8001162:	4091      	lsls	r1, r2
 8001164:	000a      	movs	r2, r1
 8001166:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2201      	movs	r2, #1
 800116c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2221      	movs	r2, #33	; 0x21
 8001172:	2101      	movs	r1, #1
 8001174:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2220      	movs	r2, #32
 800117a:	2100      	movs	r1, #0
 800117c:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	2b00      	cmp	r3, #0
 8001184:	d005      	beq.n	8001192 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	0010      	movs	r0, r2
 800118e:	4798      	blx	r3
    }
   }
}  
 8001190:	e7ff      	b.n	8001192 <HAL_DMA_IRQHandler+0x13c>
 8001192:	46c0      	nop			; (mov r8, r8)
 8001194:	46bd      	mov	sp, r7
 8001196:	b004      	add	sp, #16
 8001198:	bd80      	pop	{r7, pc}
	...

0800119c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a08      	ldr	r2, [pc, #32]	; (80011cc <DMA_CalcBaseAndBitshift+0x30>)
 80011aa:	4694      	mov	ip, r2
 80011ac:	4463      	add	r3, ip
 80011ae:	2114      	movs	r1, #20
 80011b0:	0018      	movs	r0, r3
 80011b2:	f7fe ffb3 	bl	800011c <__udivsi3>
 80011b6:	0003      	movs	r3, r0
 80011b8:	009a      	lsls	r2, r3, #2
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a03      	ldr	r2, [pc, #12]	; (80011d0 <DMA_CalcBaseAndBitshift+0x34>)
 80011c2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80011c4:	46c0      	nop			; (mov r8, r8)
 80011c6:	46bd      	mov	sp, r7
 80011c8:	b002      	add	sp, #8
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	bffdfff8 	.word	0xbffdfff8
 80011d0:	40020000 	.word	0x40020000

080011d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011de:	2300      	movs	r3, #0
 80011e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011e2:	e14f      	b.n	8001484 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2101      	movs	r1, #1
 80011ea:	697a      	ldr	r2, [r7, #20]
 80011ec:	4091      	lsls	r1, r2
 80011ee:	000a      	movs	r2, r1
 80011f0:	4013      	ands	r3, r2
 80011f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d100      	bne.n	80011fc <HAL_GPIO_Init+0x28>
 80011fa:	e140      	b.n	800147e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	2203      	movs	r2, #3
 8001202:	4013      	ands	r3, r2
 8001204:	2b01      	cmp	r3, #1
 8001206:	d005      	beq.n	8001214 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	2203      	movs	r2, #3
 800120e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001210:	2b02      	cmp	r3, #2
 8001212:	d130      	bne.n	8001276 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	2203      	movs	r2, #3
 8001220:	409a      	lsls	r2, r3
 8001222:	0013      	movs	r3, r2
 8001224:	43da      	mvns	r2, r3
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	4013      	ands	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	68da      	ldr	r2, [r3, #12]
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	409a      	lsls	r2, r3
 8001236:	0013      	movs	r3, r2
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	4313      	orrs	r3, r2
 800123c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800124a:	2201      	movs	r2, #1
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	409a      	lsls	r2, r3
 8001250:	0013      	movs	r3, r2
 8001252:	43da      	mvns	r2, r3
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	4013      	ands	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	091b      	lsrs	r3, r3, #4
 8001260:	2201      	movs	r2, #1
 8001262:	401a      	ands	r2, r3
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	409a      	lsls	r2, r3
 8001268:	0013      	movs	r3, r2
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	4313      	orrs	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	2203      	movs	r2, #3
 800127c:	4013      	ands	r3, r2
 800127e:	2b03      	cmp	r3, #3
 8001280:	d017      	beq.n	80012b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	2203      	movs	r2, #3
 800128e:	409a      	lsls	r2, r3
 8001290:	0013      	movs	r3, r2
 8001292:	43da      	mvns	r2, r3
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	4013      	ands	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	689a      	ldr	r2, [r3, #8]
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	409a      	lsls	r2, r3
 80012a4:	0013      	movs	r3, r2
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	2203      	movs	r2, #3
 80012b8:	4013      	ands	r3, r2
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d123      	bne.n	8001306 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	08da      	lsrs	r2, r3, #3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	3208      	adds	r2, #8
 80012c6:	0092      	lsls	r2, r2, #2
 80012c8:	58d3      	ldr	r3, [r2, r3]
 80012ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	2207      	movs	r2, #7
 80012d0:	4013      	ands	r3, r2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	220f      	movs	r2, #15
 80012d6:	409a      	lsls	r2, r3
 80012d8:	0013      	movs	r3, r2
 80012da:	43da      	mvns	r2, r3
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	4013      	ands	r3, r2
 80012e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	691a      	ldr	r2, [r3, #16]
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	2107      	movs	r1, #7
 80012ea:	400b      	ands	r3, r1
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	409a      	lsls	r2, r3
 80012f0:	0013      	movs	r3, r2
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	08da      	lsrs	r2, r3, #3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3208      	adds	r2, #8
 8001300:	0092      	lsls	r2, r2, #2
 8001302:	6939      	ldr	r1, [r7, #16]
 8001304:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	2203      	movs	r2, #3
 8001312:	409a      	lsls	r2, r3
 8001314:	0013      	movs	r3, r2
 8001316:	43da      	mvns	r2, r3
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	4013      	ands	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	2203      	movs	r2, #3
 8001324:	401a      	ands	r2, r3
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	409a      	lsls	r2, r3
 800132c:	0013      	movs	r3, r2
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4313      	orrs	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685a      	ldr	r2, [r3, #4]
 800133e:	23c0      	movs	r3, #192	; 0xc0
 8001340:	029b      	lsls	r3, r3, #10
 8001342:	4013      	ands	r3, r2
 8001344:	d100      	bne.n	8001348 <HAL_GPIO_Init+0x174>
 8001346:	e09a      	b.n	800147e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001348:	4b54      	ldr	r3, [pc, #336]	; (800149c <HAL_GPIO_Init+0x2c8>)
 800134a:	699a      	ldr	r2, [r3, #24]
 800134c:	4b53      	ldr	r3, [pc, #332]	; (800149c <HAL_GPIO_Init+0x2c8>)
 800134e:	2101      	movs	r1, #1
 8001350:	430a      	orrs	r2, r1
 8001352:	619a      	str	r2, [r3, #24]
 8001354:	4b51      	ldr	r3, [pc, #324]	; (800149c <HAL_GPIO_Init+0x2c8>)
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	2201      	movs	r2, #1
 800135a:	4013      	ands	r3, r2
 800135c:	60bb      	str	r3, [r7, #8]
 800135e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001360:	4a4f      	ldr	r2, [pc, #316]	; (80014a0 <HAL_GPIO_Init+0x2cc>)
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	089b      	lsrs	r3, r3, #2
 8001366:	3302      	adds	r3, #2
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	589b      	ldr	r3, [r3, r2]
 800136c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	2203      	movs	r2, #3
 8001372:	4013      	ands	r3, r2
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	220f      	movs	r2, #15
 8001378:	409a      	lsls	r2, r3
 800137a:	0013      	movs	r3, r2
 800137c:	43da      	mvns	r2, r3
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	4013      	ands	r3, r2
 8001382:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	2390      	movs	r3, #144	; 0x90
 8001388:	05db      	lsls	r3, r3, #23
 800138a:	429a      	cmp	r2, r3
 800138c:	d013      	beq.n	80013b6 <HAL_GPIO_Init+0x1e2>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a44      	ldr	r2, [pc, #272]	; (80014a4 <HAL_GPIO_Init+0x2d0>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d00d      	beq.n	80013b2 <HAL_GPIO_Init+0x1de>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a43      	ldr	r2, [pc, #268]	; (80014a8 <HAL_GPIO_Init+0x2d4>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d007      	beq.n	80013ae <HAL_GPIO_Init+0x1da>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a42      	ldr	r2, [pc, #264]	; (80014ac <HAL_GPIO_Init+0x2d8>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d101      	bne.n	80013aa <HAL_GPIO_Init+0x1d6>
 80013a6:	2303      	movs	r3, #3
 80013a8:	e006      	b.n	80013b8 <HAL_GPIO_Init+0x1e4>
 80013aa:	2305      	movs	r3, #5
 80013ac:	e004      	b.n	80013b8 <HAL_GPIO_Init+0x1e4>
 80013ae:	2302      	movs	r3, #2
 80013b0:	e002      	b.n	80013b8 <HAL_GPIO_Init+0x1e4>
 80013b2:	2301      	movs	r3, #1
 80013b4:	e000      	b.n	80013b8 <HAL_GPIO_Init+0x1e4>
 80013b6:	2300      	movs	r3, #0
 80013b8:	697a      	ldr	r2, [r7, #20]
 80013ba:	2103      	movs	r1, #3
 80013bc:	400a      	ands	r2, r1
 80013be:	0092      	lsls	r2, r2, #2
 80013c0:	4093      	lsls	r3, r2
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013c8:	4935      	ldr	r1, [pc, #212]	; (80014a0 <HAL_GPIO_Init+0x2cc>)
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	089b      	lsrs	r3, r3, #2
 80013ce:	3302      	adds	r3, #2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013d6:	4b36      	ldr	r3, [pc, #216]	; (80014b0 <HAL_GPIO_Init+0x2dc>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	43da      	mvns	r2, r3
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	4013      	ands	r3, r2
 80013e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685a      	ldr	r2, [r3, #4]
 80013ea:	2380      	movs	r3, #128	; 0x80
 80013ec:	025b      	lsls	r3, r3, #9
 80013ee:	4013      	ands	r3, r2
 80013f0:	d003      	beq.n	80013fa <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80013fa:	4b2d      	ldr	r3, [pc, #180]	; (80014b0 <HAL_GPIO_Init+0x2dc>)
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001400:	4b2b      	ldr	r3, [pc, #172]	; (80014b0 <HAL_GPIO_Init+0x2dc>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	43da      	mvns	r2, r3
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	4013      	ands	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685a      	ldr	r2, [r3, #4]
 8001414:	2380      	movs	r3, #128	; 0x80
 8001416:	029b      	lsls	r3, r3, #10
 8001418:	4013      	ands	r3, r2
 800141a:	d003      	beq.n	8001424 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	4313      	orrs	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001424:	4b22      	ldr	r3, [pc, #136]	; (80014b0 <HAL_GPIO_Init+0x2dc>)
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800142a:	4b21      	ldr	r3, [pc, #132]	; (80014b0 <HAL_GPIO_Init+0x2dc>)
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	43da      	mvns	r2, r3
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	4013      	ands	r3, r2
 8001438:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685a      	ldr	r2, [r3, #4]
 800143e:	2380      	movs	r3, #128	; 0x80
 8001440:	035b      	lsls	r3, r3, #13
 8001442:	4013      	ands	r3, r2
 8001444:	d003      	beq.n	800144e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	4313      	orrs	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800144e:	4b18      	ldr	r3, [pc, #96]	; (80014b0 <HAL_GPIO_Init+0x2dc>)
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001454:	4b16      	ldr	r3, [pc, #88]	; (80014b0 <HAL_GPIO_Init+0x2dc>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	43da      	mvns	r2, r3
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	4013      	ands	r3, r2
 8001462:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685a      	ldr	r2, [r3, #4]
 8001468:	2380      	movs	r3, #128	; 0x80
 800146a:	039b      	lsls	r3, r3, #14
 800146c:	4013      	ands	r3, r2
 800146e:	d003      	beq.n	8001478 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	4313      	orrs	r3, r2
 8001476:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001478:	4b0d      	ldr	r3, [pc, #52]	; (80014b0 <HAL_GPIO_Init+0x2dc>)
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	3301      	adds	r3, #1
 8001482:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	40da      	lsrs	r2, r3
 800148c:	1e13      	subs	r3, r2, #0
 800148e:	d000      	beq.n	8001492 <HAL_GPIO_Init+0x2be>
 8001490:	e6a8      	b.n	80011e4 <HAL_GPIO_Init+0x10>
  } 
}
 8001492:	46c0      	nop			; (mov r8, r8)
 8001494:	46c0      	nop			; (mov r8, r8)
 8001496:	46bd      	mov	sp, r7
 8001498:	b006      	add	sp, #24
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40021000 	.word	0x40021000
 80014a0:	40010000 	.word	0x40010000
 80014a4:	48000400 	.word	0x48000400
 80014a8:	48000800 	.word	0x48000800
 80014ac:	48000c00 	.word	0x48000c00
 80014b0:	40010400 	.word	0x40010400

080014b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	0008      	movs	r0, r1
 80014be:	0011      	movs	r1, r2
 80014c0:	1cbb      	adds	r3, r7, #2
 80014c2:	1c02      	adds	r2, r0, #0
 80014c4:	801a      	strh	r2, [r3, #0]
 80014c6:	1c7b      	adds	r3, r7, #1
 80014c8:	1c0a      	adds	r2, r1, #0
 80014ca:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014cc:	1c7b      	adds	r3, r7, #1
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d004      	beq.n	80014de <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014d4:	1cbb      	adds	r3, r7, #2
 80014d6:	881a      	ldrh	r2, [r3, #0]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014dc:	e003      	b.n	80014e6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014de:	1cbb      	adds	r3, r7, #2
 80014e0:	881a      	ldrh	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014e6:	46c0      	nop			; (mov r8, r8)
 80014e8:	46bd      	mov	sp, r7
 80014ea:	b002      	add	sp, #8
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b084      	sub	sp, #16
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
 80014f6:	000a      	movs	r2, r1
 80014f8:	1cbb      	adds	r3, r7, #2
 80014fa:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	695b      	ldr	r3, [r3, #20]
 8001500:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001502:	1cbb      	adds	r3, r7, #2
 8001504:	881b      	ldrh	r3, [r3, #0]
 8001506:	68fa      	ldr	r2, [r7, #12]
 8001508:	4013      	ands	r3, r2
 800150a:	041a      	lsls	r2, r3, #16
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	43db      	mvns	r3, r3
 8001510:	1cb9      	adds	r1, r7, #2
 8001512:	8809      	ldrh	r1, [r1, #0]
 8001514:	400b      	ands	r3, r1
 8001516:	431a      	orrs	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	619a      	str	r2, [r3, #24]
}
 800151c:	46c0      	nop			; (mov r8, r8)
 800151e:	46bd      	mov	sp, r7
 8001520:	b004      	add	sp, #16
 8001522:	bd80      	pop	{r7, pc}

08001524 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d101      	bne.n	8001536 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e082      	b.n	800163c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2241      	movs	r2, #65	; 0x41
 800153a:	5c9b      	ldrb	r3, [r3, r2]
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2b00      	cmp	r3, #0
 8001540:	d107      	bne.n	8001552 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2240      	movs	r2, #64	; 0x40
 8001546:	2100      	movs	r1, #0
 8001548:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	0018      	movs	r0, r3
 800154e:	f7ff f98f 	bl	8000870 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2241      	movs	r2, #65	; 0x41
 8001556:	2124      	movs	r1, #36	; 0x24
 8001558:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2101      	movs	r1, #1
 8001566:	438a      	bics	r2, r1
 8001568:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685a      	ldr	r2, [r3, #4]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4934      	ldr	r1, [pc, #208]	; (8001644 <HAL_I2C_Init+0x120>)
 8001574:	400a      	ands	r2, r1
 8001576:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	689a      	ldr	r2, [r3, #8]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4931      	ldr	r1, [pc, #196]	; (8001648 <HAL_I2C_Init+0x124>)
 8001584:	400a      	ands	r2, r1
 8001586:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d108      	bne.n	80015a2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689a      	ldr	r2, [r3, #8]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2180      	movs	r1, #128	; 0x80
 800159a:	0209      	lsls	r1, r1, #8
 800159c:	430a      	orrs	r2, r1
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	e007      	b.n	80015b2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	689a      	ldr	r2, [r3, #8]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2184      	movs	r1, #132	; 0x84
 80015ac:	0209      	lsls	r1, r1, #8
 80015ae:	430a      	orrs	r2, r1
 80015b0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d104      	bne.n	80015c4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2280      	movs	r2, #128	; 0x80
 80015c0:	0112      	lsls	r2, r2, #4
 80015c2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	685a      	ldr	r2, [r3, #4]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	491f      	ldr	r1, [pc, #124]	; (800164c <HAL_I2C_Init+0x128>)
 80015d0:	430a      	orrs	r2, r1
 80015d2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	68da      	ldr	r2, [r3, #12]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	491a      	ldr	r1, [pc, #104]	; (8001648 <HAL_I2C_Init+0x124>)
 80015e0:	400a      	ands	r2, r1
 80015e2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	691a      	ldr	r2, [r3, #16]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	695b      	ldr	r3, [r3, #20]
 80015ec:	431a      	orrs	r2, r3
 80015ee:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	430a      	orrs	r2, r1
 80015fc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	69d9      	ldr	r1, [r3, #28]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a1a      	ldr	r2, [r3, #32]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	430a      	orrs	r2, r1
 800160c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2101      	movs	r1, #1
 800161a:	430a      	orrs	r2, r1
 800161c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2241      	movs	r2, #65	; 0x41
 8001628:	2120      	movs	r1, #32
 800162a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2242      	movs	r2, #66	; 0x42
 8001636:	2100      	movs	r1, #0
 8001638:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800163a:	2300      	movs	r3, #0
}
 800163c:	0018      	movs	r0, r3
 800163e:	46bd      	mov	sp, r7
 8001640:	b002      	add	sp, #8
 8001642:	bd80      	pop	{r7, pc}
 8001644:	f0ffffff 	.word	0xf0ffffff
 8001648:	ffff7fff 	.word	0xffff7fff
 800164c:	02008000 	.word	0x02008000

08001650 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001650:	b590      	push	{r4, r7, lr}
 8001652:	b089      	sub	sp, #36	; 0x24
 8001654:	af02      	add	r7, sp, #8
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	000c      	movs	r4, r1
 800165a:	0010      	movs	r0, r2
 800165c:	0019      	movs	r1, r3
 800165e:	230a      	movs	r3, #10
 8001660:	18fb      	adds	r3, r7, r3
 8001662:	1c22      	adds	r2, r4, #0
 8001664:	801a      	strh	r2, [r3, #0]
 8001666:	2308      	movs	r3, #8
 8001668:	18fb      	adds	r3, r7, r3
 800166a:	1c02      	adds	r2, r0, #0
 800166c:	801a      	strh	r2, [r3, #0]
 800166e:	1dbb      	adds	r3, r7, #6
 8001670:	1c0a      	adds	r2, r1, #0
 8001672:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2241      	movs	r2, #65	; 0x41
 8001678:	5c9b      	ldrb	r3, [r3, r2]
 800167a:	b2db      	uxtb	r3, r3
 800167c:	2b20      	cmp	r3, #32
 800167e:	d000      	beq.n	8001682 <HAL_I2C_Mem_Read+0x32>
 8001680:	e110      	b.n	80018a4 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8001682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001684:	2b00      	cmp	r3, #0
 8001686:	d004      	beq.n	8001692 <HAL_I2C_Mem_Read+0x42>
 8001688:	232c      	movs	r3, #44	; 0x2c
 800168a:	18fb      	adds	r3, r7, r3
 800168c:	881b      	ldrh	r3, [r3, #0]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d105      	bne.n	800169e <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2280      	movs	r2, #128	; 0x80
 8001696:	0092      	lsls	r2, r2, #2
 8001698:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e103      	b.n	80018a6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2240      	movs	r2, #64	; 0x40
 80016a2:	5c9b      	ldrb	r3, [r3, r2]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d101      	bne.n	80016ac <HAL_I2C_Mem_Read+0x5c>
 80016a8:	2302      	movs	r3, #2
 80016aa:	e0fc      	b.n	80018a6 <HAL_I2C_Mem_Read+0x256>
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2240      	movs	r2, #64	; 0x40
 80016b0:	2101      	movs	r1, #1
 80016b2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80016b4:	f7ff fafe 	bl	8000cb4 <HAL_GetTick>
 80016b8:	0003      	movs	r3, r0
 80016ba:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80016bc:	2380      	movs	r3, #128	; 0x80
 80016be:	0219      	lsls	r1, r3, #8
 80016c0:	68f8      	ldr	r0, [r7, #12]
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	9300      	str	r3, [sp, #0]
 80016c6:	2319      	movs	r3, #25
 80016c8:	2201      	movs	r2, #1
 80016ca:	f000 f979 	bl	80019c0 <I2C_WaitOnFlagUntilTimeout>
 80016ce:	1e03      	subs	r3, r0, #0
 80016d0:	d001      	beq.n	80016d6 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e0e7      	b.n	80018a6 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2241      	movs	r2, #65	; 0x41
 80016da:	2122      	movs	r1, #34	; 0x22
 80016dc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2242      	movs	r2, #66	; 0x42
 80016e2:	2140      	movs	r1, #64	; 0x40
 80016e4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2200      	movs	r2, #0
 80016ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	222c      	movs	r2, #44	; 0x2c
 80016f6:	18ba      	adds	r2, r7, r2
 80016f8:	8812      	ldrh	r2, [r2, #0]
 80016fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2200      	movs	r2, #0
 8001700:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001702:	1dbb      	adds	r3, r7, #6
 8001704:	881c      	ldrh	r4, [r3, #0]
 8001706:	2308      	movs	r3, #8
 8001708:	18fb      	adds	r3, r7, r3
 800170a:	881a      	ldrh	r2, [r3, #0]
 800170c:	230a      	movs	r3, #10
 800170e:	18fb      	adds	r3, r7, r3
 8001710:	8819      	ldrh	r1, [r3, #0]
 8001712:	68f8      	ldr	r0, [r7, #12]
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	9301      	str	r3, [sp, #4]
 8001718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	0023      	movs	r3, r4
 800171e:	f000 f8cb 	bl	80018b8 <I2C_RequestMemoryRead>
 8001722:	1e03      	subs	r3, r0, #0
 8001724:	d005      	beq.n	8001732 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2240      	movs	r2, #64	; 0x40
 800172a:	2100      	movs	r1, #0
 800172c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e0b9      	b.n	80018a6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001736:	b29b      	uxth	r3, r3
 8001738:	2bff      	cmp	r3, #255	; 0xff
 800173a:	d911      	bls.n	8001760 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	22ff      	movs	r2, #255	; 0xff
 8001740:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001746:	b2da      	uxtb	r2, r3
 8001748:	2380      	movs	r3, #128	; 0x80
 800174a:	045c      	lsls	r4, r3, #17
 800174c:	230a      	movs	r3, #10
 800174e:	18fb      	adds	r3, r7, r3
 8001750:	8819      	ldrh	r1, [r3, #0]
 8001752:	68f8      	ldr	r0, [r7, #12]
 8001754:	4b56      	ldr	r3, [pc, #344]	; (80018b0 <HAL_I2C_Mem_Read+0x260>)
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	0023      	movs	r3, r4
 800175a:	f000 fa65 	bl	8001c28 <I2C_TransferConfig>
 800175e:	e012      	b.n	8001786 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001764:	b29a      	uxth	r2, r3
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800176e:	b2da      	uxtb	r2, r3
 8001770:	2380      	movs	r3, #128	; 0x80
 8001772:	049c      	lsls	r4, r3, #18
 8001774:	230a      	movs	r3, #10
 8001776:	18fb      	adds	r3, r7, r3
 8001778:	8819      	ldrh	r1, [r3, #0]
 800177a:	68f8      	ldr	r0, [r7, #12]
 800177c:	4b4c      	ldr	r3, [pc, #304]	; (80018b0 <HAL_I2C_Mem_Read+0x260>)
 800177e:	9300      	str	r3, [sp, #0]
 8001780:	0023      	movs	r3, r4
 8001782:	f000 fa51 	bl	8001c28 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001786:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001788:	68f8      	ldr	r0, [r7, #12]
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	9300      	str	r3, [sp, #0]
 800178e:	0013      	movs	r3, r2
 8001790:	2200      	movs	r2, #0
 8001792:	2104      	movs	r1, #4
 8001794:	f000 f914 	bl	80019c0 <I2C_WaitOnFlagUntilTimeout>
 8001798:	1e03      	subs	r3, r0, #0
 800179a:	d001      	beq.n	80017a0 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e082      	b.n	80018a6 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017aa:	b2d2      	uxtb	r2, r2
 80017ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b2:	1c5a      	adds	r2, r3, #1
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017bc:	3b01      	subs	r3, #1
 80017be:	b29a      	uxth	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	3b01      	subs	r3, #1
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d03a      	beq.n	8001852 <HAL_I2C_Mem_Read+0x202>
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d136      	bne.n	8001852 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80017e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017e6:	68f8      	ldr	r0, [r7, #12]
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	9300      	str	r3, [sp, #0]
 80017ec:	0013      	movs	r3, r2
 80017ee:	2200      	movs	r2, #0
 80017f0:	2180      	movs	r1, #128	; 0x80
 80017f2:	f000 f8e5 	bl	80019c0 <I2C_WaitOnFlagUntilTimeout>
 80017f6:	1e03      	subs	r3, r0, #0
 80017f8:	d001      	beq.n	80017fe <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e053      	b.n	80018a6 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001802:	b29b      	uxth	r3, r3
 8001804:	2bff      	cmp	r3, #255	; 0xff
 8001806:	d911      	bls.n	800182c <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	22ff      	movs	r2, #255	; 0xff
 800180c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001812:	b2da      	uxtb	r2, r3
 8001814:	2380      	movs	r3, #128	; 0x80
 8001816:	045c      	lsls	r4, r3, #17
 8001818:	230a      	movs	r3, #10
 800181a:	18fb      	adds	r3, r7, r3
 800181c:	8819      	ldrh	r1, [r3, #0]
 800181e:	68f8      	ldr	r0, [r7, #12]
 8001820:	2300      	movs	r3, #0
 8001822:	9300      	str	r3, [sp, #0]
 8001824:	0023      	movs	r3, r4
 8001826:	f000 f9ff 	bl	8001c28 <I2C_TransferConfig>
 800182a:	e012      	b.n	8001852 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001830:	b29a      	uxth	r2, r3
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800183a:	b2da      	uxtb	r2, r3
 800183c:	2380      	movs	r3, #128	; 0x80
 800183e:	049c      	lsls	r4, r3, #18
 8001840:	230a      	movs	r3, #10
 8001842:	18fb      	adds	r3, r7, r3
 8001844:	8819      	ldrh	r1, [r3, #0]
 8001846:	68f8      	ldr	r0, [r7, #12]
 8001848:	2300      	movs	r3, #0
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	0023      	movs	r3, r4
 800184e:	f000 f9eb 	bl	8001c28 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001856:	b29b      	uxth	r3, r3
 8001858:	2b00      	cmp	r3, #0
 800185a:	d194      	bne.n	8001786 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800185c:	697a      	ldr	r2, [r7, #20]
 800185e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	0018      	movs	r0, r3
 8001864:	f000 f92a 	bl	8001abc <I2C_WaitOnSTOPFlagUntilTimeout>
 8001868:	1e03      	subs	r3, r0, #0
 800186a:	d001      	beq.n	8001870 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e01a      	b.n	80018a6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2220      	movs	r2, #32
 8001876:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	685a      	ldr	r2, [r3, #4]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	490c      	ldr	r1, [pc, #48]	; (80018b4 <HAL_I2C_Mem_Read+0x264>)
 8001884:	400a      	ands	r2, r1
 8001886:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2241      	movs	r2, #65	; 0x41
 800188c:	2120      	movs	r1, #32
 800188e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2242      	movs	r2, #66	; 0x42
 8001894:	2100      	movs	r1, #0
 8001896:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2240      	movs	r2, #64	; 0x40
 800189c:	2100      	movs	r1, #0
 800189e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80018a0:	2300      	movs	r3, #0
 80018a2:	e000      	b.n	80018a6 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80018a4:	2302      	movs	r3, #2
  }
}
 80018a6:	0018      	movs	r0, r3
 80018a8:	46bd      	mov	sp, r7
 80018aa:	b007      	add	sp, #28
 80018ac:	bd90      	pop	{r4, r7, pc}
 80018ae:	46c0      	nop			; (mov r8, r8)
 80018b0:	80002400 	.word	0x80002400
 80018b4:	fe00e800 	.word	0xfe00e800

080018b8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80018b8:	b5b0      	push	{r4, r5, r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af02      	add	r7, sp, #8
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	000c      	movs	r4, r1
 80018c2:	0010      	movs	r0, r2
 80018c4:	0019      	movs	r1, r3
 80018c6:	250a      	movs	r5, #10
 80018c8:	197b      	adds	r3, r7, r5
 80018ca:	1c22      	adds	r2, r4, #0
 80018cc:	801a      	strh	r2, [r3, #0]
 80018ce:	2308      	movs	r3, #8
 80018d0:	18fb      	adds	r3, r7, r3
 80018d2:	1c02      	adds	r2, r0, #0
 80018d4:	801a      	strh	r2, [r3, #0]
 80018d6:	1dbb      	adds	r3, r7, #6
 80018d8:	1c0a      	adds	r2, r1, #0
 80018da:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80018dc:	1dbb      	adds	r3, r7, #6
 80018de:	881b      	ldrh	r3, [r3, #0]
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	197b      	adds	r3, r7, r5
 80018e4:	8819      	ldrh	r1, [r3, #0]
 80018e6:	68f8      	ldr	r0, [r7, #12]
 80018e8:	4b23      	ldr	r3, [pc, #140]	; (8001978 <I2C_RequestMemoryRead+0xc0>)
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	2300      	movs	r3, #0
 80018ee:	f000 f99b 	bl	8001c28 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018f4:	6a39      	ldr	r1, [r7, #32]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	0018      	movs	r0, r3
 80018fa:	f000 f8a0 	bl	8001a3e <I2C_WaitOnTXISFlagUntilTimeout>
 80018fe:	1e03      	subs	r3, r0, #0
 8001900:	d001      	beq.n	8001906 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e033      	b.n	800196e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001906:	1dbb      	adds	r3, r7, #6
 8001908:	881b      	ldrh	r3, [r3, #0]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d107      	bne.n	800191e <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800190e:	2308      	movs	r3, #8
 8001910:	18fb      	adds	r3, r7, r3
 8001912:	881b      	ldrh	r3, [r3, #0]
 8001914:	b2da      	uxtb	r2, r3
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	629a      	str	r2, [r3, #40]	; 0x28
 800191c:	e019      	b.n	8001952 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800191e:	2308      	movs	r3, #8
 8001920:	18fb      	adds	r3, r7, r3
 8001922:	881b      	ldrh	r3, [r3, #0]
 8001924:	0a1b      	lsrs	r3, r3, #8
 8001926:	b29b      	uxth	r3, r3
 8001928:	b2da      	uxtb	r2, r3
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001932:	6a39      	ldr	r1, [r7, #32]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	0018      	movs	r0, r3
 8001938:	f000 f881 	bl	8001a3e <I2C_WaitOnTXISFlagUntilTimeout>
 800193c:	1e03      	subs	r3, r0, #0
 800193e:	d001      	beq.n	8001944 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e014      	b.n	800196e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001944:	2308      	movs	r3, #8
 8001946:	18fb      	adds	r3, r7, r3
 8001948:	881b      	ldrh	r3, [r3, #0]
 800194a:	b2da      	uxtb	r2, r3
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001952:	6a3a      	ldr	r2, [r7, #32]
 8001954:	68f8      	ldr	r0, [r7, #12]
 8001956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	0013      	movs	r3, r2
 800195c:	2200      	movs	r2, #0
 800195e:	2140      	movs	r1, #64	; 0x40
 8001960:	f000 f82e 	bl	80019c0 <I2C_WaitOnFlagUntilTimeout>
 8001964:	1e03      	subs	r3, r0, #0
 8001966:	d001      	beq.n	800196c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e000      	b.n	800196e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 800196c:	2300      	movs	r3, #0
}
 800196e:	0018      	movs	r0, r3
 8001970:	46bd      	mov	sp, r7
 8001972:	b004      	add	sp, #16
 8001974:	bdb0      	pop	{r4, r5, r7, pc}
 8001976:	46c0      	nop			; (mov r8, r8)
 8001978:	80002000 	.word	0x80002000

0800197c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	699b      	ldr	r3, [r3, #24]
 800198a:	2202      	movs	r2, #2
 800198c:	4013      	ands	r3, r2
 800198e:	2b02      	cmp	r3, #2
 8001990:	d103      	bne.n	800199a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2200      	movs	r2, #0
 8001998:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	2201      	movs	r2, #1
 80019a2:	4013      	ands	r3, r2
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d007      	beq.n	80019b8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	699a      	ldr	r2, [r3, #24]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2101      	movs	r1, #1
 80019b4:	430a      	orrs	r2, r1
 80019b6:	619a      	str	r2, [r3, #24]
  }
}
 80019b8:	46c0      	nop			; (mov r8, r8)
 80019ba:	46bd      	mov	sp, r7
 80019bc:	b002      	add	sp, #8
 80019be:	bd80      	pop	{r7, pc}

080019c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	603b      	str	r3, [r7, #0]
 80019cc:	1dfb      	adds	r3, r7, #7
 80019ce:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019d0:	e021      	b.n	8001a16 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	3301      	adds	r3, #1
 80019d6:	d01e      	beq.n	8001a16 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019d8:	f7ff f96c 	bl	8000cb4 <HAL_GetTick>
 80019dc:	0002      	movs	r2, r0
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d302      	bcc.n	80019ee <I2C_WaitOnFlagUntilTimeout+0x2e>
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d113      	bne.n	8001a16 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f2:	2220      	movs	r2, #32
 80019f4:	431a      	orrs	r2, r3
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2241      	movs	r2, #65	; 0x41
 80019fe:	2120      	movs	r1, #32
 8001a00:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2242      	movs	r2, #66	; 0x42
 8001a06:	2100      	movs	r1, #0
 8001a08:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2240      	movs	r2, #64	; 0x40
 8001a0e:	2100      	movs	r1, #0
 8001a10:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e00f      	b.n	8001a36 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	68ba      	ldr	r2, [r7, #8]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	68ba      	ldr	r2, [r7, #8]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	425a      	negs	r2, r3
 8001a26:	4153      	adcs	r3, r2
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	001a      	movs	r2, r3
 8001a2c:	1dfb      	adds	r3, r7, #7
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d0ce      	beq.n	80019d2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	0018      	movs	r0, r3
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	b004      	add	sp, #16
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b084      	sub	sp, #16
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	60f8      	str	r0, [r7, #12]
 8001a46:	60b9      	str	r1, [r7, #8]
 8001a48:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a4a:	e02b      	b.n	8001aa4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	68b9      	ldr	r1, [r7, #8]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	0018      	movs	r0, r3
 8001a54:	f000 f86e 	bl	8001b34 <I2C_IsAcknowledgeFailed>
 8001a58:	1e03      	subs	r3, r0, #0
 8001a5a:	d001      	beq.n	8001a60 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e029      	b.n	8001ab4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	3301      	adds	r3, #1
 8001a64:	d01e      	beq.n	8001aa4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a66:	f7ff f925 	bl	8000cb4 <HAL_GetTick>
 8001a6a:	0002      	movs	r2, r0
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	68ba      	ldr	r2, [r7, #8]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d302      	bcc.n	8001a7c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d113      	bne.n	8001aa4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a80:	2220      	movs	r2, #32
 8001a82:	431a      	orrs	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2241      	movs	r2, #65	; 0x41
 8001a8c:	2120      	movs	r1, #32
 8001a8e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2242      	movs	r2, #66	; 0x42
 8001a94:	2100      	movs	r1, #0
 8001a96:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2240      	movs	r2, #64	; 0x40
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e007      	b.n	8001ab4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	2202      	movs	r2, #2
 8001aac:	4013      	ands	r3, r2
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d1cc      	bne.n	8001a4c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	b004      	add	sp, #16
 8001aba:	bd80      	pop	{r7, pc}

08001abc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ac8:	e028      	b.n	8001b1c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	68b9      	ldr	r1, [r7, #8]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	f000 f82f 	bl	8001b34 <I2C_IsAcknowledgeFailed>
 8001ad6:	1e03      	subs	r3, r0, #0
 8001ad8:	d001      	beq.n	8001ade <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e026      	b.n	8001b2c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ade:	f7ff f8e9 	bl	8000cb4 <HAL_GetTick>
 8001ae2:	0002      	movs	r2, r0
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	68ba      	ldr	r2, [r7, #8]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d302      	bcc.n	8001af4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d113      	bne.n	8001b1c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af8:	2220      	movs	r2, #32
 8001afa:	431a      	orrs	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2241      	movs	r2, #65	; 0x41
 8001b04:	2120      	movs	r1, #32
 8001b06:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2242      	movs	r2, #66	; 0x42
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2240      	movs	r2, #64	; 0x40
 8001b14:	2100      	movs	r1, #0
 8001b16:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e007      	b.n	8001b2c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	2220      	movs	r2, #32
 8001b24:	4013      	ands	r3, r2
 8001b26:	2b20      	cmp	r3, #32
 8001b28:	d1cf      	bne.n	8001aca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	b004      	add	sp, #16
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	2210      	movs	r2, #16
 8001b48:	4013      	ands	r3, r2
 8001b4a:	2b10      	cmp	r3, #16
 8001b4c:	d164      	bne.n	8001c18 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	685a      	ldr	r2, [r3, #4]
 8001b54:	2380      	movs	r3, #128	; 0x80
 8001b56:	049b      	lsls	r3, r3, #18
 8001b58:	401a      	ands	r2, r3
 8001b5a:	2380      	movs	r3, #128	; 0x80
 8001b5c:	049b      	lsls	r3, r3, #18
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d02b      	beq.n	8001bba <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	685a      	ldr	r2, [r3, #4]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2180      	movs	r1, #128	; 0x80
 8001b6e:	01c9      	lsls	r1, r1, #7
 8001b70:	430a      	orrs	r2, r1
 8001b72:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b74:	e021      	b.n	8001bba <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	d01e      	beq.n	8001bba <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b7c:	f7ff f89a 	bl	8000cb4 <HAL_GetTick>
 8001b80:	0002      	movs	r2, r0
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	68ba      	ldr	r2, [r7, #8]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d302      	bcc.n	8001b92 <I2C_IsAcknowledgeFailed+0x5e>
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d113      	bne.n	8001bba <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b96:	2220      	movs	r2, #32
 8001b98:	431a      	orrs	r2, r3
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2241      	movs	r2, #65	; 0x41
 8001ba2:	2120      	movs	r1, #32
 8001ba4:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2242      	movs	r2, #66	; 0x42
 8001baa:	2100      	movs	r1, #0
 8001bac:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2240      	movs	r2, #64	; 0x40
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e02f      	b.n	8001c1a <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	2220      	movs	r2, #32
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	2b20      	cmp	r3, #32
 8001bc6:	d1d6      	bne.n	8001b76 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2210      	movs	r2, #16
 8001bce:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2220      	movs	r2, #32
 8001bd6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	0018      	movs	r0, r3
 8001bdc:	f7ff fece 	bl	800197c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	685a      	ldr	r2, [r3, #4]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	490e      	ldr	r1, [pc, #56]	; (8001c24 <I2C_IsAcknowledgeFailed+0xf0>)
 8001bec:	400a      	ands	r2, r1
 8001bee:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf4:	2204      	movs	r2, #4
 8001bf6:	431a      	orrs	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2241      	movs	r2, #65	; 0x41
 8001c00:	2120      	movs	r1, #32
 8001c02:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2242      	movs	r2, #66	; 0x42
 8001c08:	2100      	movs	r1, #0
 8001c0a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2240      	movs	r2, #64	; 0x40
 8001c10:	2100      	movs	r1, #0
 8001c12:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e000      	b.n	8001c1a <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	0018      	movs	r0, r3
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	b004      	add	sp, #16
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	46c0      	nop			; (mov r8, r8)
 8001c24:	fe00e800 	.word	0xfe00e800

08001c28 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001c28:	b590      	push	{r4, r7, lr}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	0008      	movs	r0, r1
 8001c32:	0011      	movs	r1, r2
 8001c34:	607b      	str	r3, [r7, #4]
 8001c36:	240a      	movs	r4, #10
 8001c38:	193b      	adds	r3, r7, r4
 8001c3a:	1c02      	adds	r2, r0, #0
 8001c3c:	801a      	strh	r2, [r3, #0]
 8001c3e:	2009      	movs	r0, #9
 8001c40:	183b      	adds	r3, r7, r0
 8001c42:	1c0a      	adds	r2, r1, #0
 8001c44:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	6a3a      	ldr	r2, [r7, #32]
 8001c4e:	0d51      	lsrs	r1, r2, #21
 8001c50:	2280      	movs	r2, #128	; 0x80
 8001c52:	00d2      	lsls	r2, r2, #3
 8001c54:	400a      	ands	r2, r1
 8001c56:	490e      	ldr	r1, [pc, #56]	; (8001c90 <I2C_TransferConfig+0x68>)
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	43d2      	mvns	r2, r2
 8001c5c:	401a      	ands	r2, r3
 8001c5e:	0011      	movs	r1, r2
 8001c60:	193b      	adds	r3, r7, r4
 8001c62:	881b      	ldrh	r3, [r3, #0]
 8001c64:	059b      	lsls	r3, r3, #22
 8001c66:	0d9a      	lsrs	r2, r3, #22
 8001c68:	183b      	adds	r3, r7, r0
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	0418      	lsls	r0, r3, #16
 8001c6e:	23ff      	movs	r3, #255	; 0xff
 8001c70:	041b      	lsls	r3, r3, #16
 8001c72:	4003      	ands	r3, r0
 8001c74:	431a      	orrs	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	431a      	orrs	r2, r3
 8001c7a:	6a3b      	ldr	r3, [r7, #32]
 8001c7c:	431a      	orrs	r2, r3
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	430a      	orrs	r2, r1
 8001c84:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8001c86:	46c0      	nop			; (mov r8, r8)
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	b005      	add	sp, #20
 8001c8c:	bd90      	pop	{r4, r7, pc}
 8001c8e:	46c0      	nop			; (mov r8, r8)
 8001c90:	03ff63ff 	.word	0x03ff63ff

08001c94 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2241      	movs	r2, #65	; 0x41
 8001ca2:	5c9b      	ldrb	r3, [r3, r2]
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b20      	cmp	r3, #32
 8001ca8:	d138      	bne.n	8001d1c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2240      	movs	r2, #64	; 0x40
 8001cae:	5c9b      	ldrb	r3, [r3, r2]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d101      	bne.n	8001cb8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	e032      	b.n	8001d1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2240      	movs	r2, #64	; 0x40
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2241      	movs	r2, #65	; 0x41
 8001cc4:	2124      	movs	r1, #36	; 0x24
 8001cc6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2101      	movs	r1, #1
 8001cd4:	438a      	bics	r2, r1
 8001cd6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4911      	ldr	r1, [pc, #68]	; (8001d28 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001ce4:	400a      	ands	r2, r1
 8001ce6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6819      	ldr	r1, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2101      	movs	r1, #1
 8001d04:	430a      	orrs	r2, r1
 8001d06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2241      	movs	r2, #65	; 0x41
 8001d0c:	2120      	movs	r1, #32
 8001d0e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2240      	movs	r2, #64	; 0x40
 8001d14:	2100      	movs	r1, #0
 8001d16:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	e000      	b.n	8001d1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d1c:	2302      	movs	r3, #2
  }
}
 8001d1e:	0018      	movs	r0, r3
 8001d20:	46bd      	mov	sp, r7
 8001d22:	b002      	add	sp, #8
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	46c0      	nop			; (mov r8, r8)
 8001d28:	ffffefff 	.word	0xffffefff

08001d2c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2241      	movs	r2, #65	; 0x41
 8001d3a:	5c9b      	ldrb	r3, [r3, r2]
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	2b20      	cmp	r3, #32
 8001d40:	d139      	bne.n	8001db6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2240      	movs	r2, #64	; 0x40
 8001d46:	5c9b      	ldrb	r3, [r3, r2]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d101      	bne.n	8001d50 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	e033      	b.n	8001db8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2240      	movs	r2, #64	; 0x40
 8001d54:	2101      	movs	r1, #1
 8001d56:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2241      	movs	r2, #65	; 0x41
 8001d5c:	2124      	movs	r1, #36	; 0x24
 8001d5e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	438a      	bics	r2, r1
 8001d6e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	4a11      	ldr	r2, [pc, #68]	; (8001dc0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	021b      	lsls	r3, r3, #8
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2241      	movs	r2, #65	; 0x41
 8001da6:	2120      	movs	r1, #32
 8001da8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2240      	movs	r2, #64	; 0x40
 8001dae:	2100      	movs	r1, #0
 8001db0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001db2:	2300      	movs	r3, #0
 8001db4:	e000      	b.n	8001db8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001db6:	2302      	movs	r3, #2
  }
}
 8001db8:	0018      	movs	r0, r3
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	b004      	add	sp, #16
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	fffff0ff 	.word	0xfffff0ff

08001dc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b088      	sub	sp, #32
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e301      	b.n	80023da <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	4013      	ands	r3, r2
 8001dde:	d100      	bne.n	8001de2 <HAL_RCC_OscConfig+0x1e>
 8001de0:	e08d      	b.n	8001efe <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001de2:	4bc3      	ldr	r3, [pc, #780]	; (80020f0 <HAL_RCC_OscConfig+0x32c>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	220c      	movs	r2, #12
 8001de8:	4013      	ands	r3, r2
 8001dea:	2b04      	cmp	r3, #4
 8001dec:	d00e      	beq.n	8001e0c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001dee:	4bc0      	ldr	r3, [pc, #768]	; (80020f0 <HAL_RCC_OscConfig+0x32c>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	220c      	movs	r2, #12
 8001df4:	4013      	ands	r3, r2
 8001df6:	2b08      	cmp	r3, #8
 8001df8:	d116      	bne.n	8001e28 <HAL_RCC_OscConfig+0x64>
 8001dfa:	4bbd      	ldr	r3, [pc, #756]	; (80020f0 <HAL_RCC_OscConfig+0x32c>)
 8001dfc:	685a      	ldr	r2, [r3, #4]
 8001dfe:	2380      	movs	r3, #128	; 0x80
 8001e00:	025b      	lsls	r3, r3, #9
 8001e02:	401a      	ands	r2, r3
 8001e04:	2380      	movs	r3, #128	; 0x80
 8001e06:	025b      	lsls	r3, r3, #9
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d10d      	bne.n	8001e28 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e0c:	4bb8      	ldr	r3, [pc, #736]	; (80020f0 <HAL_RCC_OscConfig+0x32c>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	2380      	movs	r3, #128	; 0x80
 8001e12:	029b      	lsls	r3, r3, #10
 8001e14:	4013      	ands	r3, r2
 8001e16:	d100      	bne.n	8001e1a <HAL_RCC_OscConfig+0x56>
 8001e18:	e070      	b.n	8001efc <HAL_RCC_OscConfig+0x138>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d000      	beq.n	8001e24 <HAL_RCC_OscConfig+0x60>
 8001e22:	e06b      	b.n	8001efc <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e2d8      	b.n	80023da <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d107      	bne.n	8001e40 <HAL_RCC_OscConfig+0x7c>
 8001e30:	4baf      	ldr	r3, [pc, #700]	; (80020f0 <HAL_RCC_OscConfig+0x32c>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	4bae      	ldr	r3, [pc, #696]	; (80020f0 <HAL_RCC_OscConfig+0x32c>)
 8001e36:	2180      	movs	r1, #128	; 0x80
 8001e38:	0249      	lsls	r1, r1, #9
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	e02f      	b.n	8001ea0 <HAL_RCC_OscConfig+0xdc>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d10c      	bne.n	8001e62 <HAL_RCC_OscConfig+0x9e>
 8001e48:	4ba9      	ldr	r3, [pc, #676]	; (80020f0 <HAL_RCC_OscConfig+0x32c>)
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	4ba8      	ldr	r3, [pc, #672]	; (80020f0 <HAL_RCC_OscConfig+0x32c>)
 8001e4e:	49a9      	ldr	r1, [pc, #676]	; (80020f4 <HAL_RCC_OscConfig+0x330>)
 8001e50:	400a      	ands	r2, r1
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	4ba6      	ldr	r3, [pc, #664]	; (80020f0 <HAL_RCC_OscConfig+0x32c>)
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	4ba5      	ldr	r3, [pc, #660]	; (80020f0 <HAL_RCC_OscConfig+0x32c>)
 8001e5a:	49a7      	ldr	r1, [pc, #668]	; (80020f8 <HAL_RCC_OscConfig+0x334>)
 8001e5c:	400a      	ands	r2, r1
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	e01e      	b.n	8001ea0 <HAL_RCC_OscConfig+0xdc>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	2b05      	cmp	r3, #5
 8001e68:	d10e      	bne.n	8001e88 <HAL_RCC_OscConfig+0xc4>
 8001e6a:	4ba1      	ldr	r3, [pc, #644]	; (80020f0 <HAL_RCC_OscConfig+0x32c>)
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	4ba0      	ldr	r3, [pc, #640]	; (80020f0 <HAL_RCC_OscConfig+0x32c>)
 8001e70:	2180      	movs	r1, #128	; 0x80
 8001e72:	02c9      	lsls	r1, r1, #11
 8001e74:	430a      	orrs	r2, r1
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	4b9d      	ldr	r3, [pc, #628]	; (80020f0 <HAL_RCC_OscConfig+0x32c>)
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	4b9c      	ldr	r3, [pc, #624]	; (80020f0 <HAL_RCC_OscConfig+0x32c>)
 8001e7e:	2180      	movs	r1, #128	; 0x80
 8001e80:	0249      	lsls	r1, r1, #9
 8001e82:	430a      	orrs	r2, r1
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	e00b      	b.n	8001ea0 <HAL_RCC_OscConfig+0xdc>
 8001e88:	4b99      	ldr	r3, [pc, #612]	; (80020f0 <HAL_RCC_OscConfig+0x32c>)
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	4b98      	ldr	r3, [pc, #608]	; (80020f0 <HAL_RCC_OscConfig+0x32c>)
 8001e8e:	4999      	ldr	r1, [pc, #612]	; (80020f4 <HAL_RCC_OscConfig+0x330>)
 8001e90:	400a      	ands	r2, r1
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	4b96      	ldr	r3, [pc, #600]	; (80020f0 <HAL_RCC_OscConfig+0x32c>)
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	4b95      	ldr	r3, [pc, #596]	; (80020f0 <HAL_RCC_OscConfig+0x32c>)
 8001e9a:	4997      	ldr	r1, [pc, #604]	; (80020f8 <HAL_RCC_OscConfig+0x334>)
 8001e9c:	400a      	ands	r2, r1
 8001e9e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d014      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea8:	f7fe ff04 	bl	8000cb4 <HAL_GetTick>
 8001eac:	0003      	movs	r3, r0
 8001eae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb0:	e008      	b.n	8001ec4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eb2:	f7fe feff 	bl	8000cb4 <HAL_GetTick>
 8001eb6:	0002      	movs	r2, r0
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b64      	cmp	r3, #100	; 0x64
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e28a      	b.n	80023da <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ec4:	4b8a      	ldr	r3, [pc, #552]	; (80020f0 <HAL_RCC_OscConfig+0x32c>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	2380      	movs	r3, #128	; 0x80
 8001eca:	029b      	lsls	r3, r3, #10
 8001ecc:	4013      	ands	r3, r2
 8001ece:	d0f0      	beq.n	8001eb2 <HAL_RCC_OscConfig+0xee>
 8001ed0:	e015      	b.n	8001efe <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed2:	f7fe feef 	bl	8000cb4 <HAL_GetTick>
 8001ed6:	0003      	movs	r3, r0
 8001ed8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001edc:	f7fe feea 	bl	8000cb4 <HAL_GetTick>
 8001ee0:	0002      	movs	r2, r0
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b64      	cmp	r3, #100	; 0x64
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e275      	b.n	80023da <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eee:	4b80      	ldr	r3, [pc, #512]	; (80020f0 <HAL_RCC_OscConfig+0x32c>)
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	2380      	movs	r3, #128	; 0x80
 8001ef4:	029b      	lsls	r3, r3, #10
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	d1f0      	bne.n	8001edc <HAL_RCC_OscConfig+0x118>
 8001efa:	e000      	b.n	8001efe <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001efc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2202      	movs	r2, #2
 8001f04:	4013      	ands	r3, r2
 8001f06:	d100      	bne.n	8001f0a <HAL_RCC_OscConfig+0x146>
 8001f08:	e069      	b.n	8001fde <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001f0a:	4b79      	ldr	r3, [pc, #484]	; (80020f0 <HAL_RCC_OscConfig+0x32c>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	220c      	movs	r2, #12
 8001f10:	4013      	ands	r3, r2
 8001f12:	d00b      	beq.n	8001f2c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001f14:	4b76      	ldr	r3, [pc, #472]	; (80020f0 <HAL_RCC_OscConfig+0x32c>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	220c      	movs	r2, #12
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	2b08      	cmp	r3, #8
 8001f1e:	d11c      	bne.n	8001f5a <HAL_RCC_OscConfig+0x196>
 8001f20:	4b73      	ldr	r3, [pc, #460]	; (80020f0 <HAL_RCC_OscConfig+0x32c>)
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	2380      	movs	r3, #128	; 0x80
 8001f26:	025b      	lsls	r3, r3, #9
 8001f28:	4013      	ands	r3, r2
 8001f2a:	d116      	bne.n	8001f5a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f2c:	4b70      	ldr	r3, [pc, #448]	; (80020f0 <HAL_RCC_OscConfig+0x32c>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2202      	movs	r2, #2
 8001f32:	4013      	ands	r3, r2
 8001f34:	d005      	beq.n	8001f42 <HAL_RCC_OscConfig+0x17e>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d001      	beq.n	8001f42 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e24b      	b.n	80023da <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f42:	4b6b      	ldr	r3, [pc, #428]	; (80020f0 <HAL_RCC_OscConfig+0x32c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	22f8      	movs	r2, #248	; 0xf8
 8001f48:	4393      	bics	r3, r2
 8001f4a:	0019      	movs	r1, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	00da      	lsls	r2, r3, #3
 8001f52:	4b67      	ldr	r3, [pc, #412]	; (80020f0 <HAL_RCC_OscConfig+0x32c>)
 8001f54:	430a      	orrs	r2, r1
 8001f56:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f58:	e041      	b.n	8001fde <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d024      	beq.n	8001fac <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f62:	4b63      	ldr	r3, [pc, #396]	; (80020f0 <HAL_RCC_OscConfig+0x32c>)
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	4b62      	ldr	r3, [pc, #392]	; (80020f0 <HAL_RCC_OscConfig+0x32c>)
 8001f68:	2101      	movs	r1, #1
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6e:	f7fe fea1 	bl	8000cb4 <HAL_GetTick>
 8001f72:	0003      	movs	r3, r0
 8001f74:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f78:	f7fe fe9c 	bl	8000cb4 <HAL_GetTick>
 8001f7c:	0002      	movs	r2, r0
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e227      	b.n	80023da <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f8a:	4b59      	ldr	r3, [pc, #356]	; (80020f0 <HAL_RCC_OscConfig+0x32c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2202      	movs	r2, #2
 8001f90:	4013      	ands	r3, r2
 8001f92:	d0f1      	beq.n	8001f78 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f94:	4b56      	ldr	r3, [pc, #344]	; (80020f0 <HAL_RCC_OscConfig+0x32c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	22f8      	movs	r2, #248	; 0xf8
 8001f9a:	4393      	bics	r3, r2
 8001f9c:	0019      	movs	r1, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	00da      	lsls	r2, r3, #3
 8001fa4:	4b52      	ldr	r3, [pc, #328]	; (80020f0 <HAL_RCC_OscConfig+0x32c>)
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	e018      	b.n	8001fde <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fac:	4b50      	ldr	r3, [pc, #320]	; (80020f0 <HAL_RCC_OscConfig+0x32c>)
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	4b4f      	ldr	r3, [pc, #316]	; (80020f0 <HAL_RCC_OscConfig+0x32c>)
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	438a      	bics	r2, r1
 8001fb6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb8:	f7fe fe7c 	bl	8000cb4 <HAL_GetTick>
 8001fbc:	0003      	movs	r3, r0
 8001fbe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fc0:	e008      	b.n	8001fd4 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fc2:	f7fe fe77 	bl	8000cb4 <HAL_GetTick>
 8001fc6:	0002      	movs	r2, r0
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e202      	b.n	80023da <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fd4:	4b46      	ldr	r3, [pc, #280]	; (80020f0 <HAL_RCC_OscConfig+0x32c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2202      	movs	r2, #2
 8001fda:	4013      	ands	r3, r2
 8001fdc:	d1f1      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2208      	movs	r2, #8
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	d036      	beq.n	8002056 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	69db      	ldr	r3, [r3, #28]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d019      	beq.n	8002024 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ff0:	4b3f      	ldr	r3, [pc, #252]	; (80020f0 <HAL_RCC_OscConfig+0x32c>)
 8001ff2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ff4:	4b3e      	ldr	r3, [pc, #248]	; (80020f0 <HAL_RCC_OscConfig+0x32c>)
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ffc:	f7fe fe5a 	bl	8000cb4 <HAL_GetTick>
 8002000:	0003      	movs	r3, r0
 8002002:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002004:	e008      	b.n	8002018 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002006:	f7fe fe55 	bl	8000cb4 <HAL_GetTick>
 800200a:	0002      	movs	r2, r0
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e1e0      	b.n	80023da <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002018:	4b35      	ldr	r3, [pc, #212]	; (80020f0 <HAL_RCC_OscConfig+0x32c>)
 800201a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201c:	2202      	movs	r2, #2
 800201e:	4013      	ands	r3, r2
 8002020:	d0f1      	beq.n	8002006 <HAL_RCC_OscConfig+0x242>
 8002022:	e018      	b.n	8002056 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002024:	4b32      	ldr	r3, [pc, #200]	; (80020f0 <HAL_RCC_OscConfig+0x32c>)
 8002026:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002028:	4b31      	ldr	r3, [pc, #196]	; (80020f0 <HAL_RCC_OscConfig+0x32c>)
 800202a:	2101      	movs	r1, #1
 800202c:	438a      	bics	r2, r1
 800202e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002030:	f7fe fe40 	bl	8000cb4 <HAL_GetTick>
 8002034:	0003      	movs	r3, r0
 8002036:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002038:	e008      	b.n	800204c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800203a:	f7fe fe3b 	bl	8000cb4 <HAL_GetTick>
 800203e:	0002      	movs	r2, r0
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e1c6      	b.n	80023da <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800204c:	4b28      	ldr	r3, [pc, #160]	; (80020f0 <HAL_RCC_OscConfig+0x32c>)
 800204e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002050:	2202      	movs	r2, #2
 8002052:	4013      	ands	r3, r2
 8002054:	d1f1      	bne.n	800203a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2204      	movs	r2, #4
 800205c:	4013      	ands	r3, r2
 800205e:	d100      	bne.n	8002062 <HAL_RCC_OscConfig+0x29e>
 8002060:	e0b4      	b.n	80021cc <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002062:	201f      	movs	r0, #31
 8002064:	183b      	adds	r3, r7, r0
 8002066:	2200      	movs	r2, #0
 8002068:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800206a:	4b21      	ldr	r3, [pc, #132]	; (80020f0 <HAL_RCC_OscConfig+0x32c>)
 800206c:	69da      	ldr	r2, [r3, #28]
 800206e:	2380      	movs	r3, #128	; 0x80
 8002070:	055b      	lsls	r3, r3, #21
 8002072:	4013      	ands	r3, r2
 8002074:	d110      	bne.n	8002098 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002076:	4b1e      	ldr	r3, [pc, #120]	; (80020f0 <HAL_RCC_OscConfig+0x32c>)
 8002078:	69da      	ldr	r2, [r3, #28]
 800207a:	4b1d      	ldr	r3, [pc, #116]	; (80020f0 <HAL_RCC_OscConfig+0x32c>)
 800207c:	2180      	movs	r1, #128	; 0x80
 800207e:	0549      	lsls	r1, r1, #21
 8002080:	430a      	orrs	r2, r1
 8002082:	61da      	str	r2, [r3, #28]
 8002084:	4b1a      	ldr	r3, [pc, #104]	; (80020f0 <HAL_RCC_OscConfig+0x32c>)
 8002086:	69da      	ldr	r2, [r3, #28]
 8002088:	2380      	movs	r3, #128	; 0x80
 800208a:	055b      	lsls	r3, r3, #21
 800208c:	4013      	ands	r3, r2
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002092:	183b      	adds	r3, r7, r0
 8002094:	2201      	movs	r2, #1
 8002096:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002098:	4b18      	ldr	r3, [pc, #96]	; (80020fc <HAL_RCC_OscConfig+0x338>)
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	2380      	movs	r3, #128	; 0x80
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	4013      	ands	r3, r2
 80020a2:	d11a      	bne.n	80020da <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020a4:	4b15      	ldr	r3, [pc, #84]	; (80020fc <HAL_RCC_OscConfig+0x338>)
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	4b14      	ldr	r3, [pc, #80]	; (80020fc <HAL_RCC_OscConfig+0x338>)
 80020aa:	2180      	movs	r1, #128	; 0x80
 80020ac:	0049      	lsls	r1, r1, #1
 80020ae:	430a      	orrs	r2, r1
 80020b0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020b2:	f7fe fdff 	bl	8000cb4 <HAL_GetTick>
 80020b6:	0003      	movs	r3, r0
 80020b8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ba:	e008      	b.n	80020ce <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020bc:	f7fe fdfa 	bl	8000cb4 <HAL_GetTick>
 80020c0:	0002      	movs	r2, r0
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b64      	cmp	r3, #100	; 0x64
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e185      	b.n	80023da <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ce:	4b0b      	ldr	r3, [pc, #44]	; (80020fc <HAL_RCC_OscConfig+0x338>)
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	2380      	movs	r3, #128	; 0x80
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	4013      	ands	r3, r2
 80020d8:	d0f0      	beq.n	80020bc <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d10e      	bne.n	8002100 <HAL_RCC_OscConfig+0x33c>
 80020e2:	4b03      	ldr	r3, [pc, #12]	; (80020f0 <HAL_RCC_OscConfig+0x32c>)
 80020e4:	6a1a      	ldr	r2, [r3, #32]
 80020e6:	4b02      	ldr	r3, [pc, #8]	; (80020f0 <HAL_RCC_OscConfig+0x32c>)
 80020e8:	2101      	movs	r1, #1
 80020ea:	430a      	orrs	r2, r1
 80020ec:	621a      	str	r2, [r3, #32]
 80020ee:	e035      	b.n	800215c <HAL_RCC_OscConfig+0x398>
 80020f0:	40021000 	.word	0x40021000
 80020f4:	fffeffff 	.word	0xfffeffff
 80020f8:	fffbffff 	.word	0xfffbffff
 80020fc:	40007000 	.word	0x40007000
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d10c      	bne.n	8002122 <HAL_RCC_OscConfig+0x35e>
 8002108:	4bb6      	ldr	r3, [pc, #728]	; (80023e4 <HAL_RCC_OscConfig+0x620>)
 800210a:	6a1a      	ldr	r2, [r3, #32]
 800210c:	4bb5      	ldr	r3, [pc, #724]	; (80023e4 <HAL_RCC_OscConfig+0x620>)
 800210e:	2101      	movs	r1, #1
 8002110:	438a      	bics	r2, r1
 8002112:	621a      	str	r2, [r3, #32]
 8002114:	4bb3      	ldr	r3, [pc, #716]	; (80023e4 <HAL_RCC_OscConfig+0x620>)
 8002116:	6a1a      	ldr	r2, [r3, #32]
 8002118:	4bb2      	ldr	r3, [pc, #712]	; (80023e4 <HAL_RCC_OscConfig+0x620>)
 800211a:	2104      	movs	r1, #4
 800211c:	438a      	bics	r2, r1
 800211e:	621a      	str	r2, [r3, #32]
 8002120:	e01c      	b.n	800215c <HAL_RCC_OscConfig+0x398>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	2b05      	cmp	r3, #5
 8002128:	d10c      	bne.n	8002144 <HAL_RCC_OscConfig+0x380>
 800212a:	4bae      	ldr	r3, [pc, #696]	; (80023e4 <HAL_RCC_OscConfig+0x620>)
 800212c:	6a1a      	ldr	r2, [r3, #32]
 800212e:	4bad      	ldr	r3, [pc, #692]	; (80023e4 <HAL_RCC_OscConfig+0x620>)
 8002130:	2104      	movs	r1, #4
 8002132:	430a      	orrs	r2, r1
 8002134:	621a      	str	r2, [r3, #32]
 8002136:	4bab      	ldr	r3, [pc, #684]	; (80023e4 <HAL_RCC_OscConfig+0x620>)
 8002138:	6a1a      	ldr	r2, [r3, #32]
 800213a:	4baa      	ldr	r3, [pc, #680]	; (80023e4 <HAL_RCC_OscConfig+0x620>)
 800213c:	2101      	movs	r1, #1
 800213e:	430a      	orrs	r2, r1
 8002140:	621a      	str	r2, [r3, #32]
 8002142:	e00b      	b.n	800215c <HAL_RCC_OscConfig+0x398>
 8002144:	4ba7      	ldr	r3, [pc, #668]	; (80023e4 <HAL_RCC_OscConfig+0x620>)
 8002146:	6a1a      	ldr	r2, [r3, #32]
 8002148:	4ba6      	ldr	r3, [pc, #664]	; (80023e4 <HAL_RCC_OscConfig+0x620>)
 800214a:	2101      	movs	r1, #1
 800214c:	438a      	bics	r2, r1
 800214e:	621a      	str	r2, [r3, #32]
 8002150:	4ba4      	ldr	r3, [pc, #656]	; (80023e4 <HAL_RCC_OscConfig+0x620>)
 8002152:	6a1a      	ldr	r2, [r3, #32]
 8002154:	4ba3      	ldr	r3, [pc, #652]	; (80023e4 <HAL_RCC_OscConfig+0x620>)
 8002156:	2104      	movs	r1, #4
 8002158:	438a      	bics	r2, r1
 800215a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d014      	beq.n	800218e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002164:	f7fe fda6 	bl	8000cb4 <HAL_GetTick>
 8002168:	0003      	movs	r3, r0
 800216a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800216c:	e009      	b.n	8002182 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800216e:	f7fe fda1 	bl	8000cb4 <HAL_GetTick>
 8002172:	0002      	movs	r2, r0
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	4a9b      	ldr	r2, [pc, #620]	; (80023e8 <HAL_RCC_OscConfig+0x624>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e12b      	b.n	80023da <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002182:	4b98      	ldr	r3, [pc, #608]	; (80023e4 <HAL_RCC_OscConfig+0x620>)
 8002184:	6a1b      	ldr	r3, [r3, #32]
 8002186:	2202      	movs	r2, #2
 8002188:	4013      	ands	r3, r2
 800218a:	d0f0      	beq.n	800216e <HAL_RCC_OscConfig+0x3aa>
 800218c:	e013      	b.n	80021b6 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800218e:	f7fe fd91 	bl	8000cb4 <HAL_GetTick>
 8002192:	0003      	movs	r3, r0
 8002194:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002196:	e009      	b.n	80021ac <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002198:	f7fe fd8c 	bl	8000cb4 <HAL_GetTick>
 800219c:	0002      	movs	r2, r0
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	4a91      	ldr	r2, [pc, #580]	; (80023e8 <HAL_RCC_OscConfig+0x624>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d901      	bls.n	80021ac <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e116      	b.n	80023da <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ac:	4b8d      	ldr	r3, [pc, #564]	; (80023e4 <HAL_RCC_OscConfig+0x620>)
 80021ae:	6a1b      	ldr	r3, [r3, #32]
 80021b0:	2202      	movs	r2, #2
 80021b2:	4013      	ands	r3, r2
 80021b4:	d1f0      	bne.n	8002198 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021b6:	231f      	movs	r3, #31
 80021b8:	18fb      	adds	r3, r7, r3
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d105      	bne.n	80021cc <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021c0:	4b88      	ldr	r3, [pc, #544]	; (80023e4 <HAL_RCC_OscConfig+0x620>)
 80021c2:	69da      	ldr	r2, [r3, #28]
 80021c4:	4b87      	ldr	r3, [pc, #540]	; (80023e4 <HAL_RCC_OscConfig+0x620>)
 80021c6:	4989      	ldr	r1, [pc, #548]	; (80023ec <HAL_RCC_OscConfig+0x628>)
 80021c8:	400a      	ands	r2, r1
 80021ca:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2210      	movs	r2, #16
 80021d2:	4013      	ands	r3, r2
 80021d4:	d063      	beq.n	800229e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	695b      	ldr	r3, [r3, #20]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d12a      	bne.n	8002234 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80021de:	4b81      	ldr	r3, [pc, #516]	; (80023e4 <HAL_RCC_OscConfig+0x620>)
 80021e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021e2:	4b80      	ldr	r3, [pc, #512]	; (80023e4 <HAL_RCC_OscConfig+0x620>)
 80021e4:	2104      	movs	r1, #4
 80021e6:	430a      	orrs	r2, r1
 80021e8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80021ea:	4b7e      	ldr	r3, [pc, #504]	; (80023e4 <HAL_RCC_OscConfig+0x620>)
 80021ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021ee:	4b7d      	ldr	r3, [pc, #500]	; (80023e4 <HAL_RCC_OscConfig+0x620>)
 80021f0:	2101      	movs	r1, #1
 80021f2:	430a      	orrs	r2, r1
 80021f4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f6:	f7fe fd5d 	bl	8000cb4 <HAL_GetTick>
 80021fa:	0003      	movs	r3, r0
 80021fc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002200:	f7fe fd58 	bl	8000cb4 <HAL_GetTick>
 8002204:	0002      	movs	r2, r0
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e0e3      	b.n	80023da <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002212:	4b74      	ldr	r3, [pc, #464]	; (80023e4 <HAL_RCC_OscConfig+0x620>)
 8002214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002216:	2202      	movs	r2, #2
 8002218:	4013      	ands	r3, r2
 800221a:	d0f1      	beq.n	8002200 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800221c:	4b71      	ldr	r3, [pc, #452]	; (80023e4 <HAL_RCC_OscConfig+0x620>)
 800221e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002220:	22f8      	movs	r2, #248	; 0xf8
 8002222:	4393      	bics	r3, r2
 8002224:	0019      	movs	r1, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	00da      	lsls	r2, r3, #3
 800222c:	4b6d      	ldr	r3, [pc, #436]	; (80023e4 <HAL_RCC_OscConfig+0x620>)
 800222e:	430a      	orrs	r2, r1
 8002230:	635a      	str	r2, [r3, #52]	; 0x34
 8002232:	e034      	b.n	800229e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	3305      	adds	r3, #5
 800223a:	d111      	bne.n	8002260 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800223c:	4b69      	ldr	r3, [pc, #420]	; (80023e4 <HAL_RCC_OscConfig+0x620>)
 800223e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002240:	4b68      	ldr	r3, [pc, #416]	; (80023e4 <HAL_RCC_OscConfig+0x620>)
 8002242:	2104      	movs	r1, #4
 8002244:	438a      	bics	r2, r1
 8002246:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002248:	4b66      	ldr	r3, [pc, #408]	; (80023e4 <HAL_RCC_OscConfig+0x620>)
 800224a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800224c:	22f8      	movs	r2, #248	; 0xf8
 800224e:	4393      	bics	r3, r2
 8002250:	0019      	movs	r1, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	00da      	lsls	r2, r3, #3
 8002258:	4b62      	ldr	r3, [pc, #392]	; (80023e4 <HAL_RCC_OscConfig+0x620>)
 800225a:	430a      	orrs	r2, r1
 800225c:	635a      	str	r2, [r3, #52]	; 0x34
 800225e:	e01e      	b.n	800229e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002260:	4b60      	ldr	r3, [pc, #384]	; (80023e4 <HAL_RCC_OscConfig+0x620>)
 8002262:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002264:	4b5f      	ldr	r3, [pc, #380]	; (80023e4 <HAL_RCC_OscConfig+0x620>)
 8002266:	2104      	movs	r1, #4
 8002268:	430a      	orrs	r2, r1
 800226a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800226c:	4b5d      	ldr	r3, [pc, #372]	; (80023e4 <HAL_RCC_OscConfig+0x620>)
 800226e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002270:	4b5c      	ldr	r3, [pc, #368]	; (80023e4 <HAL_RCC_OscConfig+0x620>)
 8002272:	2101      	movs	r1, #1
 8002274:	438a      	bics	r2, r1
 8002276:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002278:	f7fe fd1c 	bl	8000cb4 <HAL_GetTick>
 800227c:	0003      	movs	r3, r0
 800227e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002280:	e008      	b.n	8002294 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002282:	f7fe fd17 	bl	8000cb4 <HAL_GetTick>
 8002286:	0002      	movs	r2, r0
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e0a2      	b.n	80023da <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002294:	4b53      	ldr	r3, [pc, #332]	; (80023e4 <HAL_RCC_OscConfig+0x620>)
 8002296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002298:	2202      	movs	r2, #2
 800229a:	4013      	ands	r3, r2
 800229c:	d1f1      	bne.n	8002282 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a1b      	ldr	r3, [r3, #32]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d100      	bne.n	80022a8 <HAL_RCC_OscConfig+0x4e4>
 80022a6:	e097      	b.n	80023d8 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022a8:	4b4e      	ldr	r3, [pc, #312]	; (80023e4 <HAL_RCC_OscConfig+0x620>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	220c      	movs	r2, #12
 80022ae:	4013      	ands	r3, r2
 80022b0:	2b08      	cmp	r3, #8
 80022b2:	d100      	bne.n	80022b6 <HAL_RCC_OscConfig+0x4f2>
 80022b4:	e06b      	b.n	800238e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a1b      	ldr	r3, [r3, #32]
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d14c      	bne.n	8002358 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022be:	4b49      	ldr	r3, [pc, #292]	; (80023e4 <HAL_RCC_OscConfig+0x620>)
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	4b48      	ldr	r3, [pc, #288]	; (80023e4 <HAL_RCC_OscConfig+0x620>)
 80022c4:	494a      	ldr	r1, [pc, #296]	; (80023f0 <HAL_RCC_OscConfig+0x62c>)
 80022c6:	400a      	ands	r2, r1
 80022c8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ca:	f7fe fcf3 	bl	8000cb4 <HAL_GetTick>
 80022ce:	0003      	movs	r3, r0
 80022d0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022d4:	f7fe fcee 	bl	8000cb4 <HAL_GetTick>
 80022d8:	0002      	movs	r2, r0
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e079      	b.n	80023da <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022e6:	4b3f      	ldr	r3, [pc, #252]	; (80023e4 <HAL_RCC_OscConfig+0x620>)
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	2380      	movs	r3, #128	; 0x80
 80022ec:	049b      	lsls	r3, r3, #18
 80022ee:	4013      	ands	r3, r2
 80022f0:	d1f0      	bne.n	80022d4 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022f2:	4b3c      	ldr	r3, [pc, #240]	; (80023e4 <HAL_RCC_OscConfig+0x620>)
 80022f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f6:	220f      	movs	r2, #15
 80022f8:	4393      	bics	r3, r2
 80022fa:	0019      	movs	r1, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002300:	4b38      	ldr	r3, [pc, #224]	; (80023e4 <HAL_RCC_OscConfig+0x620>)
 8002302:	430a      	orrs	r2, r1
 8002304:	62da      	str	r2, [r3, #44]	; 0x2c
 8002306:	4b37      	ldr	r3, [pc, #220]	; (80023e4 <HAL_RCC_OscConfig+0x620>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	4a3a      	ldr	r2, [pc, #232]	; (80023f4 <HAL_RCC_OscConfig+0x630>)
 800230c:	4013      	ands	r3, r2
 800230e:	0019      	movs	r1, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002318:	431a      	orrs	r2, r3
 800231a:	4b32      	ldr	r3, [pc, #200]	; (80023e4 <HAL_RCC_OscConfig+0x620>)
 800231c:	430a      	orrs	r2, r1
 800231e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002320:	4b30      	ldr	r3, [pc, #192]	; (80023e4 <HAL_RCC_OscConfig+0x620>)
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	4b2f      	ldr	r3, [pc, #188]	; (80023e4 <HAL_RCC_OscConfig+0x620>)
 8002326:	2180      	movs	r1, #128	; 0x80
 8002328:	0449      	lsls	r1, r1, #17
 800232a:	430a      	orrs	r2, r1
 800232c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232e:	f7fe fcc1 	bl	8000cb4 <HAL_GetTick>
 8002332:	0003      	movs	r3, r0
 8002334:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002338:	f7fe fcbc 	bl	8000cb4 <HAL_GetTick>
 800233c:	0002      	movs	r2, r0
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e047      	b.n	80023da <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800234a:	4b26      	ldr	r3, [pc, #152]	; (80023e4 <HAL_RCC_OscConfig+0x620>)
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	2380      	movs	r3, #128	; 0x80
 8002350:	049b      	lsls	r3, r3, #18
 8002352:	4013      	ands	r3, r2
 8002354:	d0f0      	beq.n	8002338 <HAL_RCC_OscConfig+0x574>
 8002356:	e03f      	b.n	80023d8 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002358:	4b22      	ldr	r3, [pc, #136]	; (80023e4 <HAL_RCC_OscConfig+0x620>)
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	4b21      	ldr	r3, [pc, #132]	; (80023e4 <HAL_RCC_OscConfig+0x620>)
 800235e:	4924      	ldr	r1, [pc, #144]	; (80023f0 <HAL_RCC_OscConfig+0x62c>)
 8002360:	400a      	ands	r2, r1
 8002362:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002364:	f7fe fca6 	bl	8000cb4 <HAL_GetTick>
 8002368:	0003      	movs	r3, r0
 800236a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800236c:	e008      	b.n	8002380 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800236e:	f7fe fca1 	bl	8000cb4 <HAL_GetTick>
 8002372:	0002      	movs	r2, r0
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e02c      	b.n	80023da <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002380:	4b18      	ldr	r3, [pc, #96]	; (80023e4 <HAL_RCC_OscConfig+0x620>)
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	2380      	movs	r3, #128	; 0x80
 8002386:	049b      	lsls	r3, r3, #18
 8002388:	4013      	ands	r3, r2
 800238a:	d1f0      	bne.n	800236e <HAL_RCC_OscConfig+0x5aa>
 800238c:	e024      	b.n	80023d8 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a1b      	ldr	r3, [r3, #32]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d101      	bne.n	800239a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e01f      	b.n	80023da <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800239a:	4b12      	ldr	r3, [pc, #72]	; (80023e4 <HAL_RCC_OscConfig+0x620>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80023a0:	4b10      	ldr	r3, [pc, #64]	; (80023e4 <HAL_RCC_OscConfig+0x620>)
 80023a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	2380      	movs	r3, #128	; 0x80
 80023aa:	025b      	lsls	r3, r3, #9
 80023ac:	401a      	ands	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d10e      	bne.n	80023d4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	220f      	movs	r2, #15
 80023ba:	401a      	ands	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d107      	bne.n	80023d4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80023c4:	697a      	ldr	r2, [r7, #20]
 80023c6:	23f0      	movs	r3, #240	; 0xf0
 80023c8:	039b      	lsls	r3, r3, #14
 80023ca:	401a      	ands	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d001      	beq.n	80023d8 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e000      	b.n	80023da <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	0018      	movs	r0, r3
 80023dc:	46bd      	mov	sp, r7
 80023de:	b008      	add	sp, #32
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	46c0      	nop			; (mov r8, r8)
 80023e4:	40021000 	.word	0x40021000
 80023e8:	00001388 	.word	0x00001388
 80023ec:	efffffff 	.word	0xefffffff
 80023f0:	feffffff 	.word	0xfeffffff
 80023f4:	ffc2ffff 	.word	0xffc2ffff

080023f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d101      	bne.n	800240c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e0b3      	b.n	8002574 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800240c:	4b5b      	ldr	r3, [pc, #364]	; (800257c <HAL_RCC_ClockConfig+0x184>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2201      	movs	r2, #1
 8002412:	4013      	ands	r3, r2
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	429a      	cmp	r2, r3
 8002418:	d911      	bls.n	800243e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800241a:	4b58      	ldr	r3, [pc, #352]	; (800257c <HAL_RCC_ClockConfig+0x184>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2201      	movs	r2, #1
 8002420:	4393      	bics	r3, r2
 8002422:	0019      	movs	r1, r3
 8002424:	4b55      	ldr	r3, [pc, #340]	; (800257c <HAL_RCC_ClockConfig+0x184>)
 8002426:	683a      	ldr	r2, [r7, #0]
 8002428:	430a      	orrs	r2, r1
 800242a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800242c:	4b53      	ldr	r3, [pc, #332]	; (800257c <HAL_RCC_ClockConfig+0x184>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2201      	movs	r2, #1
 8002432:	4013      	ands	r3, r2
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	429a      	cmp	r2, r3
 8002438:	d001      	beq.n	800243e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e09a      	b.n	8002574 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2202      	movs	r2, #2
 8002444:	4013      	ands	r3, r2
 8002446:	d015      	beq.n	8002474 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2204      	movs	r2, #4
 800244e:	4013      	ands	r3, r2
 8002450:	d006      	beq.n	8002460 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002452:	4b4b      	ldr	r3, [pc, #300]	; (8002580 <HAL_RCC_ClockConfig+0x188>)
 8002454:	685a      	ldr	r2, [r3, #4]
 8002456:	4b4a      	ldr	r3, [pc, #296]	; (8002580 <HAL_RCC_ClockConfig+0x188>)
 8002458:	21e0      	movs	r1, #224	; 0xe0
 800245a:	00c9      	lsls	r1, r1, #3
 800245c:	430a      	orrs	r2, r1
 800245e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002460:	4b47      	ldr	r3, [pc, #284]	; (8002580 <HAL_RCC_ClockConfig+0x188>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	22f0      	movs	r2, #240	; 0xf0
 8002466:	4393      	bics	r3, r2
 8002468:	0019      	movs	r1, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	689a      	ldr	r2, [r3, #8]
 800246e:	4b44      	ldr	r3, [pc, #272]	; (8002580 <HAL_RCC_ClockConfig+0x188>)
 8002470:	430a      	orrs	r2, r1
 8002472:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2201      	movs	r2, #1
 800247a:	4013      	ands	r3, r2
 800247c:	d040      	beq.n	8002500 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d107      	bne.n	8002496 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002486:	4b3e      	ldr	r3, [pc, #248]	; (8002580 <HAL_RCC_ClockConfig+0x188>)
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	2380      	movs	r3, #128	; 0x80
 800248c:	029b      	lsls	r3, r3, #10
 800248e:	4013      	ands	r3, r2
 8002490:	d114      	bne.n	80024bc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e06e      	b.n	8002574 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	2b02      	cmp	r3, #2
 800249c:	d107      	bne.n	80024ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800249e:	4b38      	ldr	r3, [pc, #224]	; (8002580 <HAL_RCC_ClockConfig+0x188>)
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	2380      	movs	r3, #128	; 0x80
 80024a4:	049b      	lsls	r3, r3, #18
 80024a6:	4013      	ands	r3, r2
 80024a8:	d108      	bne.n	80024bc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e062      	b.n	8002574 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ae:	4b34      	ldr	r3, [pc, #208]	; (8002580 <HAL_RCC_ClockConfig+0x188>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2202      	movs	r2, #2
 80024b4:	4013      	ands	r3, r2
 80024b6:	d101      	bne.n	80024bc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e05b      	b.n	8002574 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024bc:	4b30      	ldr	r3, [pc, #192]	; (8002580 <HAL_RCC_ClockConfig+0x188>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	2203      	movs	r2, #3
 80024c2:	4393      	bics	r3, r2
 80024c4:	0019      	movs	r1, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685a      	ldr	r2, [r3, #4]
 80024ca:	4b2d      	ldr	r3, [pc, #180]	; (8002580 <HAL_RCC_ClockConfig+0x188>)
 80024cc:	430a      	orrs	r2, r1
 80024ce:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024d0:	f7fe fbf0 	bl	8000cb4 <HAL_GetTick>
 80024d4:	0003      	movs	r3, r0
 80024d6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024d8:	e009      	b.n	80024ee <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024da:	f7fe fbeb 	bl	8000cb4 <HAL_GetTick>
 80024de:	0002      	movs	r2, r0
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	4a27      	ldr	r2, [pc, #156]	; (8002584 <HAL_RCC_ClockConfig+0x18c>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e042      	b.n	8002574 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ee:	4b24      	ldr	r3, [pc, #144]	; (8002580 <HAL_RCC_ClockConfig+0x188>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	220c      	movs	r2, #12
 80024f4:	401a      	ands	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d1ec      	bne.n	80024da <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002500:	4b1e      	ldr	r3, [pc, #120]	; (800257c <HAL_RCC_ClockConfig+0x184>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2201      	movs	r2, #1
 8002506:	4013      	ands	r3, r2
 8002508:	683a      	ldr	r2, [r7, #0]
 800250a:	429a      	cmp	r2, r3
 800250c:	d211      	bcs.n	8002532 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800250e:	4b1b      	ldr	r3, [pc, #108]	; (800257c <HAL_RCC_ClockConfig+0x184>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2201      	movs	r2, #1
 8002514:	4393      	bics	r3, r2
 8002516:	0019      	movs	r1, r3
 8002518:	4b18      	ldr	r3, [pc, #96]	; (800257c <HAL_RCC_ClockConfig+0x184>)
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	430a      	orrs	r2, r1
 800251e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002520:	4b16      	ldr	r3, [pc, #88]	; (800257c <HAL_RCC_ClockConfig+0x184>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2201      	movs	r2, #1
 8002526:	4013      	ands	r3, r2
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	429a      	cmp	r2, r3
 800252c:	d001      	beq.n	8002532 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e020      	b.n	8002574 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2204      	movs	r2, #4
 8002538:	4013      	ands	r3, r2
 800253a:	d009      	beq.n	8002550 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800253c:	4b10      	ldr	r3, [pc, #64]	; (8002580 <HAL_RCC_ClockConfig+0x188>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	4a11      	ldr	r2, [pc, #68]	; (8002588 <HAL_RCC_ClockConfig+0x190>)
 8002542:	4013      	ands	r3, r2
 8002544:	0019      	movs	r1, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	68da      	ldr	r2, [r3, #12]
 800254a:	4b0d      	ldr	r3, [pc, #52]	; (8002580 <HAL_RCC_ClockConfig+0x188>)
 800254c:	430a      	orrs	r2, r1
 800254e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002550:	f000 f820 	bl	8002594 <HAL_RCC_GetSysClockFreq>
 8002554:	0001      	movs	r1, r0
 8002556:	4b0a      	ldr	r3, [pc, #40]	; (8002580 <HAL_RCC_ClockConfig+0x188>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	091b      	lsrs	r3, r3, #4
 800255c:	220f      	movs	r2, #15
 800255e:	4013      	ands	r3, r2
 8002560:	4a0a      	ldr	r2, [pc, #40]	; (800258c <HAL_RCC_ClockConfig+0x194>)
 8002562:	5cd3      	ldrb	r3, [r2, r3]
 8002564:	000a      	movs	r2, r1
 8002566:	40da      	lsrs	r2, r3
 8002568:	4b09      	ldr	r3, [pc, #36]	; (8002590 <HAL_RCC_ClockConfig+0x198>)
 800256a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800256c:	2000      	movs	r0, #0
 800256e:	f7fe fb5b 	bl	8000c28 <HAL_InitTick>
  
  return HAL_OK;
 8002572:	2300      	movs	r3, #0
}
 8002574:	0018      	movs	r0, r3
 8002576:	46bd      	mov	sp, r7
 8002578:	b004      	add	sp, #16
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40022000 	.word	0x40022000
 8002580:	40021000 	.word	0x40021000
 8002584:	00001388 	.word	0x00001388
 8002588:	fffff8ff 	.word	0xfffff8ff
 800258c:	08004be8 	.word	0x08004be8
 8002590:	20000000 	.word	0x20000000

08002594 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002594:	b590      	push	{r4, r7, lr}
 8002596:	b08f      	sub	sp, #60	; 0x3c
 8002598:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800259a:	2314      	movs	r3, #20
 800259c:	18fb      	adds	r3, r7, r3
 800259e:	4a2b      	ldr	r2, [pc, #172]	; (800264c <HAL_RCC_GetSysClockFreq+0xb8>)
 80025a0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80025a2:	c313      	stmia	r3!, {r0, r1, r4}
 80025a4:	6812      	ldr	r2, [r2, #0]
 80025a6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80025a8:	1d3b      	adds	r3, r7, #4
 80025aa:	4a29      	ldr	r2, [pc, #164]	; (8002650 <HAL_RCC_GetSysClockFreq+0xbc>)
 80025ac:	ca13      	ldmia	r2!, {r0, r1, r4}
 80025ae:	c313      	stmia	r3!, {r0, r1, r4}
 80025b0:	6812      	ldr	r2, [r2, #0]
 80025b2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025b4:	2300      	movs	r3, #0
 80025b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025b8:	2300      	movs	r3, #0
 80025ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80025bc:	2300      	movs	r3, #0
 80025be:	637b      	str	r3, [r7, #52]	; 0x34
 80025c0:	2300      	movs	r3, #0
 80025c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80025c4:	2300      	movs	r3, #0
 80025c6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80025c8:	4b22      	ldr	r3, [pc, #136]	; (8002654 <HAL_RCC_GetSysClockFreq+0xc0>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d0:	220c      	movs	r2, #12
 80025d2:	4013      	ands	r3, r2
 80025d4:	2b04      	cmp	r3, #4
 80025d6:	d002      	beq.n	80025de <HAL_RCC_GetSysClockFreq+0x4a>
 80025d8:	2b08      	cmp	r3, #8
 80025da:	d003      	beq.n	80025e4 <HAL_RCC_GetSysClockFreq+0x50>
 80025dc:	e02d      	b.n	800263a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025de:	4b1e      	ldr	r3, [pc, #120]	; (8002658 <HAL_RCC_GetSysClockFreq+0xc4>)
 80025e0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80025e2:	e02d      	b.n	8002640 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80025e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e6:	0c9b      	lsrs	r3, r3, #18
 80025e8:	220f      	movs	r2, #15
 80025ea:	4013      	ands	r3, r2
 80025ec:	2214      	movs	r2, #20
 80025ee:	18ba      	adds	r2, r7, r2
 80025f0:	5cd3      	ldrb	r3, [r2, r3]
 80025f2:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80025f4:	4b17      	ldr	r3, [pc, #92]	; (8002654 <HAL_RCC_GetSysClockFreq+0xc0>)
 80025f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f8:	220f      	movs	r2, #15
 80025fa:	4013      	ands	r3, r2
 80025fc:	1d3a      	adds	r2, r7, #4
 80025fe:	5cd3      	ldrb	r3, [r2, r3]
 8002600:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002602:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002604:	2380      	movs	r3, #128	; 0x80
 8002606:	025b      	lsls	r3, r3, #9
 8002608:	4013      	ands	r3, r2
 800260a:	d009      	beq.n	8002620 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800260c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800260e:	4812      	ldr	r0, [pc, #72]	; (8002658 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002610:	f7fd fd84 	bl	800011c <__udivsi3>
 8002614:	0003      	movs	r3, r0
 8002616:	001a      	movs	r2, r3
 8002618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261a:	4353      	muls	r3, r2
 800261c:	637b      	str	r3, [r7, #52]	; 0x34
 800261e:	e009      	b.n	8002634 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002620:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002622:	000a      	movs	r2, r1
 8002624:	0152      	lsls	r2, r2, #5
 8002626:	1a52      	subs	r2, r2, r1
 8002628:	0193      	lsls	r3, r2, #6
 800262a:	1a9b      	subs	r3, r3, r2
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	185b      	adds	r3, r3, r1
 8002630:	021b      	lsls	r3, r3, #8
 8002632:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002636:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002638:	e002      	b.n	8002640 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800263a:	4b07      	ldr	r3, [pc, #28]	; (8002658 <HAL_RCC_GetSysClockFreq+0xc4>)
 800263c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800263e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002642:	0018      	movs	r0, r3
 8002644:	46bd      	mov	sp, r7
 8002646:	b00f      	add	sp, #60	; 0x3c
 8002648:	bd90      	pop	{r4, r7, pc}
 800264a:	46c0      	nop			; (mov r8, r8)
 800264c:	08004bc8 	.word	0x08004bc8
 8002650:	08004bd8 	.word	0x08004bd8
 8002654:	40021000 	.word	0x40021000
 8002658:	007a1200 	.word	0x007a1200

0800265c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002660:	4b02      	ldr	r3, [pc, #8]	; (800266c <HAL_RCC_GetHCLKFreq+0x10>)
 8002662:	681b      	ldr	r3, [r3, #0]
}
 8002664:	0018      	movs	r0, r3
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	46c0      	nop			; (mov r8, r8)
 800266c:	20000000 	.word	0x20000000

08002670 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002674:	f7ff fff2 	bl	800265c <HAL_RCC_GetHCLKFreq>
 8002678:	0001      	movs	r1, r0
 800267a:	4b06      	ldr	r3, [pc, #24]	; (8002694 <HAL_RCC_GetPCLK1Freq+0x24>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	0a1b      	lsrs	r3, r3, #8
 8002680:	2207      	movs	r2, #7
 8002682:	4013      	ands	r3, r2
 8002684:	4a04      	ldr	r2, [pc, #16]	; (8002698 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002686:	5cd3      	ldrb	r3, [r2, r3]
 8002688:	40d9      	lsrs	r1, r3
 800268a:	000b      	movs	r3, r1
}    
 800268c:	0018      	movs	r0, r3
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	46c0      	nop			; (mov r8, r8)
 8002694:	40021000 	.word	0x40021000
 8002698:	08004bf8 	.word	0x08004bf8

0800269c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026a4:	2300      	movs	r3, #0
 80026a6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80026a8:	2300      	movs	r3, #0
 80026aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	2380      	movs	r3, #128	; 0x80
 80026b2:	025b      	lsls	r3, r3, #9
 80026b4:	4013      	ands	r3, r2
 80026b6:	d100      	bne.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80026b8:	e08e      	b.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80026ba:	2017      	movs	r0, #23
 80026bc:	183b      	adds	r3, r7, r0
 80026be:	2200      	movs	r2, #0
 80026c0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026c2:	4b5f      	ldr	r3, [pc, #380]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80026c4:	69da      	ldr	r2, [r3, #28]
 80026c6:	2380      	movs	r3, #128	; 0x80
 80026c8:	055b      	lsls	r3, r3, #21
 80026ca:	4013      	ands	r3, r2
 80026cc:	d110      	bne.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80026ce:	4b5c      	ldr	r3, [pc, #368]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80026d0:	69da      	ldr	r2, [r3, #28]
 80026d2:	4b5b      	ldr	r3, [pc, #364]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80026d4:	2180      	movs	r1, #128	; 0x80
 80026d6:	0549      	lsls	r1, r1, #21
 80026d8:	430a      	orrs	r2, r1
 80026da:	61da      	str	r2, [r3, #28]
 80026dc:	4b58      	ldr	r3, [pc, #352]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80026de:	69da      	ldr	r2, [r3, #28]
 80026e0:	2380      	movs	r3, #128	; 0x80
 80026e2:	055b      	lsls	r3, r3, #21
 80026e4:	4013      	ands	r3, r2
 80026e6:	60bb      	str	r3, [r7, #8]
 80026e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ea:	183b      	adds	r3, r7, r0
 80026ec:	2201      	movs	r2, #1
 80026ee:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f0:	4b54      	ldr	r3, [pc, #336]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	2380      	movs	r3, #128	; 0x80
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	4013      	ands	r3, r2
 80026fa:	d11a      	bne.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026fc:	4b51      	ldr	r3, [pc, #324]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	4b50      	ldr	r3, [pc, #320]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002702:	2180      	movs	r1, #128	; 0x80
 8002704:	0049      	lsls	r1, r1, #1
 8002706:	430a      	orrs	r2, r1
 8002708:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800270a:	f7fe fad3 	bl	8000cb4 <HAL_GetTick>
 800270e:	0003      	movs	r3, r0
 8002710:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002712:	e008      	b.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002714:	f7fe face 	bl	8000cb4 <HAL_GetTick>
 8002718:	0002      	movs	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b64      	cmp	r3, #100	; 0x64
 8002720:	d901      	bls.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e087      	b.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002726:	4b47      	ldr	r3, [pc, #284]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	2380      	movs	r3, #128	; 0x80
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	4013      	ands	r3, r2
 8002730:	d0f0      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002732:	4b43      	ldr	r3, [pc, #268]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002734:	6a1a      	ldr	r2, [r3, #32]
 8002736:	23c0      	movs	r3, #192	; 0xc0
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	4013      	ands	r3, r2
 800273c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d034      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	23c0      	movs	r3, #192	; 0xc0
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	4013      	ands	r3, r2
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	429a      	cmp	r2, r3
 8002752:	d02c      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002754:	4b3a      	ldr	r3, [pc, #232]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002756:	6a1b      	ldr	r3, [r3, #32]
 8002758:	4a3b      	ldr	r2, [pc, #236]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800275a:	4013      	ands	r3, r2
 800275c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800275e:	4b38      	ldr	r3, [pc, #224]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002760:	6a1a      	ldr	r2, [r3, #32]
 8002762:	4b37      	ldr	r3, [pc, #220]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002764:	2180      	movs	r1, #128	; 0x80
 8002766:	0249      	lsls	r1, r1, #9
 8002768:	430a      	orrs	r2, r1
 800276a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800276c:	4b34      	ldr	r3, [pc, #208]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800276e:	6a1a      	ldr	r2, [r3, #32]
 8002770:	4b33      	ldr	r3, [pc, #204]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002772:	4936      	ldr	r1, [pc, #216]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002774:	400a      	ands	r2, r1
 8002776:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002778:	4b31      	ldr	r3, [pc, #196]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2201      	movs	r2, #1
 8002782:	4013      	ands	r3, r2
 8002784:	d013      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002786:	f7fe fa95 	bl	8000cb4 <HAL_GetTick>
 800278a:	0003      	movs	r3, r0
 800278c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800278e:	e009      	b.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002790:	f7fe fa90 	bl	8000cb4 <HAL_GetTick>
 8002794:	0002      	movs	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	4a2d      	ldr	r2, [pc, #180]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d901      	bls.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e048      	b.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a4:	4b26      	ldr	r3, [pc, #152]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	2202      	movs	r2, #2
 80027aa:	4013      	ands	r3, r2
 80027ac:	d0f0      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027ae:	4b24      	ldr	r3, [pc, #144]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80027b0:	6a1b      	ldr	r3, [r3, #32]
 80027b2:	4a25      	ldr	r2, [pc, #148]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027b4:	4013      	ands	r3, r2
 80027b6:	0019      	movs	r1, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685a      	ldr	r2, [r3, #4]
 80027bc:	4b20      	ldr	r3, [pc, #128]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80027be:	430a      	orrs	r2, r1
 80027c0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80027c2:	2317      	movs	r3, #23
 80027c4:	18fb      	adds	r3, r7, r3
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d105      	bne.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027cc:	4b1c      	ldr	r3, [pc, #112]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80027ce:	69da      	ldr	r2, [r3, #28]
 80027d0:	4b1b      	ldr	r3, [pc, #108]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80027d2:	4920      	ldr	r1, [pc, #128]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80027d4:	400a      	ands	r2, r1
 80027d6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2201      	movs	r2, #1
 80027de:	4013      	ands	r3, r2
 80027e0:	d009      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027e2:	4b17      	ldr	r3, [pc, #92]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	2203      	movs	r2, #3
 80027e8:	4393      	bics	r3, r2
 80027ea:	0019      	movs	r1, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689a      	ldr	r2, [r3, #8]
 80027f0:	4b13      	ldr	r3, [pc, #76]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80027f2:	430a      	orrs	r2, r1
 80027f4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2220      	movs	r2, #32
 80027fc:	4013      	ands	r3, r2
 80027fe:	d009      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002800:	4b0f      	ldr	r3, [pc, #60]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002804:	2210      	movs	r2, #16
 8002806:	4393      	bics	r3, r2
 8002808:	0019      	movs	r1, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	68da      	ldr	r2, [r3, #12]
 800280e:	4b0c      	ldr	r3, [pc, #48]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002810:	430a      	orrs	r2, r1
 8002812:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	2380      	movs	r3, #128	; 0x80
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	4013      	ands	r3, r2
 800281e:	d009      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002820:	4b07      	ldr	r3, [pc, #28]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002824:	2240      	movs	r2, #64	; 0x40
 8002826:	4393      	bics	r3, r2
 8002828:	0019      	movs	r1, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	691a      	ldr	r2, [r3, #16]
 800282e:	4b04      	ldr	r3, [pc, #16]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002830:	430a      	orrs	r2, r1
 8002832:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	0018      	movs	r0, r3
 8002838:	46bd      	mov	sp, r7
 800283a:	b006      	add	sp, #24
 800283c:	bd80      	pop	{r7, pc}
 800283e:	46c0      	nop			; (mov r8, r8)
 8002840:	40021000 	.word	0x40021000
 8002844:	40007000 	.word	0x40007000
 8002848:	fffffcff 	.word	0xfffffcff
 800284c:	fffeffff 	.word	0xfffeffff
 8002850:	00001388 	.word	0x00001388
 8002854:	efffffff 	.word	0xefffffff

08002858 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e044      	b.n	80028f4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800286e:	2b00      	cmp	r3, #0
 8002870:	d107      	bne.n	8002882 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2274      	movs	r2, #116	; 0x74
 8002876:	2100      	movs	r1, #0
 8002878:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	0018      	movs	r0, r3
 800287e:	f7fe f845 	bl	800090c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2224      	movs	r2, #36	; 0x24
 8002886:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2101      	movs	r1, #1
 8002894:	438a      	bics	r2, r1
 8002896:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	0018      	movs	r0, r3
 800289c:	f000 fbce 	bl	800303c <UART_SetConfig>
 80028a0:	0003      	movs	r3, r0
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d101      	bne.n	80028aa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e024      	b.n	80028f4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d003      	beq.n	80028ba <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	0018      	movs	r0, r3
 80028b6:	f000 fd01 	bl	80032bc <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	490d      	ldr	r1, [pc, #52]	; (80028fc <HAL_UART_Init+0xa4>)
 80028c6:	400a      	ands	r2, r1
 80028c8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	212a      	movs	r1, #42	; 0x2a
 80028d6:	438a      	bics	r2, r1
 80028d8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2101      	movs	r1, #1
 80028e6:	430a      	orrs	r2, r1
 80028e8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	0018      	movs	r0, r3
 80028ee:	f000 fd99 	bl	8003424 <UART_CheckIdleState>
 80028f2:	0003      	movs	r3, r0
}
 80028f4:	0018      	movs	r0, r3
 80028f6:	46bd      	mov	sp, r7
 80028f8:	b002      	add	sp, #8
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	ffffb7ff 	.word	0xffffb7ff

08002900 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b08a      	sub	sp, #40	; 0x28
 8002904:	af02      	add	r7, sp, #8
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	603b      	str	r3, [r7, #0]
 800290c:	1dbb      	adds	r3, r7, #6
 800290e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002914:	2b20      	cmp	r3, #32
 8002916:	d000      	beq.n	800291a <HAL_UART_Transmit+0x1a>
 8002918:	e096      	b.n	8002a48 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d003      	beq.n	8002928 <HAL_UART_Transmit+0x28>
 8002920:	1dbb      	adds	r3, r7, #6
 8002922:	881b      	ldrh	r3, [r3, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d101      	bne.n	800292c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e08e      	b.n	8002a4a <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	689a      	ldr	r2, [r3, #8]
 8002930:	2380      	movs	r3, #128	; 0x80
 8002932:	015b      	lsls	r3, r3, #5
 8002934:	429a      	cmp	r2, r3
 8002936:	d109      	bne.n	800294c <HAL_UART_Transmit+0x4c>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d105      	bne.n	800294c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	2201      	movs	r2, #1
 8002944:	4013      	ands	r3, r2
 8002946:	d001      	beq.n	800294c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e07e      	b.n	8002a4a <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2274      	movs	r2, #116	; 0x74
 8002950:	5c9b      	ldrb	r3, [r3, r2]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d101      	bne.n	800295a <HAL_UART_Transmit+0x5a>
 8002956:	2302      	movs	r3, #2
 8002958:	e077      	b.n	8002a4a <HAL_UART_Transmit+0x14a>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2274      	movs	r2, #116	; 0x74
 800295e:	2101      	movs	r1, #1
 8002960:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2280      	movs	r2, #128	; 0x80
 8002966:	2100      	movs	r1, #0
 8002968:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2221      	movs	r2, #33	; 0x21
 800296e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002970:	f7fe f9a0 	bl	8000cb4 <HAL_GetTick>
 8002974:	0003      	movs	r3, r0
 8002976:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	1dba      	adds	r2, r7, #6
 800297c:	2150      	movs	r1, #80	; 0x50
 800297e:	8812      	ldrh	r2, [r2, #0]
 8002980:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	1dba      	adds	r2, r7, #6
 8002986:	2152      	movs	r1, #82	; 0x52
 8002988:	8812      	ldrh	r2, [r2, #0]
 800298a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	2380      	movs	r3, #128	; 0x80
 8002992:	015b      	lsls	r3, r3, #5
 8002994:	429a      	cmp	r2, r3
 8002996:	d108      	bne.n	80029aa <HAL_UART_Transmit+0xaa>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d104      	bne.n	80029aa <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	61bb      	str	r3, [r7, #24]
 80029a8:	e003      	b.n	80029b2 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029ae:	2300      	movs	r3, #0
 80029b0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2274      	movs	r2, #116	; 0x74
 80029b6:	2100      	movs	r1, #0
 80029b8:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80029ba:	e02d      	b.n	8002a18 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029bc:	697a      	ldr	r2, [r7, #20]
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	0013      	movs	r3, r2
 80029c6:	2200      	movs	r2, #0
 80029c8:	2180      	movs	r1, #128	; 0x80
 80029ca:	f000 fd73 	bl	80034b4 <UART_WaitOnFlagUntilTimeout>
 80029ce:	1e03      	subs	r3, r0, #0
 80029d0:	d001      	beq.n	80029d6 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e039      	b.n	8002a4a <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d10b      	bne.n	80029f4 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	881a      	ldrh	r2, [r3, #0]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	05d2      	lsls	r2, r2, #23
 80029e6:	0dd2      	lsrs	r2, r2, #23
 80029e8:	b292      	uxth	r2, r2
 80029ea:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	3302      	adds	r3, #2
 80029f0:	61bb      	str	r3, [r7, #24]
 80029f2:	e008      	b.n	8002a06 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	781a      	ldrb	r2, [r3, #0]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	b292      	uxth	r2, r2
 80029fe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	3301      	adds	r3, #1
 8002a04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2252      	movs	r2, #82	; 0x52
 8002a0a:	5a9b      	ldrh	r3, [r3, r2]
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	b299      	uxth	r1, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2252      	movs	r2, #82	; 0x52
 8002a16:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2252      	movs	r2, #82	; 0x52
 8002a1c:	5a9b      	ldrh	r3, [r3, r2]
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1cb      	bne.n	80029bc <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	9300      	str	r3, [sp, #0]
 8002a2c:	0013      	movs	r3, r2
 8002a2e:	2200      	movs	r2, #0
 8002a30:	2140      	movs	r1, #64	; 0x40
 8002a32:	f000 fd3f 	bl	80034b4 <UART_WaitOnFlagUntilTimeout>
 8002a36:	1e03      	subs	r3, r0, #0
 8002a38:	d001      	beq.n	8002a3e <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e005      	b.n	8002a4a <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2220      	movs	r2, #32
 8002a42:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002a44:	2300      	movs	r3, #0
 8002a46:	e000      	b.n	8002a4a <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002a48:	2302      	movs	r3, #2
  }
}
 8002a4a:	0018      	movs	r0, r3
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	b008      	add	sp, #32
 8002a50:	bd80      	pop	{r7, pc}
	...

08002a54 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a54:	b590      	push	{r4, r7, lr}
 8002a56:	b0ab      	sub	sp, #172	; 0xac
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	69db      	ldr	r3, [r3, #28]
 8002a62:	22a4      	movs	r2, #164	; 0xa4
 8002a64:	18b9      	adds	r1, r7, r2
 8002a66:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	20a0      	movs	r0, #160	; 0xa0
 8002a70:	1839      	adds	r1, r7, r0
 8002a72:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	219c      	movs	r1, #156	; 0x9c
 8002a7c:	1879      	adds	r1, r7, r1
 8002a7e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002a80:	0011      	movs	r1, r2
 8002a82:	18bb      	adds	r3, r7, r2
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a99      	ldr	r2, [pc, #612]	; (8002cec <HAL_UART_IRQHandler+0x298>)
 8002a88:	4013      	ands	r3, r2
 8002a8a:	2298      	movs	r2, #152	; 0x98
 8002a8c:	18bc      	adds	r4, r7, r2
 8002a8e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002a90:	18bb      	adds	r3, r7, r2
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d114      	bne.n	8002ac2 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002a98:	187b      	adds	r3, r7, r1
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2220      	movs	r2, #32
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	d00f      	beq.n	8002ac2 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002aa2:	183b      	adds	r3, r7, r0
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2220      	movs	r2, #32
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	d00a      	beq.n	8002ac2 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d100      	bne.n	8002ab6 <HAL_UART_IRQHandler+0x62>
 8002ab4:	e296      	b.n	8002fe4 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	0010      	movs	r0, r2
 8002abe:	4798      	blx	r3
      }
      return;
 8002ac0:	e290      	b.n	8002fe4 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002ac2:	2398      	movs	r3, #152	; 0x98
 8002ac4:	18fb      	adds	r3, r7, r3
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d100      	bne.n	8002ace <HAL_UART_IRQHandler+0x7a>
 8002acc:	e114      	b.n	8002cf8 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002ace:	239c      	movs	r3, #156	; 0x9c
 8002ad0:	18fb      	adds	r3, r7, r3
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	d106      	bne.n	8002ae8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002ada:	23a0      	movs	r3, #160	; 0xa0
 8002adc:	18fb      	adds	r3, r7, r3
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a83      	ldr	r2, [pc, #524]	; (8002cf0 <HAL_UART_IRQHandler+0x29c>)
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	d100      	bne.n	8002ae8 <HAL_UART_IRQHandler+0x94>
 8002ae6:	e107      	b.n	8002cf8 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002ae8:	23a4      	movs	r3, #164	; 0xa4
 8002aea:	18fb      	adds	r3, r7, r3
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2201      	movs	r2, #1
 8002af0:	4013      	ands	r3, r2
 8002af2:	d012      	beq.n	8002b1a <HAL_UART_IRQHandler+0xc6>
 8002af4:	23a0      	movs	r3, #160	; 0xa0
 8002af6:	18fb      	adds	r3, r7, r3
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	2380      	movs	r3, #128	; 0x80
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	4013      	ands	r3, r2
 8002b00:	d00b      	beq.n	8002b1a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2201      	movs	r2, #1
 8002b08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2280      	movs	r2, #128	; 0x80
 8002b0e:	589b      	ldr	r3, [r3, r2]
 8002b10:	2201      	movs	r2, #1
 8002b12:	431a      	orrs	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2180      	movs	r1, #128	; 0x80
 8002b18:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b1a:	23a4      	movs	r3, #164	; 0xa4
 8002b1c:	18fb      	adds	r3, r7, r3
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2202      	movs	r2, #2
 8002b22:	4013      	ands	r3, r2
 8002b24:	d011      	beq.n	8002b4a <HAL_UART_IRQHandler+0xf6>
 8002b26:	239c      	movs	r3, #156	; 0x9c
 8002b28:	18fb      	adds	r3, r7, r3
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	4013      	ands	r3, r2
 8002b30:	d00b      	beq.n	8002b4a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2202      	movs	r2, #2
 8002b38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2280      	movs	r2, #128	; 0x80
 8002b3e:	589b      	ldr	r3, [r3, r2]
 8002b40:	2204      	movs	r2, #4
 8002b42:	431a      	orrs	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2180      	movs	r1, #128	; 0x80
 8002b48:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b4a:	23a4      	movs	r3, #164	; 0xa4
 8002b4c:	18fb      	adds	r3, r7, r3
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2204      	movs	r2, #4
 8002b52:	4013      	ands	r3, r2
 8002b54:	d011      	beq.n	8002b7a <HAL_UART_IRQHandler+0x126>
 8002b56:	239c      	movs	r3, #156	; 0x9c
 8002b58:	18fb      	adds	r3, r7, r3
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	4013      	ands	r3, r2
 8002b60:	d00b      	beq.n	8002b7a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2204      	movs	r2, #4
 8002b68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2280      	movs	r2, #128	; 0x80
 8002b6e:	589b      	ldr	r3, [r3, r2]
 8002b70:	2202      	movs	r2, #2
 8002b72:	431a      	orrs	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2180      	movs	r1, #128	; 0x80
 8002b78:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002b7a:	23a4      	movs	r3, #164	; 0xa4
 8002b7c:	18fb      	adds	r3, r7, r3
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2208      	movs	r2, #8
 8002b82:	4013      	ands	r3, r2
 8002b84:	d017      	beq.n	8002bb6 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002b86:	23a0      	movs	r3, #160	; 0xa0
 8002b88:	18fb      	adds	r3, r7, r3
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2220      	movs	r2, #32
 8002b8e:	4013      	ands	r3, r2
 8002b90:	d105      	bne.n	8002b9e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002b92:	239c      	movs	r3, #156	; 0x9c
 8002b94:	18fb      	adds	r3, r7, r3
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002b9c:	d00b      	beq.n	8002bb6 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2208      	movs	r2, #8
 8002ba4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2280      	movs	r2, #128	; 0x80
 8002baa:	589b      	ldr	r3, [r3, r2]
 8002bac:	2208      	movs	r2, #8
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2180      	movs	r1, #128	; 0x80
 8002bb4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002bb6:	23a4      	movs	r3, #164	; 0xa4
 8002bb8:	18fb      	adds	r3, r7, r3
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	2380      	movs	r3, #128	; 0x80
 8002bbe:	011b      	lsls	r3, r3, #4
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	d013      	beq.n	8002bec <HAL_UART_IRQHandler+0x198>
 8002bc4:	23a0      	movs	r3, #160	; 0xa0
 8002bc6:	18fb      	adds	r3, r7, r3
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	2380      	movs	r3, #128	; 0x80
 8002bcc:	04db      	lsls	r3, r3, #19
 8002bce:	4013      	ands	r3, r2
 8002bd0:	d00c      	beq.n	8002bec <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2280      	movs	r2, #128	; 0x80
 8002bd8:	0112      	lsls	r2, r2, #4
 8002bda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2280      	movs	r2, #128	; 0x80
 8002be0:	589b      	ldr	r3, [r3, r2]
 8002be2:	2220      	movs	r2, #32
 8002be4:	431a      	orrs	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2180      	movs	r1, #128	; 0x80
 8002bea:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2280      	movs	r2, #128	; 0x80
 8002bf0:	589b      	ldr	r3, [r3, r2]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d100      	bne.n	8002bf8 <HAL_UART_IRQHandler+0x1a4>
 8002bf6:	e1f7      	b.n	8002fe8 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002bf8:	23a4      	movs	r3, #164	; 0xa4
 8002bfa:	18fb      	adds	r3, r7, r3
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2220      	movs	r2, #32
 8002c00:	4013      	ands	r3, r2
 8002c02:	d00e      	beq.n	8002c22 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002c04:	23a0      	movs	r3, #160	; 0xa0
 8002c06:	18fb      	adds	r3, r7, r3
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	d008      	beq.n	8002c22 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d004      	beq.n	8002c22 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	0010      	movs	r0, r2
 8002c20:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2280      	movs	r2, #128	; 0x80
 8002c26:	589b      	ldr	r3, [r3, r2]
 8002c28:	2194      	movs	r1, #148	; 0x94
 8002c2a:	187a      	adds	r2, r7, r1
 8002c2c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	2240      	movs	r2, #64	; 0x40
 8002c36:	4013      	ands	r3, r2
 8002c38:	2b40      	cmp	r3, #64	; 0x40
 8002c3a:	d004      	beq.n	8002c46 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002c3c:	187b      	adds	r3, r7, r1
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2228      	movs	r2, #40	; 0x28
 8002c42:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c44:	d047      	beq.n	8002cd6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	0018      	movs	r0, r3
 8002c4a:	f000 fcf7 	bl	800363c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	2240      	movs	r2, #64	; 0x40
 8002c56:	4013      	ands	r3, r2
 8002c58:	2b40      	cmp	r3, #64	; 0x40
 8002c5a:	d137      	bne.n	8002ccc <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c5c:	f3ef 8310 	mrs	r3, PRIMASK
 8002c60:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002c62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c64:	2090      	movs	r0, #144	; 0x90
 8002c66:	183a      	adds	r2, r7, r0
 8002c68:	6013      	str	r3, [r2, #0]
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c70:	f383 8810 	msr	PRIMASK, r3
}
 8002c74:	46c0      	nop			; (mov r8, r8)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	689a      	ldr	r2, [r3, #8]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2140      	movs	r1, #64	; 0x40
 8002c82:	438a      	bics	r2, r1
 8002c84:	609a      	str	r2, [r3, #8]
 8002c86:	183b      	adds	r3, r7, r0
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c8e:	f383 8810 	msr	PRIMASK, r3
}
 8002c92:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d012      	beq.n	8002cc2 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca0:	4a14      	ldr	r2, [pc, #80]	; (8002cf4 <HAL_UART_IRQHandler+0x2a0>)
 8002ca2:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca8:	0018      	movs	r0, r3
 8002caa:	f7fe f98f 	bl	8000fcc <HAL_DMA_Abort_IT>
 8002cae:	1e03      	subs	r3, r0, #0
 8002cb0:	d01a      	beq.n	8002ce8 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cc0:	e012      	b.n	8002ce8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	f000 f9a5 	bl	8003014 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cca:	e00d      	b.n	8002ce8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	0018      	movs	r0, r3
 8002cd0:	f000 f9a0 	bl	8003014 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cd4:	e008      	b.n	8002ce8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	0018      	movs	r0, r3
 8002cda:	f000 f99b 	bl	8003014 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2280      	movs	r2, #128	; 0x80
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002ce6:	e17f      	b.n	8002fe8 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ce8:	46c0      	nop			; (mov r8, r8)
    return;
 8002cea:	e17d      	b.n	8002fe8 <HAL_UART_IRQHandler+0x594>
 8002cec:	0000080f 	.word	0x0000080f
 8002cf0:	04000120 	.word	0x04000120
 8002cf4:	08003701 	.word	0x08003701

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d000      	beq.n	8002d02 <HAL_UART_IRQHandler+0x2ae>
 8002d00:	e131      	b.n	8002f66 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002d02:	23a4      	movs	r3, #164	; 0xa4
 8002d04:	18fb      	adds	r3, r7, r3
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2210      	movs	r2, #16
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	d100      	bne.n	8002d10 <HAL_UART_IRQHandler+0x2bc>
 8002d0e:	e12a      	b.n	8002f66 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002d10:	23a0      	movs	r3, #160	; 0xa0
 8002d12:	18fb      	adds	r3, r7, r3
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2210      	movs	r2, #16
 8002d18:	4013      	ands	r3, r2
 8002d1a:	d100      	bne.n	8002d1e <HAL_UART_IRQHandler+0x2ca>
 8002d1c:	e123      	b.n	8002f66 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2210      	movs	r2, #16
 8002d24:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	2240      	movs	r2, #64	; 0x40
 8002d2e:	4013      	ands	r3, r2
 8002d30:	2b40      	cmp	r3, #64	; 0x40
 8002d32:	d000      	beq.n	8002d36 <HAL_UART_IRQHandler+0x2e2>
 8002d34:	e09b      	b.n	8002e6e <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	685a      	ldr	r2, [r3, #4]
 8002d3e:	217e      	movs	r1, #126	; 0x7e
 8002d40:	187b      	adds	r3, r7, r1
 8002d42:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002d44:	187b      	adds	r3, r7, r1
 8002d46:	881b      	ldrh	r3, [r3, #0]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d100      	bne.n	8002d4e <HAL_UART_IRQHandler+0x2fa>
 8002d4c:	e14e      	b.n	8002fec <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2258      	movs	r2, #88	; 0x58
 8002d52:	5a9b      	ldrh	r3, [r3, r2]
 8002d54:	187a      	adds	r2, r7, r1
 8002d56:	8812      	ldrh	r2, [r2, #0]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d300      	bcc.n	8002d5e <HAL_UART_IRQHandler+0x30a>
 8002d5c:	e146      	b.n	8002fec <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	187a      	adds	r2, r7, r1
 8002d62:	215a      	movs	r1, #90	; 0x5a
 8002d64:	8812      	ldrh	r2, [r2, #0]
 8002d66:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	2b20      	cmp	r3, #32
 8002d70:	d06e      	beq.n	8002e50 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d72:	f3ef 8310 	mrs	r3, PRIMASK
 8002d76:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d7a:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d82:	f383 8810 	msr	PRIMASK, r3
}
 8002d86:	46c0      	nop			; (mov r8, r8)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	499a      	ldr	r1, [pc, #616]	; (8002ffc <HAL_UART_IRQHandler+0x5a8>)
 8002d94:	400a      	ands	r2, r1
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d9a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d9e:	f383 8810 	msr	PRIMASK, r3
}
 8002da2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002da4:	f3ef 8310 	mrs	r3, PRIMASK
 8002da8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002daa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dac:	677b      	str	r3, [r7, #116]	; 0x74
 8002dae:	2301      	movs	r3, #1
 8002db0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002db2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002db4:	f383 8810 	msr	PRIMASK, r3
}
 8002db8:	46c0      	nop			; (mov r8, r8)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	689a      	ldr	r2, [r3, #8]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	438a      	bics	r2, r1
 8002dc8:	609a      	str	r2, [r3, #8]
 8002dca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dcc:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dd0:	f383 8810 	msr	PRIMASK, r3
}
 8002dd4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dd6:	f3ef 8310 	mrs	r3, PRIMASK
 8002dda:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002ddc:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dde:	673b      	str	r3, [r7, #112]	; 0x70
 8002de0:	2301      	movs	r3, #1
 8002de2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002de4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002de6:	f383 8810 	msr	PRIMASK, r3
}
 8002dea:	46c0      	nop			; (mov r8, r8)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	689a      	ldr	r2, [r3, #8]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2140      	movs	r1, #64	; 0x40
 8002df8:	438a      	bics	r2, r1
 8002dfa:	609a      	str	r2, [r3, #8]
 8002dfc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002dfe:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e02:	f383 8810 	msr	PRIMASK, r3
}
 8002e06:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e14:	f3ef 8310 	mrs	r3, PRIMASK
 8002e18:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002e1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e1e:	2301      	movs	r3, #1
 8002e20:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e24:	f383 8810 	msr	PRIMASK, r3
}
 8002e28:	46c0      	nop			; (mov r8, r8)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2110      	movs	r1, #16
 8002e36:	438a      	bics	r2, r1
 8002e38:	601a      	str	r2, [r3, #0]
 8002e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e3c:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e40:	f383 8810 	msr	PRIMASK, r3
}
 8002e44:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4a:	0018      	movs	r0, r3
 8002e4c:	f7fe f886 	bl	8000f5c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2258      	movs	r2, #88	; 0x58
 8002e54:	5a9a      	ldrh	r2, [r3, r2]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	215a      	movs	r1, #90	; 0x5a
 8002e5a:	5a5b      	ldrh	r3, [r3, r1]
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	0011      	movs	r1, r2
 8002e66:	0018      	movs	r0, r3
 8002e68:	f000 f8dc 	bl	8003024 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e6c:	e0be      	b.n	8002fec <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2258      	movs	r2, #88	; 0x58
 8002e72:	5a99      	ldrh	r1, [r3, r2]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	225a      	movs	r2, #90	; 0x5a
 8002e78:	5a9b      	ldrh	r3, [r3, r2]
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	208e      	movs	r0, #142	; 0x8e
 8002e7e:	183b      	adds	r3, r7, r0
 8002e80:	1a8a      	subs	r2, r1, r2
 8002e82:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	225a      	movs	r2, #90	; 0x5a
 8002e88:	5a9b      	ldrh	r3, [r3, r2]
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d100      	bne.n	8002e92 <HAL_UART_IRQHandler+0x43e>
 8002e90:	e0ae      	b.n	8002ff0 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8002e92:	183b      	adds	r3, r7, r0
 8002e94:	881b      	ldrh	r3, [r3, #0]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d100      	bne.n	8002e9c <HAL_UART_IRQHandler+0x448>
 8002e9a:	e0a9      	b.n	8002ff0 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e9c:	f3ef 8310 	mrs	r3, PRIMASK
 8002ea0:	60fb      	str	r3, [r7, #12]
  return(result);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ea4:	2488      	movs	r4, #136	; 0x88
 8002ea6:	193a      	adds	r2, r7, r4
 8002ea8:	6013      	str	r3, [r2, #0]
 8002eaa:	2301      	movs	r3, #1
 8002eac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	f383 8810 	msr	PRIMASK, r3
}
 8002eb4:	46c0      	nop			; (mov r8, r8)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	494f      	ldr	r1, [pc, #316]	; (8003000 <HAL_UART_IRQHandler+0x5ac>)
 8002ec2:	400a      	ands	r2, r1
 8002ec4:	601a      	str	r2, [r3, #0]
 8002ec6:	193b      	adds	r3, r7, r4
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	f383 8810 	msr	PRIMASK, r3
}
 8002ed2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ed4:	f3ef 8310 	mrs	r3, PRIMASK
 8002ed8:	61bb      	str	r3, [r7, #24]
  return(result);
 8002eda:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002edc:	2484      	movs	r4, #132	; 0x84
 8002ede:	193a      	adds	r2, r7, r4
 8002ee0:	6013      	str	r3, [r2, #0]
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	f383 8810 	msr	PRIMASK, r3
}
 8002eec:	46c0      	nop			; (mov r8, r8)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2101      	movs	r1, #1
 8002efa:	438a      	bics	r2, r1
 8002efc:	609a      	str	r2, [r3, #8]
 8002efe:	193b      	adds	r3, r7, r4
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f04:	6a3b      	ldr	r3, [r7, #32]
 8002f06:	f383 8810 	msr	PRIMASK, r3
}
 8002f0a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2220      	movs	r2, #32
 8002f10:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f1e:	f3ef 8310 	mrs	r3, PRIMASK
 8002f22:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f26:	2480      	movs	r4, #128	; 0x80
 8002f28:	193a      	adds	r2, r7, r4
 8002f2a:	6013      	str	r3, [r2, #0]
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f32:	f383 8810 	msr	PRIMASK, r3
}
 8002f36:	46c0      	nop			; (mov r8, r8)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2110      	movs	r1, #16
 8002f44:	438a      	bics	r2, r1
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	193b      	adds	r3, r7, r4
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f50:	f383 8810 	msr	PRIMASK, r3
}
 8002f54:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f56:	183b      	adds	r3, r7, r0
 8002f58:	881a      	ldrh	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	0011      	movs	r1, r2
 8002f5e:	0018      	movs	r0, r3
 8002f60:	f000 f860 	bl	8003024 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002f64:	e044      	b.n	8002ff0 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002f66:	23a4      	movs	r3, #164	; 0xa4
 8002f68:	18fb      	adds	r3, r7, r3
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	2380      	movs	r3, #128	; 0x80
 8002f6e:	035b      	lsls	r3, r3, #13
 8002f70:	4013      	ands	r3, r2
 8002f72:	d010      	beq.n	8002f96 <HAL_UART_IRQHandler+0x542>
 8002f74:	239c      	movs	r3, #156	; 0x9c
 8002f76:	18fb      	adds	r3, r7, r3
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	2380      	movs	r3, #128	; 0x80
 8002f7c:	03db      	lsls	r3, r3, #15
 8002f7e:	4013      	ands	r3, r2
 8002f80:	d009      	beq.n	8002f96 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2280      	movs	r2, #128	; 0x80
 8002f88:	0352      	lsls	r2, r2, #13
 8002f8a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	0018      	movs	r0, r3
 8002f90:	f000 fbf8 	bl	8003784 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002f94:	e02f      	b.n	8002ff6 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002f96:	23a4      	movs	r3, #164	; 0xa4
 8002f98:	18fb      	adds	r3, r7, r3
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2280      	movs	r2, #128	; 0x80
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	d00f      	beq.n	8002fc2 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002fa2:	23a0      	movs	r3, #160	; 0xa0
 8002fa4:	18fb      	adds	r3, r7, r3
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2280      	movs	r2, #128	; 0x80
 8002faa:	4013      	ands	r3, r2
 8002fac:	d009      	beq.n	8002fc2 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d01e      	beq.n	8002ff4 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	0010      	movs	r0, r2
 8002fbe:	4798      	blx	r3
    }
    return;
 8002fc0:	e018      	b.n	8002ff4 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002fc2:	23a4      	movs	r3, #164	; 0xa4
 8002fc4:	18fb      	adds	r3, r7, r3
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2240      	movs	r2, #64	; 0x40
 8002fca:	4013      	ands	r3, r2
 8002fcc:	d013      	beq.n	8002ff6 <HAL_UART_IRQHandler+0x5a2>
 8002fce:	23a0      	movs	r3, #160	; 0xa0
 8002fd0:	18fb      	adds	r3, r7, r3
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2240      	movs	r2, #64	; 0x40
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	d00d      	beq.n	8002ff6 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	0018      	movs	r0, r3
 8002fde:	f000 fba6 	bl	800372e <UART_EndTransmit_IT>
    return;
 8002fe2:	e008      	b.n	8002ff6 <HAL_UART_IRQHandler+0x5a2>
      return;
 8002fe4:	46c0      	nop			; (mov r8, r8)
 8002fe6:	e006      	b.n	8002ff6 <HAL_UART_IRQHandler+0x5a2>
    return;
 8002fe8:	46c0      	nop			; (mov r8, r8)
 8002fea:	e004      	b.n	8002ff6 <HAL_UART_IRQHandler+0x5a2>
      return;
 8002fec:	46c0      	nop			; (mov r8, r8)
 8002fee:	e002      	b.n	8002ff6 <HAL_UART_IRQHandler+0x5a2>
      return;
 8002ff0:	46c0      	nop			; (mov r8, r8)
 8002ff2:	e000      	b.n	8002ff6 <HAL_UART_IRQHandler+0x5a2>
    return;
 8002ff4:	46c0      	nop			; (mov r8, r8)
  }

}
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	b02b      	add	sp, #172	; 0xac
 8002ffa:	bd90      	pop	{r4, r7, pc}
 8002ffc:	fffffeff 	.word	0xfffffeff
 8003000:	fffffedf 	.word	0xfffffedf

08003004 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800300c:	46c0      	nop			; (mov r8, r8)
 800300e:	46bd      	mov	sp, r7
 8003010:	b002      	add	sp, #8
 8003012:	bd80      	pop	{r7, pc}

08003014 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800301c:	46c0      	nop			; (mov r8, r8)
 800301e:	46bd      	mov	sp, r7
 8003020:	b002      	add	sp, #8
 8003022:	bd80      	pop	{r7, pc}

08003024 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	000a      	movs	r2, r1
 800302e:	1cbb      	adds	r3, r7, #2
 8003030:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003032:	46c0      	nop			; (mov r8, r8)
 8003034:	46bd      	mov	sp, r7
 8003036:	b002      	add	sp, #8
 8003038:	bd80      	pop	{r7, pc}
	...

0800303c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b088      	sub	sp, #32
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003044:	231e      	movs	r3, #30
 8003046:	18fb      	adds	r3, r7, r3
 8003048:	2200      	movs	r2, #0
 800304a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689a      	ldr	r2, [r3, #8]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	431a      	orrs	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	431a      	orrs	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	69db      	ldr	r3, [r3, #28]
 8003060:	4313      	orrs	r3, r2
 8003062:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a8d      	ldr	r2, [pc, #564]	; (80032a0 <UART_SetConfig+0x264>)
 800306c:	4013      	ands	r3, r2
 800306e:	0019      	movs	r1, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	697a      	ldr	r2, [r7, #20]
 8003076:	430a      	orrs	r2, r1
 8003078:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	4a88      	ldr	r2, [pc, #544]	; (80032a4 <UART_SetConfig+0x268>)
 8003082:	4013      	ands	r3, r2
 8003084:	0019      	movs	r1, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68da      	ldr	r2, [r3, #12]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	430a      	orrs	r2, r1
 8003090:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a1b      	ldr	r3, [r3, #32]
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	4313      	orrs	r3, r2
 80030a0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	4a7f      	ldr	r2, [pc, #508]	; (80032a8 <UART_SetConfig+0x26c>)
 80030aa:	4013      	ands	r3, r2
 80030ac:	0019      	movs	r1, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	430a      	orrs	r2, r1
 80030b6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a7b      	ldr	r2, [pc, #492]	; (80032ac <UART_SetConfig+0x270>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d127      	bne.n	8003112 <UART_SetConfig+0xd6>
 80030c2:	4b7b      	ldr	r3, [pc, #492]	; (80032b0 <UART_SetConfig+0x274>)
 80030c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c6:	2203      	movs	r2, #3
 80030c8:	4013      	ands	r3, r2
 80030ca:	2b03      	cmp	r3, #3
 80030cc:	d00d      	beq.n	80030ea <UART_SetConfig+0xae>
 80030ce:	d81b      	bhi.n	8003108 <UART_SetConfig+0xcc>
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d014      	beq.n	80030fe <UART_SetConfig+0xc2>
 80030d4:	d818      	bhi.n	8003108 <UART_SetConfig+0xcc>
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d002      	beq.n	80030e0 <UART_SetConfig+0xa4>
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d00a      	beq.n	80030f4 <UART_SetConfig+0xb8>
 80030de:	e013      	b.n	8003108 <UART_SetConfig+0xcc>
 80030e0:	231f      	movs	r3, #31
 80030e2:	18fb      	adds	r3, r7, r3
 80030e4:	2200      	movs	r2, #0
 80030e6:	701a      	strb	r2, [r3, #0]
 80030e8:	e021      	b.n	800312e <UART_SetConfig+0xf2>
 80030ea:	231f      	movs	r3, #31
 80030ec:	18fb      	adds	r3, r7, r3
 80030ee:	2202      	movs	r2, #2
 80030f0:	701a      	strb	r2, [r3, #0]
 80030f2:	e01c      	b.n	800312e <UART_SetConfig+0xf2>
 80030f4:	231f      	movs	r3, #31
 80030f6:	18fb      	adds	r3, r7, r3
 80030f8:	2204      	movs	r2, #4
 80030fa:	701a      	strb	r2, [r3, #0]
 80030fc:	e017      	b.n	800312e <UART_SetConfig+0xf2>
 80030fe:	231f      	movs	r3, #31
 8003100:	18fb      	adds	r3, r7, r3
 8003102:	2208      	movs	r2, #8
 8003104:	701a      	strb	r2, [r3, #0]
 8003106:	e012      	b.n	800312e <UART_SetConfig+0xf2>
 8003108:	231f      	movs	r3, #31
 800310a:	18fb      	adds	r3, r7, r3
 800310c:	2210      	movs	r2, #16
 800310e:	701a      	strb	r2, [r3, #0]
 8003110:	e00d      	b.n	800312e <UART_SetConfig+0xf2>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a67      	ldr	r2, [pc, #412]	; (80032b4 <UART_SetConfig+0x278>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d104      	bne.n	8003126 <UART_SetConfig+0xea>
 800311c:	231f      	movs	r3, #31
 800311e:	18fb      	adds	r3, r7, r3
 8003120:	2200      	movs	r2, #0
 8003122:	701a      	strb	r2, [r3, #0]
 8003124:	e003      	b.n	800312e <UART_SetConfig+0xf2>
 8003126:	231f      	movs	r3, #31
 8003128:	18fb      	adds	r3, r7, r3
 800312a:	2210      	movs	r2, #16
 800312c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	69da      	ldr	r2, [r3, #28]
 8003132:	2380      	movs	r3, #128	; 0x80
 8003134:	021b      	lsls	r3, r3, #8
 8003136:	429a      	cmp	r2, r3
 8003138:	d15d      	bne.n	80031f6 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 800313a:	231f      	movs	r3, #31
 800313c:	18fb      	adds	r3, r7, r3
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	2b08      	cmp	r3, #8
 8003142:	d015      	beq.n	8003170 <UART_SetConfig+0x134>
 8003144:	dc18      	bgt.n	8003178 <UART_SetConfig+0x13c>
 8003146:	2b04      	cmp	r3, #4
 8003148:	d00d      	beq.n	8003166 <UART_SetConfig+0x12a>
 800314a:	dc15      	bgt.n	8003178 <UART_SetConfig+0x13c>
 800314c:	2b00      	cmp	r3, #0
 800314e:	d002      	beq.n	8003156 <UART_SetConfig+0x11a>
 8003150:	2b02      	cmp	r3, #2
 8003152:	d005      	beq.n	8003160 <UART_SetConfig+0x124>
 8003154:	e010      	b.n	8003178 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003156:	f7ff fa8b 	bl	8002670 <HAL_RCC_GetPCLK1Freq>
 800315a:	0003      	movs	r3, r0
 800315c:	61bb      	str	r3, [r7, #24]
        break;
 800315e:	e012      	b.n	8003186 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003160:	4b55      	ldr	r3, [pc, #340]	; (80032b8 <UART_SetConfig+0x27c>)
 8003162:	61bb      	str	r3, [r7, #24]
        break;
 8003164:	e00f      	b.n	8003186 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003166:	f7ff fa15 	bl	8002594 <HAL_RCC_GetSysClockFreq>
 800316a:	0003      	movs	r3, r0
 800316c:	61bb      	str	r3, [r7, #24]
        break;
 800316e:	e00a      	b.n	8003186 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003170:	2380      	movs	r3, #128	; 0x80
 8003172:	021b      	lsls	r3, r3, #8
 8003174:	61bb      	str	r3, [r7, #24]
        break;
 8003176:	e006      	b.n	8003186 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003178:	2300      	movs	r3, #0
 800317a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800317c:	231e      	movs	r3, #30
 800317e:	18fb      	adds	r3, r7, r3
 8003180:	2201      	movs	r2, #1
 8003182:	701a      	strb	r2, [r3, #0]
        break;
 8003184:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d100      	bne.n	800318e <UART_SetConfig+0x152>
 800318c:	e07b      	b.n	8003286 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	005a      	lsls	r2, r3, #1
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	085b      	lsrs	r3, r3, #1
 8003198:	18d2      	adds	r2, r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	0019      	movs	r1, r3
 80031a0:	0010      	movs	r0, r2
 80031a2:	f7fc ffbb 	bl	800011c <__udivsi3>
 80031a6:	0003      	movs	r3, r0
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	2b0f      	cmp	r3, #15
 80031b0:	d91c      	bls.n	80031ec <UART_SetConfig+0x1b0>
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	2380      	movs	r3, #128	; 0x80
 80031b6:	025b      	lsls	r3, r3, #9
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d217      	bcs.n	80031ec <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	b29a      	uxth	r2, r3
 80031c0:	200e      	movs	r0, #14
 80031c2:	183b      	adds	r3, r7, r0
 80031c4:	210f      	movs	r1, #15
 80031c6:	438a      	bics	r2, r1
 80031c8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	085b      	lsrs	r3, r3, #1
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	2207      	movs	r2, #7
 80031d2:	4013      	ands	r3, r2
 80031d4:	b299      	uxth	r1, r3
 80031d6:	183b      	adds	r3, r7, r0
 80031d8:	183a      	adds	r2, r7, r0
 80031da:	8812      	ldrh	r2, [r2, #0]
 80031dc:	430a      	orrs	r2, r1
 80031de:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	183a      	adds	r2, r7, r0
 80031e6:	8812      	ldrh	r2, [r2, #0]
 80031e8:	60da      	str	r2, [r3, #12]
 80031ea:	e04c      	b.n	8003286 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80031ec:	231e      	movs	r3, #30
 80031ee:	18fb      	adds	r3, r7, r3
 80031f0:	2201      	movs	r2, #1
 80031f2:	701a      	strb	r2, [r3, #0]
 80031f4:	e047      	b.n	8003286 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80031f6:	231f      	movs	r3, #31
 80031f8:	18fb      	adds	r3, r7, r3
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	2b08      	cmp	r3, #8
 80031fe:	d015      	beq.n	800322c <UART_SetConfig+0x1f0>
 8003200:	dc18      	bgt.n	8003234 <UART_SetConfig+0x1f8>
 8003202:	2b04      	cmp	r3, #4
 8003204:	d00d      	beq.n	8003222 <UART_SetConfig+0x1e6>
 8003206:	dc15      	bgt.n	8003234 <UART_SetConfig+0x1f8>
 8003208:	2b00      	cmp	r3, #0
 800320a:	d002      	beq.n	8003212 <UART_SetConfig+0x1d6>
 800320c:	2b02      	cmp	r3, #2
 800320e:	d005      	beq.n	800321c <UART_SetConfig+0x1e0>
 8003210:	e010      	b.n	8003234 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003212:	f7ff fa2d 	bl	8002670 <HAL_RCC_GetPCLK1Freq>
 8003216:	0003      	movs	r3, r0
 8003218:	61bb      	str	r3, [r7, #24]
        break;
 800321a:	e012      	b.n	8003242 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800321c:	4b26      	ldr	r3, [pc, #152]	; (80032b8 <UART_SetConfig+0x27c>)
 800321e:	61bb      	str	r3, [r7, #24]
        break;
 8003220:	e00f      	b.n	8003242 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003222:	f7ff f9b7 	bl	8002594 <HAL_RCC_GetSysClockFreq>
 8003226:	0003      	movs	r3, r0
 8003228:	61bb      	str	r3, [r7, #24]
        break;
 800322a:	e00a      	b.n	8003242 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800322c:	2380      	movs	r3, #128	; 0x80
 800322e:	021b      	lsls	r3, r3, #8
 8003230:	61bb      	str	r3, [r7, #24]
        break;
 8003232:	e006      	b.n	8003242 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8003234:	2300      	movs	r3, #0
 8003236:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003238:	231e      	movs	r3, #30
 800323a:	18fb      	adds	r3, r7, r3
 800323c:	2201      	movs	r2, #1
 800323e:	701a      	strb	r2, [r3, #0]
        break;
 8003240:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d01e      	beq.n	8003286 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	085a      	lsrs	r2, r3, #1
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	18d2      	adds	r2, r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	0019      	movs	r1, r3
 8003258:	0010      	movs	r0, r2
 800325a:	f7fc ff5f 	bl	800011c <__udivsi3>
 800325e:	0003      	movs	r3, r0
 8003260:	b29b      	uxth	r3, r3
 8003262:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	2b0f      	cmp	r3, #15
 8003268:	d909      	bls.n	800327e <UART_SetConfig+0x242>
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	2380      	movs	r3, #128	; 0x80
 800326e:	025b      	lsls	r3, r3, #9
 8003270:	429a      	cmp	r2, r3
 8003272:	d204      	bcs.n	800327e <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	60da      	str	r2, [r3, #12]
 800327c:	e003      	b.n	8003286 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 800327e:	231e      	movs	r3, #30
 8003280:	18fb      	adds	r3, r7, r3
 8003282:	2201      	movs	r2, #1
 8003284:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003292:	231e      	movs	r3, #30
 8003294:	18fb      	adds	r3, r7, r3
 8003296:	781b      	ldrb	r3, [r3, #0]
}
 8003298:	0018      	movs	r0, r3
 800329a:	46bd      	mov	sp, r7
 800329c:	b008      	add	sp, #32
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	ffff69f3 	.word	0xffff69f3
 80032a4:	ffffcfff 	.word	0xffffcfff
 80032a8:	fffff4ff 	.word	0xfffff4ff
 80032ac:	40013800 	.word	0x40013800
 80032b0:	40021000 	.word	0x40021000
 80032b4:	40004400 	.word	0x40004400
 80032b8:	007a1200 	.word	0x007a1200

080032bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c8:	2201      	movs	r2, #1
 80032ca:	4013      	ands	r3, r2
 80032cc:	d00b      	beq.n	80032e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	4a4a      	ldr	r2, [pc, #296]	; (8003400 <UART_AdvFeatureConfig+0x144>)
 80032d6:	4013      	ands	r3, r2
 80032d8:	0019      	movs	r1, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ea:	2202      	movs	r2, #2
 80032ec:	4013      	ands	r3, r2
 80032ee:	d00b      	beq.n	8003308 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	4a43      	ldr	r2, [pc, #268]	; (8003404 <UART_AdvFeatureConfig+0x148>)
 80032f8:	4013      	ands	r3, r2
 80032fa:	0019      	movs	r1, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	430a      	orrs	r2, r1
 8003306:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330c:	2204      	movs	r2, #4
 800330e:	4013      	ands	r3, r2
 8003310:	d00b      	beq.n	800332a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	4a3b      	ldr	r2, [pc, #236]	; (8003408 <UART_AdvFeatureConfig+0x14c>)
 800331a:	4013      	ands	r3, r2
 800331c:	0019      	movs	r1, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	430a      	orrs	r2, r1
 8003328:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332e:	2208      	movs	r2, #8
 8003330:	4013      	ands	r3, r2
 8003332:	d00b      	beq.n	800334c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	4a34      	ldr	r2, [pc, #208]	; (800340c <UART_AdvFeatureConfig+0x150>)
 800333c:	4013      	ands	r3, r2
 800333e:	0019      	movs	r1, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	430a      	orrs	r2, r1
 800334a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003350:	2210      	movs	r2, #16
 8003352:	4013      	ands	r3, r2
 8003354:	d00b      	beq.n	800336e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	4a2c      	ldr	r2, [pc, #176]	; (8003410 <UART_AdvFeatureConfig+0x154>)
 800335e:	4013      	ands	r3, r2
 8003360:	0019      	movs	r1, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	430a      	orrs	r2, r1
 800336c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003372:	2220      	movs	r2, #32
 8003374:	4013      	ands	r3, r2
 8003376:	d00b      	beq.n	8003390 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	4a25      	ldr	r2, [pc, #148]	; (8003414 <UART_AdvFeatureConfig+0x158>)
 8003380:	4013      	ands	r3, r2
 8003382:	0019      	movs	r1, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	430a      	orrs	r2, r1
 800338e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003394:	2240      	movs	r2, #64	; 0x40
 8003396:	4013      	ands	r3, r2
 8003398:	d01d      	beq.n	80033d6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	4a1d      	ldr	r2, [pc, #116]	; (8003418 <UART_AdvFeatureConfig+0x15c>)
 80033a2:	4013      	ands	r3, r2
 80033a4:	0019      	movs	r1, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	430a      	orrs	r2, r1
 80033b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033b6:	2380      	movs	r3, #128	; 0x80
 80033b8:	035b      	lsls	r3, r3, #13
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d10b      	bne.n	80033d6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	4a15      	ldr	r2, [pc, #84]	; (800341c <UART_AdvFeatureConfig+0x160>)
 80033c6:	4013      	ands	r3, r2
 80033c8:	0019      	movs	r1, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033da:	2280      	movs	r2, #128	; 0x80
 80033dc:	4013      	ands	r3, r2
 80033de:	d00b      	beq.n	80033f8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	4a0e      	ldr	r2, [pc, #56]	; (8003420 <UART_AdvFeatureConfig+0x164>)
 80033e8:	4013      	ands	r3, r2
 80033ea:	0019      	movs	r1, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	430a      	orrs	r2, r1
 80033f6:	605a      	str	r2, [r3, #4]
  }
}
 80033f8:	46c0      	nop			; (mov r8, r8)
 80033fa:	46bd      	mov	sp, r7
 80033fc:	b002      	add	sp, #8
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	fffdffff 	.word	0xfffdffff
 8003404:	fffeffff 	.word	0xfffeffff
 8003408:	fffbffff 	.word	0xfffbffff
 800340c:	ffff7fff 	.word	0xffff7fff
 8003410:	ffffefff 	.word	0xffffefff
 8003414:	ffffdfff 	.word	0xffffdfff
 8003418:	ffefffff 	.word	0xffefffff
 800341c:	ff9fffff 	.word	0xff9fffff
 8003420:	fff7ffff 	.word	0xfff7ffff

08003424 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b086      	sub	sp, #24
 8003428:	af02      	add	r7, sp, #8
 800342a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2280      	movs	r2, #128	; 0x80
 8003430:	2100      	movs	r1, #0
 8003432:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003434:	f7fd fc3e 	bl	8000cb4 <HAL_GetTick>
 8003438:	0003      	movs	r3, r0
 800343a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2208      	movs	r2, #8
 8003444:	4013      	ands	r3, r2
 8003446:	2b08      	cmp	r3, #8
 8003448:	d10c      	bne.n	8003464 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2280      	movs	r2, #128	; 0x80
 800344e:	0391      	lsls	r1, r2, #14
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	4a17      	ldr	r2, [pc, #92]	; (80034b0 <UART_CheckIdleState+0x8c>)
 8003454:	9200      	str	r2, [sp, #0]
 8003456:	2200      	movs	r2, #0
 8003458:	f000 f82c 	bl	80034b4 <UART_WaitOnFlagUntilTimeout>
 800345c:	1e03      	subs	r3, r0, #0
 800345e:	d001      	beq.n	8003464 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e021      	b.n	80034a8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2204      	movs	r2, #4
 800346c:	4013      	ands	r3, r2
 800346e:	2b04      	cmp	r3, #4
 8003470:	d10c      	bne.n	800348c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2280      	movs	r2, #128	; 0x80
 8003476:	03d1      	lsls	r1, r2, #15
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	4a0d      	ldr	r2, [pc, #52]	; (80034b0 <UART_CheckIdleState+0x8c>)
 800347c:	9200      	str	r2, [sp, #0]
 800347e:	2200      	movs	r2, #0
 8003480:	f000 f818 	bl	80034b4 <UART_WaitOnFlagUntilTimeout>
 8003484:	1e03      	subs	r3, r0, #0
 8003486:	d001      	beq.n	800348c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e00d      	b.n	80034a8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2220      	movs	r2, #32
 8003490:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2220      	movs	r2, #32
 8003496:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2274      	movs	r2, #116	; 0x74
 80034a2:	2100      	movs	r1, #0
 80034a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	0018      	movs	r0, r3
 80034aa:	46bd      	mov	sp, r7
 80034ac:	b004      	add	sp, #16
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	01ffffff 	.word	0x01ffffff

080034b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b094      	sub	sp, #80	; 0x50
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	603b      	str	r3, [r7, #0]
 80034c0:	1dfb      	adds	r3, r7, #7
 80034c2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034c4:	e0a3      	b.n	800360e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034c8:	3301      	adds	r3, #1
 80034ca:	d100      	bne.n	80034ce <UART_WaitOnFlagUntilTimeout+0x1a>
 80034cc:	e09f      	b.n	800360e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ce:	f7fd fbf1 	bl	8000cb4 <HAL_GetTick>
 80034d2:	0002      	movs	r2, r0
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80034da:	429a      	cmp	r2, r3
 80034dc:	d302      	bcc.n	80034e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80034de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d13d      	bne.n	8003560 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034e4:	f3ef 8310 	mrs	r3, PRIMASK
 80034e8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80034ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034ec:	647b      	str	r3, [r7, #68]	; 0x44
 80034ee:	2301      	movs	r3, #1
 80034f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f4:	f383 8810 	msr	PRIMASK, r3
}
 80034f8:	46c0      	nop			; (mov r8, r8)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	494c      	ldr	r1, [pc, #304]	; (8003638 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003506:	400a      	ands	r2, r1
 8003508:	601a      	str	r2, [r3, #0]
 800350a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800350c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800350e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003510:	f383 8810 	msr	PRIMASK, r3
}
 8003514:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003516:	f3ef 8310 	mrs	r3, PRIMASK
 800351a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800351c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800351e:	643b      	str	r3, [r7, #64]	; 0x40
 8003520:	2301      	movs	r3, #1
 8003522:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003526:	f383 8810 	msr	PRIMASK, r3
}
 800352a:	46c0      	nop			; (mov r8, r8)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689a      	ldr	r2, [r3, #8]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2101      	movs	r1, #1
 8003538:	438a      	bics	r2, r1
 800353a:	609a      	str	r2, [r3, #8]
 800353c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800353e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003542:	f383 8810 	msr	PRIMASK, r3
}
 8003546:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2220      	movs	r2, #32
 800354c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2220      	movs	r2, #32
 8003552:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2274      	movs	r2, #116	; 0x74
 8003558:	2100      	movs	r1, #0
 800355a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e067      	b.n	8003630 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2204      	movs	r2, #4
 8003568:	4013      	ands	r3, r2
 800356a:	d050      	beq.n	800360e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	69da      	ldr	r2, [r3, #28]
 8003572:	2380      	movs	r3, #128	; 0x80
 8003574:	011b      	lsls	r3, r3, #4
 8003576:	401a      	ands	r2, r3
 8003578:	2380      	movs	r3, #128	; 0x80
 800357a:	011b      	lsls	r3, r3, #4
 800357c:	429a      	cmp	r2, r3
 800357e:	d146      	bne.n	800360e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2280      	movs	r2, #128	; 0x80
 8003586:	0112      	lsls	r2, r2, #4
 8003588:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800358a:	f3ef 8310 	mrs	r3, PRIMASK
 800358e:	613b      	str	r3, [r7, #16]
  return(result);
 8003590:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003592:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003594:	2301      	movs	r3, #1
 8003596:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	f383 8810 	msr	PRIMASK, r3
}
 800359e:	46c0      	nop			; (mov r8, r8)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4923      	ldr	r1, [pc, #140]	; (8003638 <UART_WaitOnFlagUntilTimeout+0x184>)
 80035ac:	400a      	ands	r2, r1
 80035ae:	601a      	str	r2, [r3, #0]
 80035b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035b2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	f383 8810 	msr	PRIMASK, r3
}
 80035ba:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035bc:	f3ef 8310 	mrs	r3, PRIMASK
 80035c0:	61fb      	str	r3, [r7, #28]
  return(result);
 80035c2:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80035c6:	2301      	movs	r3, #1
 80035c8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035ca:	6a3b      	ldr	r3, [r7, #32]
 80035cc:	f383 8810 	msr	PRIMASK, r3
}
 80035d0:	46c0      	nop			; (mov r8, r8)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	689a      	ldr	r2, [r3, #8]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2101      	movs	r1, #1
 80035de:	438a      	bics	r2, r1
 80035e0:	609a      	str	r2, [r3, #8]
 80035e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035e4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e8:	f383 8810 	msr	PRIMASK, r3
}
 80035ec:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2220      	movs	r2, #32
 80035f2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2220      	movs	r2, #32
 80035f8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2280      	movs	r2, #128	; 0x80
 80035fe:	2120      	movs	r1, #32
 8003600:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2274      	movs	r2, #116	; 0x74
 8003606:	2100      	movs	r1, #0
 8003608:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e010      	b.n	8003630 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	69db      	ldr	r3, [r3, #28]
 8003614:	68ba      	ldr	r2, [r7, #8]
 8003616:	4013      	ands	r3, r2
 8003618:	68ba      	ldr	r2, [r7, #8]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	425a      	negs	r2, r3
 800361e:	4153      	adcs	r3, r2
 8003620:	b2db      	uxtb	r3, r3
 8003622:	001a      	movs	r2, r3
 8003624:	1dfb      	adds	r3, r7, #7
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	429a      	cmp	r2, r3
 800362a:	d100      	bne.n	800362e <UART_WaitOnFlagUntilTimeout+0x17a>
 800362c:	e74b      	b.n	80034c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	0018      	movs	r0, r3
 8003632:	46bd      	mov	sp, r7
 8003634:	b014      	add	sp, #80	; 0x50
 8003636:	bd80      	pop	{r7, pc}
 8003638:	fffffe5f 	.word	0xfffffe5f

0800363c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b08e      	sub	sp, #56	; 0x38
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003644:	f3ef 8310 	mrs	r3, PRIMASK
 8003648:	617b      	str	r3, [r7, #20]
  return(result);
 800364a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800364c:	637b      	str	r3, [r7, #52]	; 0x34
 800364e:	2301      	movs	r3, #1
 8003650:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	f383 8810 	msr	PRIMASK, r3
}
 8003658:	46c0      	nop			; (mov r8, r8)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4925      	ldr	r1, [pc, #148]	; (80036fc <UART_EndRxTransfer+0xc0>)
 8003666:	400a      	ands	r2, r1
 8003668:	601a      	str	r2, [r3, #0]
 800366a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800366c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	f383 8810 	msr	PRIMASK, r3
}
 8003674:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003676:	f3ef 8310 	mrs	r3, PRIMASK
 800367a:	623b      	str	r3, [r7, #32]
  return(result);
 800367c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800367e:	633b      	str	r3, [r7, #48]	; 0x30
 8003680:	2301      	movs	r3, #1
 8003682:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003686:	f383 8810 	msr	PRIMASK, r3
}
 800368a:	46c0      	nop			; (mov r8, r8)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689a      	ldr	r2, [r3, #8]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2101      	movs	r1, #1
 8003698:	438a      	bics	r2, r1
 800369a:	609a      	str	r2, [r3, #8]
 800369c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a2:	f383 8810 	msr	PRIMASK, r3
}
 80036a6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d118      	bne.n	80036e2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036b0:	f3ef 8310 	mrs	r3, PRIMASK
 80036b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80036b6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036ba:	2301      	movs	r3, #1
 80036bc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f383 8810 	msr	PRIMASK, r3
}
 80036c4:	46c0      	nop			; (mov r8, r8)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2110      	movs	r1, #16
 80036d2:	438a      	bics	r2, r1
 80036d4:	601a      	str	r2, [r3, #0]
 80036d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	f383 8810 	msr	PRIMASK, r3
}
 80036e0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2220      	movs	r2, #32
 80036e6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	665a      	str	r2, [r3, #100]	; 0x64
}
 80036f4:	46c0      	nop			; (mov r8, r8)
 80036f6:	46bd      	mov	sp, r7
 80036f8:	b00e      	add	sp, #56	; 0x38
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	fffffedf 	.word	0xfffffedf

08003700 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	225a      	movs	r2, #90	; 0x5a
 8003712:	2100      	movs	r1, #0
 8003714:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2252      	movs	r2, #82	; 0x52
 800371a:	2100      	movs	r1, #0
 800371c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	0018      	movs	r0, r3
 8003722:	f7ff fc77 	bl	8003014 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003726:	46c0      	nop			; (mov r8, r8)
 8003728:	46bd      	mov	sp, r7
 800372a:	b004      	add	sp, #16
 800372c:	bd80      	pop	{r7, pc}

0800372e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	b086      	sub	sp, #24
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003736:	f3ef 8310 	mrs	r3, PRIMASK
 800373a:	60bb      	str	r3, [r7, #8]
  return(result);
 800373c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800373e:	617b      	str	r3, [r7, #20]
 8003740:	2301      	movs	r3, #1
 8003742:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f383 8810 	msr	PRIMASK, r3
}
 800374a:	46c0      	nop			; (mov r8, r8)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2140      	movs	r1, #64	; 0x40
 8003758:	438a      	bics	r2, r1
 800375a:	601a      	str	r2, [r3, #0]
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	f383 8810 	msr	PRIMASK, r3
}
 8003766:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2220      	movs	r2, #32
 800376c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	0018      	movs	r0, r3
 8003778:	f7ff fc44 	bl	8003004 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800377c:	46c0      	nop			; (mov r8, r8)
 800377e:	46bd      	mov	sp, r7
 8003780:	b006      	add	sp, #24
 8003782:	bd80      	pop	{r7, pc}

08003784 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800378c:	46c0      	nop			; (mov r8, r8)
 800378e:	46bd      	mov	sp, r7
 8003790:	b002      	add	sp, #8
 8003792:	bd80      	pop	{r7, pc}

08003794 <__errno>:
 8003794:	4b01      	ldr	r3, [pc, #4]	; (800379c <__errno+0x8>)
 8003796:	6818      	ldr	r0, [r3, #0]
 8003798:	4770      	bx	lr
 800379a:	46c0      	nop			; (mov r8, r8)
 800379c:	2000000c 	.word	0x2000000c

080037a0 <__libc_init_array>:
 80037a0:	b570      	push	{r4, r5, r6, lr}
 80037a2:	2600      	movs	r6, #0
 80037a4:	4d0c      	ldr	r5, [pc, #48]	; (80037d8 <__libc_init_array+0x38>)
 80037a6:	4c0d      	ldr	r4, [pc, #52]	; (80037dc <__libc_init_array+0x3c>)
 80037a8:	1b64      	subs	r4, r4, r5
 80037aa:	10a4      	asrs	r4, r4, #2
 80037ac:	42a6      	cmp	r6, r4
 80037ae:	d109      	bne.n	80037c4 <__libc_init_array+0x24>
 80037b0:	2600      	movs	r6, #0
 80037b2:	f001 f9cf 	bl	8004b54 <_init>
 80037b6:	4d0a      	ldr	r5, [pc, #40]	; (80037e0 <__libc_init_array+0x40>)
 80037b8:	4c0a      	ldr	r4, [pc, #40]	; (80037e4 <__libc_init_array+0x44>)
 80037ba:	1b64      	subs	r4, r4, r5
 80037bc:	10a4      	asrs	r4, r4, #2
 80037be:	42a6      	cmp	r6, r4
 80037c0:	d105      	bne.n	80037ce <__libc_init_array+0x2e>
 80037c2:	bd70      	pop	{r4, r5, r6, pc}
 80037c4:	00b3      	lsls	r3, r6, #2
 80037c6:	58eb      	ldr	r3, [r5, r3]
 80037c8:	4798      	blx	r3
 80037ca:	3601      	adds	r6, #1
 80037cc:	e7ee      	b.n	80037ac <__libc_init_array+0xc>
 80037ce:	00b3      	lsls	r3, r6, #2
 80037d0:	58eb      	ldr	r3, [r5, r3]
 80037d2:	4798      	blx	r3
 80037d4:	3601      	adds	r6, #1
 80037d6:	e7f2      	b.n	80037be <__libc_init_array+0x1e>
 80037d8:	08004c98 	.word	0x08004c98
 80037dc:	08004c98 	.word	0x08004c98
 80037e0:	08004c98 	.word	0x08004c98
 80037e4:	08004c9c 	.word	0x08004c9c

080037e8 <memcpy>:
 80037e8:	2300      	movs	r3, #0
 80037ea:	b510      	push	{r4, lr}
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d100      	bne.n	80037f2 <memcpy+0xa>
 80037f0:	bd10      	pop	{r4, pc}
 80037f2:	5ccc      	ldrb	r4, [r1, r3]
 80037f4:	54c4      	strb	r4, [r0, r3]
 80037f6:	3301      	adds	r3, #1
 80037f8:	e7f8      	b.n	80037ec <memcpy+0x4>

080037fa <memset>:
 80037fa:	0003      	movs	r3, r0
 80037fc:	1882      	adds	r2, r0, r2
 80037fe:	4293      	cmp	r3, r2
 8003800:	d100      	bne.n	8003804 <memset+0xa>
 8003802:	4770      	bx	lr
 8003804:	7019      	strb	r1, [r3, #0]
 8003806:	3301      	adds	r3, #1
 8003808:	e7f9      	b.n	80037fe <memset+0x4>
	...

0800380c <iprintf>:
 800380c:	b40f      	push	{r0, r1, r2, r3}
 800380e:	4b0b      	ldr	r3, [pc, #44]	; (800383c <iprintf+0x30>)
 8003810:	b513      	push	{r0, r1, r4, lr}
 8003812:	681c      	ldr	r4, [r3, #0]
 8003814:	2c00      	cmp	r4, #0
 8003816:	d005      	beq.n	8003824 <iprintf+0x18>
 8003818:	69a3      	ldr	r3, [r4, #24]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d102      	bne.n	8003824 <iprintf+0x18>
 800381e:	0020      	movs	r0, r4
 8003820:	f000 f890 	bl	8003944 <__sinit>
 8003824:	ab05      	add	r3, sp, #20
 8003826:	0020      	movs	r0, r4
 8003828:	9a04      	ldr	r2, [sp, #16]
 800382a:	68a1      	ldr	r1, [r4, #8]
 800382c:	9301      	str	r3, [sp, #4]
 800382e:	f000 fb4f 	bl	8003ed0 <_vfiprintf_r>
 8003832:	bc16      	pop	{r1, r2, r4}
 8003834:	bc08      	pop	{r3}
 8003836:	b004      	add	sp, #16
 8003838:	4718      	bx	r3
 800383a:	46c0      	nop			; (mov r8, r8)
 800383c:	2000000c 	.word	0x2000000c

08003840 <siprintf>:
 8003840:	b40e      	push	{r1, r2, r3}
 8003842:	b500      	push	{lr}
 8003844:	490b      	ldr	r1, [pc, #44]	; (8003874 <siprintf+0x34>)
 8003846:	b09c      	sub	sp, #112	; 0x70
 8003848:	ab1d      	add	r3, sp, #116	; 0x74
 800384a:	9002      	str	r0, [sp, #8]
 800384c:	9006      	str	r0, [sp, #24]
 800384e:	9107      	str	r1, [sp, #28]
 8003850:	9104      	str	r1, [sp, #16]
 8003852:	4809      	ldr	r0, [pc, #36]	; (8003878 <siprintf+0x38>)
 8003854:	4909      	ldr	r1, [pc, #36]	; (800387c <siprintf+0x3c>)
 8003856:	cb04      	ldmia	r3!, {r2}
 8003858:	9105      	str	r1, [sp, #20]
 800385a:	6800      	ldr	r0, [r0, #0]
 800385c:	a902      	add	r1, sp, #8
 800385e:	9301      	str	r3, [sp, #4]
 8003860:	f000 fa0e 	bl	8003c80 <_svfiprintf_r>
 8003864:	2300      	movs	r3, #0
 8003866:	9a02      	ldr	r2, [sp, #8]
 8003868:	7013      	strb	r3, [r2, #0]
 800386a:	b01c      	add	sp, #112	; 0x70
 800386c:	bc08      	pop	{r3}
 800386e:	b003      	add	sp, #12
 8003870:	4718      	bx	r3
 8003872:	46c0      	nop			; (mov r8, r8)
 8003874:	7fffffff 	.word	0x7fffffff
 8003878:	2000000c 	.word	0x2000000c
 800387c:	ffff0208 	.word	0xffff0208

08003880 <std>:
 8003880:	2300      	movs	r3, #0
 8003882:	b510      	push	{r4, lr}
 8003884:	0004      	movs	r4, r0
 8003886:	6003      	str	r3, [r0, #0]
 8003888:	6043      	str	r3, [r0, #4]
 800388a:	6083      	str	r3, [r0, #8]
 800388c:	8181      	strh	r1, [r0, #12]
 800388e:	6643      	str	r3, [r0, #100]	; 0x64
 8003890:	0019      	movs	r1, r3
 8003892:	81c2      	strh	r2, [r0, #14]
 8003894:	6103      	str	r3, [r0, #16]
 8003896:	6143      	str	r3, [r0, #20]
 8003898:	6183      	str	r3, [r0, #24]
 800389a:	2208      	movs	r2, #8
 800389c:	305c      	adds	r0, #92	; 0x5c
 800389e:	f7ff ffac 	bl	80037fa <memset>
 80038a2:	4b05      	ldr	r3, [pc, #20]	; (80038b8 <std+0x38>)
 80038a4:	6224      	str	r4, [r4, #32]
 80038a6:	6263      	str	r3, [r4, #36]	; 0x24
 80038a8:	4b04      	ldr	r3, [pc, #16]	; (80038bc <std+0x3c>)
 80038aa:	62a3      	str	r3, [r4, #40]	; 0x28
 80038ac:	4b04      	ldr	r3, [pc, #16]	; (80038c0 <std+0x40>)
 80038ae:	62e3      	str	r3, [r4, #44]	; 0x2c
 80038b0:	4b04      	ldr	r3, [pc, #16]	; (80038c4 <std+0x44>)
 80038b2:	6323      	str	r3, [r4, #48]	; 0x30
 80038b4:	bd10      	pop	{r4, pc}
 80038b6:	46c0      	nop			; (mov r8, r8)
 80038b8:	0800446d 	.word	0x0800446d
 80038bc:	08004495 	.word	0x08004495
 80038c0:	080044cd 	.word	0x080044cd
 80038c4:	080044f9 	.word	0x080044f9

080038c8 <_cleanup_r>:
 80038c8:	b510      	push	{r4, lr}
 80038ca:	4902      	ldr	r1, [pc, #8]	; (80038d4 <_cleanup_r+0xc>)
 80038cc:	f000 f8ba 	bl	8003a44 <_fwalk_reent>
 80038d0:	bd10      	pop	{r4, pc}
 80038d2:	46c0      	nop			; (mov r8, r8)
 80038d4:	08004805 	.word	0x08004805

080038d8 <__sfmoreglue>:
 80038d8:	b570      	push	{r4, r5, r6, lr}
 80038da:	2568      	movs	r5, #104	; 0x68
 80038dc:	1e4a      	subs	r2, r1, #1
 80038de:	4355      	muls	r5, r2
 80038e0:	000e      	movs	r6, r1
 80038e2:	0029      	movs	r1, r5
 80038e4:	3174      	adds	r1, #116	; 0x74
 80038e6:	f000 f8f3 	bl	8003ad0 <_malloc_r>
 80038ea:	1e04      	subs	r4, r0, #0
 80038ec:	d008      	beq.n	8003900 <__sfmoreglue+0x28>
 80038ee:	2100      	movs	r1, #0
 80038f0:	002a      	movs	r2, r5
 80038f2:	6001      	str	r1, [r0, #0]
 80038f4:	6046      	str	r6, [r0, #4]
 80038f6:	300c      	adds	r0, #12
 80038f8:	60a0      	str	r0, [r4, #8]
 80038fa:	3268      	adds	r2, #104	; 0x68
 80038fc:	f7ff ff7d 	bl	80037fa <memset>
 8003900:	0020      	movs	r0, r4
 8003902:	bd70      	pop	{r4, r5, r6, pc}

08003904 <__sfp_lock_acquire>:
 8003904:	b510      	push	{r4, lr}
 8003906:	4802      	ldr	r0, [pc, #8]	; (8003910 <__sfp_lock_acquire+0xc>)
 8003908:	f000 f8bd 	bl	8003a86 <__retarget_lock_acquire_recursive>
 800390c:	bd10      	pop	{r4, pc}
 800390e:	46c0      	nop			; (mov r8, r8)
 8003910:	200001c1 	.word	0x200001c1

08003914 <__sfp_lock_release>:
 8003914:	b510      	push	{r4, lr}
 8003916:	4802      	ldr	r0, [pc, #8]	; (8003920 <__sfp_lock_release+0xc>)
 8003918:	f000 f8b6 	bl	8003a88 <__retarget_lock_release_recursive>
 800391c:	bd10      	pop	{r4, pc}
 800391e:	46c0      	nop			; (mov r8, r8)
 8003920:	200001c1 	.word	0x200001c1

08003924 <__sinit_lock_acquire>:
 8003924:	b510      	push	{r4, lr}
 8003926:	4802      	ldr	r0, [pc, #8]	; (8003930 <__sinit_lock_acquire+0xc>)
 8003928:	f000 f8ad 	bl	8003a86 <__retarget_lock_acquire_recursive>
 800392c:	bd10      	pop	{r4, pc}
 800392e:	46c0      	nop			; (mov r8, r8)
 8003930:	200001c2 	.word	0x200001c2

08003934 <__sinit_lock_release>:
 8003934:	b510      	push	{r4, lr}
 8003936:	4802      	ldr	r0, [pc, #8]	; (8003940 <__sinit_lock_release+0xc>)
 8003938:	f000 f8a6 	bl	8003a88 <__retarget_lock_release_recursive>
 800393c:	bd10      	pop	{r4, pc}
 800393e:	46c0      	nop			; (mov r8, r8)
 8003940:	200001c2 	.word	0x200001c2

08003944 <__sinit>:
 8003944:	b513      	push	{r0, r1, r4, lr}
 8003946:	0004      	movs	r4, r0
 8003948:	f7ff ffec 	bl	8003924 <__sinit_lock_acquire>
 800394c:	69a3      	ldr	r3, [r4, #24]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d002      	beq.n	8003958 <__sinit+0x14>
 8003952:	f7ff ffef 	bl	8003934 <__sinit_lock_release>
 8003956:	bd13      	pop	{r0, r1, r4, pc}
 8003958:	64a3      	str	r3, [r4, #72]	; 0x48
 800395a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800395c:	6523      	str	r3, [r4, #80]	; 0x50
 800395e:	4b13      	ldr	r3, [pc, #76]	; (80039ac <__sinit+0x68>)
 8003960:	4a13      	ldr	r2, [pc, #76]	; (80039b0 <__sinit+0x6c>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	62a2      	str	r2, [r4, #40]	; 0x28
 8003966:	9301      	str	r3, [sp, #4]
 8003968:	42a3      	cmp	r3, r4
 800396a:	d101      	bne.n	8003970 <__sinit+0x2c>
 800396c:	2301      	movs	r3, #1
 800396e:	61a3      	str	r3, [r4, #24]
 8003970:	0020      	movs	r0, r4
 8003972:	f000 f81f 	bl	80039b4 <__sfp>
 8003976:	6060      	str	r0, [r4, #4]
 8003978:	0020      	movs	r0, r4
 800397a:	f000 f81b 	bl	80039b4 <__sfp>
 800397e:	60a0      	str	r0, [r4, #8]
 8003980:	0020      	movs	r0, r4
 8003982:	f000 f817 	bl	80039b4 <__sfp>
 8003986:	2200      	movs	r2, #0
 8003988:	2104      	movs	r1, #4
 800398a:	60e0      	str	r0, [r4, #12]
 800398c:	6860      	ldr	r0, [r4, #4]
 800398e:	f7ff ff77 	bl	8003880 <std>
 8003992:	2201      	movs	r2, #1
 8003994:	2109      	movs	r1, #9
 8003996:	68a0      	ldr	r0, [r4, #8]
 8003998:	f7ff ff72 	bl	8003880 <std>
 800399c:	2202      	movs	r2, #2
 800399e:	2112      	movs	r1, #18
 80039a0:	68e0      	ldr	r0, [r4, #12]
 80039a2:	f7ff ff6d 	bl	8003880 <std>
 80039a6:	2301      	movs	r3, #1
 80039a8:	61a3      	str	r3, [r4, #24]
 80039aa:	e7d2      	b.n	8003952 <__sinit+0xe>
 80039ac:	08004c00 	.word	0x08004c00
 80039b0:	080038c9 	.word	0x080038c9

080039b4 <__sfp>:
 80039b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039b6:	0007      	movs	r7, r0
 80039b8:	f7ff ffa4 	bl	8003904 <__sfp_lock_acquire>
 80039bc:	4b1f      	ldr	r3, [pc, #124]	; (8003a3c <__sfp+0x88>)
 80039be:	681e      	ldr	r6, [r3, #0]
 80039c0:	69b3      	ldr	r3, [r6, #24]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d102      	bne.n	80039cc <__sfp+0x18>
 80039c6:	0030      	movs	r0, r6
 80039c8:	f7ff ffbc 	bl	8003944 <__sinit>
 80039cc:	3648      	adds	r6, #72	; 0x48
 80039ce:	68b4      	ldr	r4, [r6, #8]
 80039d0:	6873      	ldr	r3, [r6, #4]
 80039d2:	3b01      	subs	r3, #1
 80039d4:	d504      	bpl.n	80039e0 <__sfp+0x2c>
 80039d6:	6833      	ldr	r3, [r6, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d022      	beq.n	8003a22 <__sfp+0x6e>
 80039dc:	6836      	ldr	r6, [r6, #0]
 80039de:	e7f6      	b.n	80039ce <__sfp+0x1a>
 80039e0:	220c      	movs	r2, #12
 80039e2:	5ea5      	ldrsh	r5, [r4, r2]
 80039e4:	2d00      	cmp	r5, #0
 80039e6:	d11a      	bne.n	8003a1e <__sfp+0x6a>
 80039e8:	0020      	movs	r0, r4
 80039ea:	4b15      	ldr	r3, [pc, #84]	; (8003a40 <__sfp+0x8c>)
 80039ec:	3058      	adds	r0, #88	; 0x58
 80039ee:	60e3      	str	r3, [r4, #12]
 80039f0:	6665      	str	r5, [r4, #100]	; 0x64
 80039f2:	f000 f847 	bl	8003a84 <__retarget_lock_init_recursive>
 80039f6:	f7ff ff8d 	bl	8003914 <__sfp_lock_release>
 80039fa:	0020      	movs	r0, r4
 80039fc:	2208      	movs	r2, #8
 80039fe:	0029      	movs	r1, r5
 8003a00:	6025      	str	r5, [r4, #0]
 8003a02:	60a5      	str	r5, [r4, #8]
 8003a04:	6065      	str	r5, [r4, #4]
 8003a06:	6125      	str	r5, [r4, #16]
 8003a08:	6165      	str	r5, [r4, #20]
 8003a0a:	61a5      	str	r5, [r4, #24]
 8003a0c:	305c      	adds	r0, #92	; 0x5c
 8003a0e:	f7ff fef4 	bl	80037fa <memset>
 8003a12:	6365      	str	r5, [r4, #52]	; 0x34
 8003a14:	63a5      	str	r5, [r4, #56]	; 0x38
 8003a16:	64a5      	str	r5, [r4, #72]	; 0x48
 8003a18:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003a1a:	0020      	movs	r0, r4
 8003a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a1e:	3468      	adds	r4, #104	; 0x68
 8003a20:	e7d7      	b.n	80039d2 <__sfp+0x1e>
 8003a22:	2104      	movs	r1, #4
 8003a24:	0038      	movs	r0, r7
 8003a26:	f7ff ff57 	bl	80038d8 <__sfmoreglue>
 8003a2a:	1e04      	subs	r4, r0, #0
 8003a2c:	6030      	str	r0, [r6, #0]
 8003a2e:	d1d5      	bne.n	80039dc <__sfp+0x28>
 8003a30:	f7ff ff70 	bl	8003914 <__sfp_lock_release>
 8003a34:	230c      	movs	r3, #12
 8003a36:	603b      	str	r3, [r7, #0]
 8003a38:	e7ef      	b.n	8003a1a <__sfp+0x66>
 8003a3a:	46c0      	nop			; (mov r8, r8)
 8003a3c:	08004c00 	.word	0x08004c00
 8003a40:	ffff0001 	.word	0xffff0001

08003a44 <_fwalk_reent>:
 8003a44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a46:	0004      	movs	r4, r0
 8003a48:	0006      	movs	r6, r0
 8003a4a:	2700      	movs	r7, #0
 8003a4c:	9101      	str	r1, [sp, #4]
 8003a4e:	3448      	adds	r4, #72	; 0x48
 8003a50:	6863      	ldr	r3, [r4, #4]
 8003a52:	68a5      	ldr	r5, [r4, #8]
 8003a54:	9300      	str	r3, [sp, #0]
 8003a56:	9b00      	ldr	r3, [sp, #0]
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	9300      	str	r3, [sp, #0]
 8003a5c:	d504      	bpl.n	8003a68 <_fwalk_reent+0x24>
 8003a5e:	6824      	ldr	r4, [r4, #0]
 8003a60:	2c00      	cmp	r4, #0
 8003a62:	d1f5      	bne.n	8003a50 <_fwalk_reent+0xc>
 8003a64:	0038      	movs	r0, r7
 8003a66:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003a68:	89ab      	ldrh	r3, [r5, #12]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d908      	bls.n	8003a80 <_fwalk_reent+0x3c>
 8003a6e:	220e      	movs	r2, #14
 8003a70:	5eab      	ldrsh	r3, [r5, r2]
 8003a72:	3301      	adds	r3, #1
 8003a74:	d004      	beq.n	8003a80 <_fwalk_reent+0x3c>
 8003a76:	0029      	movs	r1, r5
 8003a78:	0030      	movs	r0, r6
 8003a7a:	9b01      	ldr	r3, [sp, #4]
 8003a7c:	4798      	blx	r3
 8003a7e:	4307      	orrs	r7, r0
 8003a80:	3568      	adds	r5, #104	; 0x68
 8003a82:	e7e8      	b.n	8003a56 <_fwalk_reent+0x12>

08003a84 <__retarget_lock_init_recursive>:
 8003a84:	4770      	bx	lr

08003a86 <__retarget_lock_acquire_recursive>:
 8003a86:	4770      	bx	lr

08003a88 <__retarget_lock_release_recursive>:
 8003a88:	4770      	bx	lr
	...

08003a8c <sbrk_aligned>:
 8003a8c:	b570      	push	{r4, r5, r6, lr}
 8003a8e:	4e0f      	ldr	r6, [pc, #60]	; (8003acc <sbrk_aligned+0x40>)
 8003a90:	000d      	movs	r5, r1
 8003a92:	6831      	ldr	r1, [r6, #0]
 8003a94:	0004      	movs	r4, r0
 8003a96:	2900      	cmp	r1, #0
 8003a98:	d102      	bne.n	8003aa0 <sbrk_aligned+0x14>
 8003a9a:	f000 fcd5 	bl	8004448 <_sbrk_r>
 8003a9e:	6030      	str	r0, [r6, #0]
 8003aa0:	0029      	movs	r1, r5
 8003aa2:	0020      	movs	r0, r4
 8003aa4:	f000 fcd0 	bl	8004448 <_sbrk_r>
 8003aa8:	1c43      	adds	r3, r0, #1
 8003aaa:	d00a      	beq.n	8003ac2 <sbrk_aligned+0x36>
 8003aac:	2303      	movs	r3, #3
 8003aae:	1cc5      	adds	r5, r0, #3
 8003ab0:	439d      	bics	r5, r3
 8003ab2:	42a8      	cmp	r0, r5
 8003ab4:	d007      	beq.n	8003ac6 <sbrk_aligned+0x3a>
 8003ab6:	1a29      	subs	r1, r5, r0
 8003ab8:	0020      	movs	r0, r4
 8003aba:	f000 fcc5 	bl	8004448 <_sbrk_r>
 8003abe:	1c43      	adds	r3, r0, #1
 8003ac0:	d101      	bne.n	8003ac6 <sbrk_aligned+0x3a>
 8003ac2:	2501      	movs	r5, #1
 8003ac4:	426d      	negs	r5, r5
 8003ac6:	0028      	movs	r0, r5
 8003ac8:	bd70      	pop	{r4, r5, r6, pc}
 8003aca:	46c0      	nop			; (mov r8, r8)
 8003acc:	200001c8 	.word	0x200001c8

08003ad0 <_malloc_r>:
 8003ad0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ad2:	2203      	movs	r2, #3
 8003ad4:	1ccb      	adds	r3, r1, #3
 8003ad6:	4393      	bics	r3, r2
 8003ad8:	3308      	adds	r3, #8
 8003ada:	0006      	movs	r6, r0
 8003adc:	001f      	movs	r7, r3
 8003ade:	2b0c      	cmp	r3, #12
 8003ae0:	d232      	bcs.n	8003b48 <_malloc_r+0x78>
 8003ae2:	270c      	movs	r7, #12
 8003ae4:	42b9      	cmp	r1, r7
 8003ae6:	d831      	bhi.n	8003b4c <_malloc_r+0x7c>
 8003ae8:	0030      	movs	r0, r6
 8003aea:	f000 ff69 	bl	80049c0 <__malloc_lock>
 8003aee:	4d32      	ldr	r5, [pc, #200]	; (8003bb8 <_malloc_r+0xe8>)
 8003af0:	682b      	ldr	r3, [r5, #0]
 8003af2:	001c      	movs	r4, r3
 8003af4:	2c00      	cmp	r4, #0
 8003af6:	d12e      	bne.n	8003b56 <_malloc_r+0x86>
 8003af8:	0039      	movs	r1, r7
 8003afa:	0030      	movs	r0, r6
 8003afc:	f7ff ffc6 	bl	8003a8c <sbrk_aligned>
 8003b00:	0004      	movs	r4, r0
 8003b02:	1c43      	adds	r3, r0, #1
 8003b04:	d11e      	bne.n	8003b44 <_malloc_r+0x74>
 8003b06:	682c      	ldr	r4, [r5, #0]
 8003b08:	0025      	movs	r5, r4
 8003b0a:	2d00      	cmp	r5, #0
 8003b0c:	d14a      	bne.n	8003ba4 <_malloc_r+0xd4>
 8003b0e:	6823      	ldr	r3, [r4, #0]
 8003b10:	0029      	movs	r1, r5
 8003b12:	18e3      	adds	r3, r4, r3
 8003b14:	0030      	movs	r0, r6
 8003b16:	9301      	str	r3, [sp, #4]
 8003b18:	f000 fc96 	bl	8004448 <_sbrk_r>
 8003b1c:	9b01      	ldr	r3, [sp, #4]
 8003b1e:	4283      	cmp	r3, r0
 8003b20:	d143      	bne.n	8003baa <_malloc_r+0xda>
 8003b22:	6823      	ldr	r3, [r4, #0]
 8003b24:	3703      	adds	r7, #3
 8003b26:	1aff      	subs	r7, r7, r3
 8003b28:	2303      	movs	r3, #3
 8003b2a:	439f      	bics	r7, r3
 8003b2c:	3708      	adds	r7, #8
 8003b2e:	2f0c      	cmp	r7, #12
 8003b30:	d200      	bcs.n	8003b34 <_malloc_r+0x64>
 8003b32:	270c      	movs	r7, #12
 8003b34:	0039      	movs	r1, r7
 8003b36:	0030      	movs	r0, r6
 8003b38:	f7ff ffa8 	bl	8003a8c <sbrk_aligned>
 8003b3c:	1c43      	adds	r3, r0, #1
 8003b3e:	d034      	beq.n	8003baa <_malloc_r+0xda>
 8003b40:	6823      	ldr	r3, [r4, #0]
 8003b42:	19df      	adds	r7, r3, r7
 8003b44:	6027      	str	r7, [r4, #0]
 8003b46:	e013      	b.n	8003b70 <_malloc_r+0xa0>
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	dacb      	bge.n	8003ae4 <_malloc_r+0x14>
 8003b4c:	230c      	movs	r3, #12
 8003b4e:	2500      	movs	r5, #0
 8003b50:	6033      	str	r3, [r6, #0]
 8003b52:	0028      	movs	r0, r5
 8003b54:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003b56:	6822      	ldr	r2, [r4, #0]
 8003b58:	1bd1      	subs	r1, r2, r7
 8003b5a:	d420      	bmi.n	8003b9e <_malloc_r+0xce>
 8003b5c:	290b      	cmp	r1, #11
 8003b5e:	d917      	bls.n	8003b90 <_malloc_r+0xc0>
 8003b60:	19e2      	adds	r2, r4, r7
 8003b62:	6027      	str	r7, [r4, #0]
 8003b64:	42a3      	cmp	r3, r4
 8003b66:	d111      	bne.n	8003b8c <_malloc_r+0xbc>
 8003b68:	602a      	str	r2, [r5, #0]
 8003b6a:	6863      	ldr	r3, [r4, #4]
 8003b6c:	6011      	str	r1, [r2, #0]
 8003b6e:	6053      	str	r3, [r2, #4]
 8003b70:	0030      	movs	r0, r6
 8003b72:	0025      	movs	r5, r4
 8003b74:	f000 ff2c 	bl	80049d0 <__malloc_unlock>
 8003b78:	2207      	movs	r2, #7
 8003b7a:	350b      	adds	r5, #11
 8003b7c:	1d23      	adds	r3, r4, #4
 8003b7e:	4395      	bics	r5, r2
 8003b80:	1aea      	subs	r2, r5, r3
 8003b82:	429d      	cmp	r5, r3
 8003b84:	d0e5      	beq.n	8003b52 <_malloc_r+0x82>
 8003b86:	1b5b      	subs	r3, r3, r5
 8003b88:	50a3      	str	r3, [r4, r2]
 8003b8a:	e7e2      	b.n	8003b52 <_malloc_r+0x82>
 8003b8c:	605a      	str	r2, [r3, #4]
 8003b8e:	e7ec      	b.n	8003b6a <_malloc_r+0x9a>
 8003b90:	6862      	ldr	r2, [r4, #4]
 8003b92:	42a3      	cmp	r3, r4
 8003b94:	d101      	bne.n	8003b9a <_malloc_r+0xca>
 8003b96:	602a      	str	r2, [r5, #0]
 8003b98:	e7ea      	b.n	8003b70 <_malloc_r+0xa0>
 8003b9a:	605a      	str	r2, [r3, #4]
 8003b9c:	e7e8      	b.n	8003b70 <_malloc_r+0xa0>
 8003b9e:	0023      	movs	r3, r4
 8003ba0:	6864      	ldr	r4, [r4, #4]
 8003ba2:	e7a7      	b.n	8003af4 <_malloc_r+0x24>
 8003ba4:	002c      	movs	r4, r5
 8003ba6:	686d      	ldr	r5, [r5, #4]
 8003ba8:	e7af      	b.n	8003b0a <_malloc_r+0x3a>
 8003baa:	230c      	movs	r3, #12
 8003bac:	0030      	movs	r0, r6
 8003bae:	6033      	str	r3, [r6, #0]
 8003bb0:	f000 ff0e 	bl	80049d0 <__malloc_unlock>
 8003bb4:	e7cd      	b.n	8003b52 <_malloc_r+0x82>
 8003bb6:	46c0      	nop			; (mov r8, r8)
 8003bb8:	200001c4 	.word	0x200001c4

08003bbc <__ssputs_r>:
 8003bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bbe:	688e      	ldr	r6, [r1, #8]
 8003bc0:	b085      	sub	sp, #20
 8003bc2:	0007      	movs	r7, r0
 8003bc4:	000c      	movs	r4, r1
 8003bc6:	9203      	str	r2, [sp, #12]
 8003bc8:	9301      	str	r3, [sp, #4]
 8003bca:	429e      	cmp	r6, r3
 8003bcc:	d83c      	bhi.n	8003c48 <__ssputs_r+0x8c>
 8003bce:	2390      	movs	r3, #144	; 0x90
 8003bd0:	898a      	ldrh	r2, [r1, #12]
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	421a      	tst	r2, r3
 8003bd6:	d034      	beq.n	8003c42 <__ssputs_r+0x86>
 8003bd8:	6909      	ldr	r1, [r1, #16]
 8003bda:	6823      	ldr	r3, [r4, #0]
 8003bdc:	6960      	ldr	r0, [r4, #20]
 8003bde:	1a5b      	subs	r3, r3, r1
 8003be0:	9302      	str	r3, [sp, #8]
 8003be2:	2303      	movs	r3, #3
 8003be4:	4343      	muls	r3, r0
 8003be6:	0fdd      	lsrs	r5, r3, #31
 8003be8:	18ed      	adds	r5, r5, r3
 8003bea:	9b01      	ldr	r3, [sp, #4]
 8003bec:	9802      	ldr	r0, [sp, #8]
 8003bee:	3301      	adds	r3, #1
 8003bf0:	181b      	adds	r3, r3, r0
 8003bf2:	106d      	asrs	r5, r5, #1
 8003bf4:	42ab      	cmp	r3, r5
 8003bf6:	d900      	bls.n	8003bfa <__ssputs_r+0x3e>
 8003bf8:	001d      	movs	r5, r3
 8003bfa:	0553      	lsls	r3, r2, #21
 8003bfc:	d532      	bpl.n	8003c64 <__ssputs_r+0xa8>
 8003bfe:	0029      	movs	r1, r5
 8003c00:	0038      	movs	r0, r7
 8003c02:	f7ff ff65 	bl	8003ad0 <_malloc_r>
 8003c06:	1e06      	subs	r6, r0, #0
 8003c08:	d109      	bne.n	8003c1e <__ssputs_r+0x62>
 8003c0a:	230c      	movs	r3, #12
 8003c0c:	603b      	str	r3, [r7, #0]
 8003c0e:	2340      	movs	r3, #64	; 0x40
 8003c10:	2001      	movs	r0, #1
 8003c12:	89a2      	ldrh	r2, [r4, #12]
 8003c14:	4240      	negs	r0, r0
 8003c16:	4313      	orrs	r3, r2
 8003c18:	81a3      	strh	r3, [r4, #12]
 8003c1a:	b005      	add	sp, #20
 8003c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c1e:	9a02      	ldr	r2, [sp, #8]
 8003c20:	6921      	ldr	r1, [r4, #16]
 8003c22:	f7ff fde1 	bl	80037e8 <memcpy>
 8003c26:	89a3      	ldrh	r3, [r4, #12]
 8003c28:	4a14      	ldr	r2, [pc, #80]	; (8003c7c <__ssputs_r+0xc0>)
 8003c2a:	401a      	ands	r2, r3
 8003c2c:	2380      	movs	r3, #128	; 0x80
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	81a3      	strh	r3, [r4, #12]
 8003c32:	9b02      	ldr	r3, [sp, #8]
 8003c34:	6126      	str	r6, [r4, #16]
 8003c36:	18f6      	adds	r6, r6, r3
 8003c38:	6026      	str	r6, [r4, #0]
 8003c3a:	6165      	str	r5, [r4, #20]
 8003c3c:	9e01      	ldr	r6, [sp, #4]
 8003c3e:	1aed      	subs	r5, r5, r3
 8003c40:	60a5      	str	r5, [r4, #8]
 8003c42:	9b01      	ldr	r3, [sp, #4]
 8003c44:	429e      	cmp	r6, r3
 8003c46:	d900      	bls.n	8003c4a <__ssputs_r+0x8e>
 8003c48:	9e01      	ldr	r6, [sp, #4]
 8003c4a:	0032      	movs	r2, r6
 8003c4c:	9903      	ldr	r1, [sp, #12]
 8003c4e:	6820      	ldr	r0, [r4, #0]
 8003c50:	f000 fea3 	bl	800499a <memmove>
 8003c54:	68a3      	ldr	r3, [r4, #8]
 8003c56:	2000      	movs	r0, #0
 8003c58:	1b9b      	subs	r3, r3, r6
 8003c5a:	60a3      	str	r3, [r4, #8]
 8003c5c:	6823      	ldr	r3, [r4, #0]
 8003c5e:	199e      	adds	r6, r3, r6
 8003c60:	6026      	str	r6, [r4, #0]
 8003c62:	e7da      	b.n	8003c1a <__ssputs_r+0x5e>
 8003c64:	002a      	movs	r2, r5
 8003c66:	0038      	movs	r0, r7
 8003c68:	f000 ff04 	bl	8004a74 <_realloc_r>
 8003c6c:	1e06      	subs	r6, r0, #0
 8003c6e:	d1e0      	bne.n	8003c32 <__ssputs_r+0x76>
 8003c70:	0038      	movs	r0, r7
 8003c72:	6921      	ldr	r1, [r4, #16]
 8003c74:	f000 feb4 	bl	80049e0 <_free_r>
 8003c78:	e7c7      	b.n	8003c0a <__ssputs_r+0x4e>
 8003c7a:	46c0      	nop			; (mov r8, r8)
 8003c7c:	fffffb7f 	.word	0xfffffb7f

08003c80 <_svfiprintf_r>:
 8003c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c82:	b0a1      	sub	sp, #132	; 0x84
 8003c84:	9003      	str	r0, [sp, #12]
 8003c86:	001d      	movs	r5, r3
 8003c88:	898b      	ldrh	r3, [r1, #12]
 8003c8a:	000f      	movs	r7, r1
 8003c8c:	0016      	movs	r6, r2
 8003c8e:	061b      	lsls	r3, r3, #24
 8003c90:	d511      	bpl.n	8003cb6 <_svfiprintf_r+0x36>
 8003c92:	690b      	ldr	r3, [r1, #16]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d10e      	bne.n	8003cb6 <_svfiprintf_r+0x36>
 8003c98:	2140      	movs	r1, #64	; 0x40
 8003c9a:	f7ff ff19 	bl	8003ad0 <_malloc_r>
 8003c9e:	6038      	str	r0, [r7, #0]
 8003ca0:	6138      	str	r0, [r7, #16]
 8003ca2:	2800      	cmp	r0, #0
 8003ca4:	d105      	bne.n	8003cb2 <_svfiprintf_r+0x32>
 8003ca6:	230c      	movs	r3, #12
 8003ca8:	9a03      	ldr	r2, [sp, #12]
 8003caa:	3801      	subs	r0, #1
 8003cac:	6013      	str	r3, [r2, #0]
 8003cae:	b021      	add	sp, #132	; 0x84
 8003cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cb2:	2340      	movs	r3, #64	; 0x40
 8003cb4:	617b      	str	r3, [r7, #20]
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	ac08      	add	r4, sp, #32
 8003cba:	6163      	str	r3, [r4, #20]
 8003cbc:	3320      	adds	r3, #32
 8003cbe:	7663      	strb	r3, [r4, #25]
 8003cc0:	3310      	adds	r3, #16
 8003cc2:	76a3      	strb	r3, [r4, #26]
 8003cc4:	9507      	str	r5, [sp, #28]
 8003cc6:	0035      	movs	r5, r6
 8003cc8:	782b      	ldrb	r3, [r5, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <_svfiprintf_r+0x52>
 8003cce:	2b25      	cmp	r3, #37	; 0x25
 8003cd0:	d147      	bne.n	8003d62 <_svfiprintf_r+0xe2>
 8003cd2:	1bab      	subs	r3, r5, r6
 8003cd4:	9305      	str	r3, [sp, #20]
 8003cd6:	42b5      	cmp	r5, r6
 8003cd8:	d00c      	beq.n	8003cf4 <_svfiprintf_r+0x74>
 8003cda:	0032      	movs	r2, r6
 8003cdc:	0039      	movs	r1, r7
 8003cde:	9803      	ldr	r0, [sp, #12]
 8003ce0:	f7ff ff6c 	bl	8003bbc <__ssputs_r>
 8003ce4:	1c43      	adds	r3, r0, #1
 8003ce6:	d100      	bne.n	8003cea <_svfiprintf_r+0x6a>
 8003ce8:	e0ae      	b.n	8003e48 <_svfiprintf_r+0x1c8>
 8003cea:	6962      	ldr	r2, [r4, #20]
 8003cec:	9b05      	ldr	r3, [sp, #20]
 8003cee:	4694      	mov	ip, r2
 8003cf0:	4463      	add	r3, ip
 8003cf2:	6163      	str	r3, [r4, #20]
 8003cf4:	782b      	ldrb	r3, [r5, #0]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d100      	bne.n	8003cfc <_svfiprintf_r+0x7c>
 8003cfa:	e0a5      	b.n	8003e48 <_svfiprintf_r+0x1c8>
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	2300      	movs	r3, #0
 8003d00:	4252      	negs	r2, r2
 8003d02:	6062      	str	r2, [r4, #4]
 8003d04:	a904      	add	r1, sp, #16
 8003d06:	3254      	adds	r2, #84	; 0x54
 8003d08:	1852      	adds	r2, r2, r1
 8003d0a:	1c6e      	adds	r6, r5, #1
 8003d0c:	6023      	str	r3, [r4, #0]
 8003d0e:	60e3      	str	r3, [r4, #12]
 8003d10:	60a3      	str	r3, [r4, #8]
 8003d12:	7013      	strb	r3, [r2, #0]
 8003d14:	65a3      	str	r3, [r4, #88]	; 0x58
 8003d16:	2205      	movs	r2, #5
 8003d18:	7831      	ldrb	r1, [r6, #0]
 8003d1a:	4854      	ldr	r0, [pc, #336]	; (8003e6c <_svfiprintf_r+0x1ec>)
 8003d1c:	f000 fe32 	bl	8004984 <memchr>
 8003d20:	1c75      	adds	r5, r6, #1
 8003d22:	2800      	cmp	r0, #0
 8003d24:	d11f      	bne.n	8003d66 <_svfiprintf_r+0xe6>
 8003d26:	6822      	ldr	r2, [r4, #0]
 8003d28:	06d3      	lsls	r3, r2, #27
 8003d2a:	d504      	bpl.n	8003d36 <_svfiprintf_r+0xb6>
 8003d2c:	2353      	movs	r3, #83	; 0x53
 8003d2e:	a904      	add	r1, sp, #16
 8003d30:	185b      	adds	r3, r3, r1
 8003d32:	2120      	movs	r1, #32
 8003d34:	7019      	strb	r1, [r3, #0]
 8003d36:	0713      	lsls	r3, r2, #28
 8003d38:	d504      	bpl.n	8003d44 <_svfiprintf_r+0xc4>
 8003d3a:	2353      	movs	r3, #83	; 0x53
 8003d3c:	a904      	add	r1, sp, #16
 8003d3e:	185b      	adds	r3, r3, r1
 8003d40:	212b      	movs	r1, #43	; 0x2b
 8003d42:	7019      	strb	r1, [r3, #0]
 8003d44:	7833      	ldrb	r3, [r6, #0]
 8003d46:	2b2a      	cmp	r3, #42	; 0x2a
 8003d48:	d016      	beq.n	8003d78 <_svfiprintf_r+0xf8>
 8003d4a:	0035      	movs	r5, r6
 8003d4c:	2100      	movs	r1, #0
 8003d4e:	200a      	movs	r0, #10
 8003d50:	68e3      	ldr	r3, [r4, #12]
 8003d52:	782a      	ldrb	r2, [r5, #0]
 8003d54:	1c6e      	adds	r6, r5, #1
 8003d56:	3a30      	subs	r2, #48	; 0x30
 8003d58:	2a09      	cmp	r2, #9
 8003d5a:	d94e      	bls.n	8003dfa <_svfiprintf_r+0x17a>
 8003d5c:	2900      	cmp	r1, #0
 8003d5e:	d111      	bne.n	8003d84 <_svfiprintf_r+0x104>
 8003d60:	e017      	b.n	8003d92 <_svfiprintf_r+0x112>
 8003d62:	3501      	adds	r5, #1
 8003d64:	e7b0      	b.n	8003cc8 <_svfiprintf_r+0x48>
 8003d66:	4b41      	ldr	r3, [pc, #260]	; (8003e6c <_svfiprintf_r+0x1ec>)
 8003d68:	6822      	ldr	r2, [r4, #0]
 8003d6a:	1ac0      	subs	r0, r0, r3
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	4083      	lsls	r3, r0
 8003d70:	4313      	orrs	r3, r2
 8003d72:	002e      	movs	r6, r5
 8003d74:	6023      	str	r3, [r4, #0]
 8003d76:	e7ce      	b.n	8003d16 <_svfiprintf_r+0x96>
 8003d78:	9b07      	ldr	r3, [sp, #28]
 8003d7a:	1d19      	adds	r1, r3, #4
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	9107      	str	r1, [sp, #28]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	db01      	blt.n	8003d88 <_svfiprintf_r+0x108>
 8003d84:	930b      	str	r3, [sp, #44]	; 0x2c
 8003d86:	e004      	b.n	8003d92 <_svfiprintf_r+0x112>
 8003d88:	425b      	negs	r3, r3
 8003d8a:	60e3      	str	r3, [r4, #12]
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	6023      	str	r3, [r4, #0]
 8003d92:	782b      	ldrb	r3, [r5, #0]
 8003d94:	2b2e      	cmp	r3, #46	; 0x2e
 8003d96:	d10a      	bne.n	8003dae <_svfiprintf_r+0x12e>
 8003d98:	786b      	ldrb	r3, [r5, #1]
 8003d9a:	2b2a      	cmp	r3, #42	; 0x2a
 8003d9c:	d135      	bne.n	8003e0a <_svfiprintf_r+0x18a>
 8003d9e:	9b07      	ldr	r3, [sp, #28]
 8003da0:	3502      	adds	r5, #2
 8003da2:	1d1a      	adds	r2, r3, #4
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	9207      	str	r2, [sp, #28]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	db2b      	blt.n	8003e04 <_svfiprintf_r+0x184>
 8003dac:	9309      	str	r3, [sp, #36]	; 0x24
 8003dae:	4e30      	ldr	r6, [pc, #192]	; (8003e70 <_svfiprintf_r+0x1f0>)
 8003db0:	2203      	movs	r2, #3
 8003db2:	0030      	movs	r0, r6
 8003db4:	7829      	ldrb	r1, [r5, #0]
 8003db6:	f000 fde5 	bl	8004984 <memchr>
 8003dba:	2800      	cmp	r0, #0
 8003dbc:	d006      	beq.n	8003dcc <_svfiprintf_r+0x14c>
 8003dbe:	2340      	movs	r3, #64	; 0x40
 8003dc0:	1b80      	subs	r0, r0, r6
 8003dc2:	4083      	lsls	r3, r0
 8003dc4:	6822      	ldr	r2, [r4, #0]
 8003dc6:	3501      	adds	r5, #1
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	6023      	str	r3, [r4, #0]
 8003dcc:	7829      	ldrb	r1, [r5, #0]
 8003dce:	2206      	movs	r2, #6
 8003dd0:	4828      	ldr	r0, [pc, #160]	; (8003e74 <_svfiprintf_r+0x1f4>)
 8003dd2:	1c6e      	adds	r6, r5, #1
 8003dd4:	7621      	strb	r1, [r4, #24]
 8003dd6:	f000 fdd5 	bl	8004984 <memchr>
 8003dda:	2800      	cmp	r0, #0
 8003ddc:	d03c      	beq.n	8003e58 <_svfiprintf_r+0x1d8>
 8003dde:	4b26      	ldr	r3, [pc, #152]	; (8003e78 <_svfiprintf_r+0x1f8>)
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d125      	bne.n	8003e30 <_svfiprintf_r+0x1b0>
 8003de4:	2207      	movs	r2, #7
 8003de6:	9b07      	ldr	r3, [sp, #28]
 8003de8:	3307      	adds	r3, #7
 8003dea:	4393      	bics	r3, r2
 8003dec:	3308      	adds	r3, #8
 8003dee:	9307      	str	r3, [sp, #28]
 8003df0:	6963      	ldr	r3, [r4, #20]
 8003df2:	9a04      	ldr	r2, [sp, #16]
 8003df4:	189b      	adds	r3, r3, r2
 8003df6:	6163      	str	r3, [r4, #20]
 8003df8:	e765      	b.n	8003cc6 <_svfiprintf_r+0x46>
 8003dfa:	4343      	muls	r3, r0
 8003dfc:	0035      	movs	r5, r6
 8003dfe:	2101      	movs	r1, #1
 8003e00:	189b      	adds	r3, r3, r2
 8003e02:	e7a6      	b.n	8003d52 <_svfiprintf_r+0xd2>
 8003e04:	2301      	movs	r3, #1
 8003e06:	425b      	negs	r3, r3
 8003e08:	e7d0      	b.n	8003dac <_svfiprintf_r+0x12c>
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	200a      	movs	r0, #10
 8003e0e:	001a      	movs	r2, r3
 8003e10:	3501      	adds	r5, #1
 8003e12:	6063      	str	r3, [r4, #4]
 8003e14:	7829      	ldrb	r1, [r5, #0]
 8003e16:	1c6e      	adds	r6, r5, #1
 8003e18:	3930      	subs	r1, #48	; 0x30
 8003e1a:	2909      	cmp	r1, #9
 8003e1c:	d903      	bls.n	8003e26 <_svfiprintf_r+0x1a6>
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d0c5      	beq.n	8003dae <_svfiprintf_r+0x12e>
 8003e22:	9209      	str	r2, [sp, #36]	; 0x24
 8003e24:	e7c3      	b.n	8003dae <_svfiprintf_r+0x12e>
 8003e26:	4342      	muls	r2, r0
 8003e28:	0035      	movs	r5, r6
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	1852      	adds	r2, r2, r1
 8003e2e:	e7f1      	b.n	8003e14 <_svfiprintf_r+0x194>
 8003e30:	ab07      	add	r3, sp, #28
 8003e32:	9300      	str	r3, [sp, #0]
 8003e34:	003a      	movs	r2, r7
 8003e36:	0021      	movs	r1, r4
 8003e38:	4b10      	ldr	r3, [pc, #64]	; (8003e7c <_svfiprintf_r+0x1fc>)
 8003e3a:	9803      	ldr	r0, [sp, #12]
 8003e3c:	e000      	b.n	8003e40 <_svfiprintf_r+0x1c0>
 8003e3e:	bf00      	nop
 8003e40:	9004      	str	r0, [sp, #16]
 8003e42:	9b04      	ldr	r3, [sp, #16]
 8003e44:	3301      	adds	r3, #1
 8003e46:	d1d3      	bne.n	8003df0 <_svfiprintf_r+0x170>
 8003e48:	89bb      	ldrh	r3, [r7, #12]
 8003e4a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003e4c:	065b      	lsls	r3, r3, #25
 8003e4e:	d400      	bmi.n	8003e52 <_svfiprintf_r+0x1d2>
 8003e50:	e72d      	b.n	8003cae <_svfiprintf_r+0x2e>
 8003e52:	2001      	movs	r0, #1
 8003e54:	4240      	negs	r0, r0
 8003e56:	e72a      	b.n	8003cae <_svfiprintf_r+0x2e>
 8003e58:	ab07      	add	r3, sp, #28
 8003e5a:	9300      	str	r3, [sp, #0]
 8003e5c:	003a      	movs	r2, r7
 8003e5e:	0021      	movs	r1, r4
 8003e60:	4b06      	ldr	r3, [pc, #24]	; (8003e7c <_svfiprintf_r+0x1fc>)
 8003e62:	9803      	ldr	r0, [sp, #12]
 8003e64:	f000 f9de 	bl	8004224 <_printf_i>
 8003e68:	e7ea      	b.n	8003e40 <_svfiprintf_r+0x1c0>
 8003e6a:	46c0      	nop			; (mov r8, r8)
 8003e6c:	08004c64 	.word	0x08004c64
 8003e70:	08004c6a 	.word	0x08004c6a
 8003e74:	08004c6e 	.word	0x08004c6e
 8003e78:	00000000 	.word	0x00000000
 8003e7c:	08003bbd 	.word	0x08003bbd

08003e80 <__sfputc_r>:
 8003e80:	6893      	ldr	r3, [r2, #8]
 8003e82:	b510      	push	{r4, lr}
 8003e84:	3b01      	subs	r3, #1
 8003e86:	6093      	str	r3, [r2, #8]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	da04      	bge.n	8003e96 <__sfputc_r+0x16>
 8003e8c:	6994      	ldr	r4, [r2, #24]
 8003e8e:	42a3      	cmp	r3, r4
 8003e90:	db07      	blt.n	8003ea2 <__sfputc_r+0x22>
 8003e92:	290a      	cmp	r1, #10
 8003e94:	d005      	beq.n	8003ea2 <__sfputc_r+0x22>
 8003e96:	6813      	ldr	r3, [r2, #0]
 8003e98:	1c58      	adds	r0, r3, #1
 8003e9a:	6010      	str	r0, [r2, #0]
 8003e9c:	7019      	strb	r1, [r3, #0]
 8003e9e:	0008      	movs	r0, r1
 8003ea0:	bd10      	pop	{r4, pc}
 8003ea2:	f000 fb2f 	bl	8004504 <__swbuf_r>
 8003ea6:	0001      	movs	r1, r0
 8003ea8:	e7f9      	b.n	8003e9e <__sfputc_r+0x1e>

08003eaa <__sfputs_r>:
 8003eaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eac:	0006      	movs	r6, r0
 8003eae:	000f      	movs	r7, r1
 8003eb0:	0014      	movs	r4, r2
 8003eb2:	18d5      	adds	r5, r2, r3
 8003eb4:	42ac      	cmp	r4, r5
 8003eb6:	d101      	bne.n	8003ebc <__sfputs_r+0x12>
 8003eb8:	2000      	movs	r0, #0
 8003eba:	e007      	b.n	8003ecc <__sfputs_r+0x22>
 8003ebc:	7821      	ldrb	r1, [r4, #0]
 8003ebe:	003a      	movs	r2, r7
 8003ec0:	0030      	movs	r0, r6
 8003ec2:	f7ff ffdd 	bl	8003e80 <__sfputc_r>
 8003ec6:	3401      	adds	r4, #1
 8003ec8:	1c43      	adds	r3, r0, #1
 8003eca:	d1f3      	bne.n	8003eb4 <__sfputs_r+0xa>
 8003ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003ed0 <_vfiprintf_r>:
 8003ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ed2:	b0a1      	sub	sp, #132	; 0x84
 8003ed4:	0006      	movs	r6, r0
 8003ed6:	000c      	movs	r4, r1
 8003ed8:	001f      	movs	r7, r3
 8003eda:	9203      	str	r2, [sp, #12]
 8003edc:	2800      	cmp	r0, #0
 8003ede:	d004      	beq.n	8003eea <_vfiprintf_r+0x1a>
 8003ee0:	6983      	ldr	r3, [r0, #24]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <_vfiprintf_r+0x1a>
 8003ee6:	f7ff fd2d 	bl	8003944 <__sinit>
 8003eea:	4b8e      	ldr	r3, [pc, #568]	; (8004124 <_vfiprintf_r+0x254>)
 8003eec:	429c      	cmp	r4, r3
 8003eee:	d11c      	bne.n	8003f2a <_vfiprintf_r+0x5a>
 8003ef0:	6874      	ldr	r4, [r6, #4]
 8003ef2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ef4:	07db      	lsls	r3, r3, #31
 8003ef6:	d405      	bmi.n	8003f04 <_vfiprintf_r+0x34>
 8003ef8:	89a3      	ldrh	r3, [r4, #12]
 8003efa:	059b      	lsls	r3, r3, #22
 8003efc:	d402      	bmi.n	8003f04 <_vfiprintf_r+0x34>
 8003efe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f00:	f7ff fdc1 	bl	8003a86 <__retarget_lock_acquire_recursive>
 8003f04:	89a3      	ldrh	r3, [r4, #12]
 8003f06:	071b      	lsls	r3, r3, #28
 8003f08:	d502      	bpl.n	8003f10 <_vfiprintf_r+0x40>
 8003f0a:	6923      	ldr	r3, [r4, #16]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d11d      	bne.n	8003f4c <_vfiprintf_r+0x7c>
 8003f10:	0021      	movs	r1, r4
 8003f12:	0030      	movs	r0, r6
 8003f14:	f000 fb60 	bl	80045d8 <__swsetup_r>
 8003f18:	2800      	cmp	r0, #0
 8003f1a:	d017      	beq.n	8003f4c <_vfiprintf_r+0x7c>
 8003f1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f1e:	07db      	lsls	r3, r3, #31
 8003f20:	d50d      	bpl.n	8003f3e <_vfiprintf_r+0x6e>
 8003f22:	2001      	movs	r0, #1
 8003f24:	4240      	negs	r0, r0
 8003f26:	b021      	add	sp, #132	; 0x84
 8003f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f2a:	4b7f      	ldr	r3, [pc, #508]	; (8004128 <_vfiprintf_r+0x258>)
 8003f2c:	429c      	cmp	r4, r3
 8003f2e:	d101      	bne.n	8003f34 <_vfiprintf_r+0x64>
 8003f30:	68b4      	ldr	r4, [r6, #8]
 8003f32:	e7de      	b.n	8003ef2 <_vfiprintf_r+0x22>
 8003f34:	4b7d      	ldr	r3, [pc, #500]	; (800412c <_vfiprintf_r+0x25c>)
 8003f36:	429c      	cmp	r4, r3
 8003f38:	d1db      	bne.n	8003ef2 <_vfiprintf_r+0x22>
 8003f3a:	68f4      	ldr	r4, [r6, #12]
 8003f3c:	e7d9      	b.n	8003ef2 <_vfiprintf_r+0x22>
 8003f3e:	89a3      	ldrh	r3, [r4, #12]
 8003f40:	059b      	lsls	r3, r3, #22
 8003f42:	d4ee      	bmi.n	8003f22 <_vfiprintf_r+0x52>
 8003f44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f46:	f7ff fd9f 	bl	8003a88 <__retarget_lock_release_recursive>
 8003f4a:	e7ea      	b.n	8003f22 <_vfiprintf_r+0x52>
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	ad08      	add	r5, sp, #32
 8003f50:	616b      	str	r3, [r5, #20]
 8003f52:	3320      	adds	r3, #32
 8003f54:	766b      	strb	r3, [r5, #25]
 8003f56:	3310      	adds	r3, #16
 8003f58:	76ab      	strb	r3, [r5, #26]
 8003f5a:	9707      	str	r7, [sp, #28]
 8003f5c:	9f03      	ldr	r7, [sp, #12]
 8003f5e:	783b      	ldrb	r3, [r7, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d001      	beq.n	8003f68 <_vfiprintf_r+0x98>
 8003f64:	2b25      	cmp	r3, #37	; 0x25
 8003f66:	d14e      	bne.n	8004006 <_vfiprintf_r+0x136>
 8003f68:	9b03      	ldr	r3, [sp, #12]
 8003f6a:	1afb      	subs	r3, r7, r3
 8003f6c:	9305      	str	r3, [sp, #20]
 8003f6e:	9b03      	ldr	r3, [sp, #12]
 8003f70:	429f      	cmp	r7, r3
 8003f72:	d00d      	beq.n	8003f90 <_vfiprintf_r+0xc0>
 8003f74:	9b05      	ldr	r3, [sp, #20]
 8003f76:	0021      	movs	r1, r4
 8003f78:	0030      	movs	r0, r6
 8003f7a:	9a03      	ldr	r2, [sp, #12]
 8003f7c:	f7ff ff95 	bl	8003eaa <__sfputs_r>
 8003f80:	1c43      	adds	r3, r0, #1
 8003f82:	d100      	bne.n	8003f86 <_vfiprintf_r+0xb6>
 8003f84:	e0b5      	b.n	80040f2 <_vfiprintf_r+0x222>
 8003f86:	696a      	ldr	r2, [r5, #20]
 8003f88:	9b05      	ldr	r3, [sp, #20]
 8003f8a:	4694      	mov	ip, r2
 8003f8c:	4463      	add	r3, ip
 8003f8e:	616b      	str	r3, [r5, #20]
 8003f90:	783b      	ldrb	r3, [r7, #0]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d100      	bne.n	8003f98 <_vfiprintf_r+0xc8>
 8003f96:	e0ac      	b.n	80040f2 <_vfiprintf_r+0x222>
 8003f98:	2201      	movs	r2, #1
 8003f9a:	1c7b      	adds	r3, r7, #1
 8003f9c:	9303      	str	r3, [sp, #12]
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	4252      	negs	r2, r2
 8003fa2:	606a      	str	r2, [r5, #4]
 8003fa4:	a904      	add	r1, sp, #16
 8003fa6:	3254      	adds	r2, #84	; 0x54
 8003fa8:	1852      	adds	r2, r2, r1
 8003faa:	602b      	str	r3, [r5, #0]
 8003fac:	60eb      	str	r3, [r5, #12]
 8003fae:	60ab      	str	r3, [r5, #8]
 8003fb0:	7013      	strb	r3, [r2, #0]
 8003fb2:	65ab      	str	r3, [r5, #88]	; 0x58
 8003fb4:	9b03      	ldr	r3, [sp, #12]
 8003fb6:	2205      	movs	r2, #5
 8003fb8:	7819      	ldrb	r1, [r3, #0]
 8003fba:	485d      	ldr	r0, [pc, #372]	; (8004130 <_vfiprintf_r+0x260>)
 8003fbc:	f000 fce2 	bl	8004984 <memchr>
 8003fc0:	9b03      	ldr	r3, [sp, #12]
 8003fc2:	1c5f      	adds	r7, r3, #1
 8003fc4:	2800      	cmp	r0, #0
 8003fc6:	d120      	bne.n	800400a <_vfiprintf_r+0x13a>
 8003fc8:	682a      	ldr	r2, [r5, #0]
 8003fca:	06d3      	lsls	r3, r2, #27
 8003fcc:	d504      	bpl.n	8003fd8 <_vfiprintf_r+0x108>
 8003fce:	2353      	movs	r3, #83	; 0x53
 8003fd0:	a904      	add	r1, sp, #16
 8003fd2:	185b      	adds	r3, r3, r1
 8003fd4:	2120      	movs	r1, #32
 8003fd6:	7019      	strb	r1, [r3, #0]
 8003fd8:	0713      	lsls	r3, r2, #28
 8003fda:	d504      	bpl.n	8003fe6 <_vfiprintf_r+0x116>
 8003fdc:	2353      	movs	r3, #83	; 0x53
 8003fde:	a904      	add	r1, sp, #16
 8003fe0:	185b      	adds	r3, r3, r1
 8003fe2:	212b      	movs	r1, #43	; 0x2b
 8003fe4:	7019      	strb	r1, [r3, #0]
 8003fe6:	9b03      	ldr	r3, [sp, #12]
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	2b2a      	cmp	r3, #42	; 0x2a
 8003fec:	d016      	beq.n	800401c <_vfiprintf_r+0x14c>
 8003fee:	2100      	movs	r1, #0
 8003ff0:	68eb      	ldr	r3, [r5, #12]
 8003ff2:	9f03      	ldr	r7, [sp, #12]
 8003ff4:	783a      	ldrb	r2, [r7, #0]
 8003ff6:	1c78      	adds	r0, r7, #1
 8003ff8:	3a30      	subs	r2, #48	; 0x30
 8003ffa:	4684      	mov	ip, r0
 8003ffc:	2a09      	cmp	r2, #9
 8003ffe:	d94f      	bls.n	80040a0 <_vfiprintf_r+0x1d0>
 8004000:	2900      	cmp	r1, #0
 8004002:	d111      	bne.n	8004028 <_vfiprintf_r+0x158>
 8004004:	e017      	b.n	8004036 <_vfiprintf_r+0x166>
 8004006:	3701      	adds	r7, #1
 8004008:	e7a9      	b.n	8003f5e <_vfiprintf_r+0x8e>
 800400a:	4b49      	ldr	r3, [pc, #292]	; (8004130 <_vfiprintf_r+0x260>)
 800400c:	682a      	ldr	r2, [r5, #0]
 800400e:	1ac0      	subs	r0, r0, r3
 8004010:	2301      	movs	r3, #1
 8004012:	4083      	lsls	r3, r0
 8004014:	4313      	orrs	r3, r2
 8004016:	602b      	str	r3, [r5, #0]
 8004018:	9703      	str	r7, [sp, #12]
 800401a:	e7cb      	b.n	8003fb4 <_vfiprintf_r+0xe4>
 800401c:	9b07      	ldr	r3, [sp, #28]
 800401e:	1d19      	adds	r1, r3, #4
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	9107      	str	r1, [sp, #28]
 8004024:	2b00      	cmp	r3, #0
 8004026:	db01      	blt.n	800402c <_vfiprintf_r+0x15c>
 8004028:	930b      	str	r3, [sp, #44]	; 0x2c
 800402a:	e004      	b.n	8004036 <_vfiprintf_r+0x166>
 800402c:	425b      	negs	r3, r3
 800402e:	60eb      	str	r3, [r5, #12]
 8004030:	2302      	movs	r3, #2
 8004032:	4313      	orrs	r3, r2
 8004034:	602b      	str	r3, [r5, #0]
 8004036:	783b      	ldrb	r3, [r7, #0]
 8004038:	2b2e      	cmp	r3, #46	; 0x2e
 800403a:	d10a      	bne.n	8004052 <_vfiprintf_r+0x182>
 800403c:	787b      	ldrb	r3, [r7, #1]
 800403e:	2b2a      	cmp	r3, #42	; 0x2a
 8004040:	d137      	bne.n	80040b2 <_vfiprintf_r+0x1e2>
 8004042:	9b07      	ldr	r3, [sp, #28]
 8004044:	3702      	adds	r7, #2
 8004046:	1d1a      	adds	r2, r3, #4
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	9207      	str	r2, [sp, #28]
 800404c:	2b00      	cmp	r3, #0
 800404e:	db2d      	blt.n	80040ac <_vfiprintf_r+0x1dc>
 8004050:	9309      	str	r3, [sp, #36]	; 0x24
 8004052:	2203      	movs	r2, #3
 8004054:	7839      	ldrb	r1, [r7, #0]
 8004056:	4837      	ldr	r0, [pc, #220]	; (8004134 <_vfiprintf_r+0x264>)
 8004058:	f000 fc94 	bl	8004984 <memchr>
 800405c:	2800      	cmp	r0, #0
 800405e:	d007      	beq.n	8004070 <_vfiprintf_r+0x1a0>
 8004060:	4b34      	ldr	r3, [pc, #208]	; (8004134 <_vfiprintf_r+0x264>)
 8004062:	682a      	ldr	r2, [r5, #0]
 8004064:	1ac0      	subs	r0, r0, r3
 8004066:	2340      	movs	r3, #64	; 0x40
 8004068:	4083      	lsls	r3, r0
 800406a:	4313      	orrs	r3, r2
 800406c:	3701      	adds	r7, #1
 800406e:	602b      	str	r3, [r5, #0]
 8004070:	7839      	ldrb	r1, [r7, #0]
 8004072:	1c7b      	adds	r3, r7, #1
 8004074:	2206      	movs	r2, #6
 8004076:	4830      	ldr	r0, [pc, #192]	; (8004138 <_vfiprintf_r+0x268>)
 8004078:	9303      	str	r3, [sp, #12]
 800407a:	7629      	strb	r1, [r5, #24]
 800407c:	f000 fc82 	bl	8004984 <memchr>
 8004080:	2800      	cmp	r0, #0
 8004082:	d045      	beq.n	8004110 <_vfiprintf_r+0x240>
 8004084:	4b2d      	ldr	r3, [pc, #180]	; (800413c <_vfiprintf_r+0x26c>)
 8004086:	2b00      	cmp	r3, #0
 8004088:	d127      	bne.n	80040da <_vfiprintf_r+0x20a>
 800408a:	2207      	movs	r2, #7
 800408c:	9b07      	ldr	r3, [sp, #28]
 800408e:	3307      	adds	r3, #7
 8004090:	4393      	bics	r3, r2
 8004092:	3308      	adds	r3, #8
 8004094:	9307      	str	r3, [sp, #28]
 8004096:	696b      	ldr	r3, [r5, #20]
 8004098:	9a04      	ldr	r2, [sp, #16]
 800409a:	189b      	adds	r3, r3, r2
 800409c:	616b      	str	r3, [r5, #20]
 800409e:	e75d      	b.n	8003f5c <_vfiprintf_r+0x8c>
 80040a0:	210a      	movs	r1, #10
 80040a2:	434b      	muls	r3, r1
 80040a4:	4667      	mov	r7, ip
 80040a6:	189b      	adds	r3, r3, r2
 80040a8:	3909      	subs	r1, #9
 80040aa:	e7a3      	b.n	8003ff4 <_vfiprintf_r+0x124>
 80040ac:	2301      	movs	r3, #1
 80040ae:	425b      	negs	r3, r3
 80040b0:	e7ce      	b.n	8004050 <_vfiprintf_r+0x180>
 80040b2:	2300      	movs	r3, #0
 80040b4:	001a      	movs	r2, r3
 80040b6:	3701      	adds	r7, #1
 80040b8:	606b      	str	r3, [r5, #4]
 80040ba:	7839      	ldrb	r1, [r7, #0]
 80040bc:	1c78      	adds	r0, r7, #1
 80040be:	3930      	subs	r1, #48	; 0x30
 80040c0:	4684      	mov	ip, r0
 80040c2:	2909      	cmp	r1, #9
 80040c4:	d903      	bls.n	80040ce <_vfiprintf_r+0x1fe>
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d0c3      	beq.n	8004052 <_vfiprintf_r+0x182>
 80040ca:	9209      	str	r2, [sp, #36]	; 0x24
 80040cc:	e7c1      	b.n	8004052 <_vfiprintf_r+0x182>
 80040ce:	230a      	movs	r3, #10
 80040d0:	435a      	muls	r2, r3
 80040d2:	4667      	mov	r7, ip
 80040d4:	1852      	adds	r2, r2, r1
 80040d6:	3b09      	subs	r3, #9
 80040d8:	e7ef      	b.n	80040ba <_vfiprintf_r+0x1ea>
 80040da:	ab07      	add	r3, sp, #28
 80040dc:	9300      	str	r3, [sp, #0]
 80040de:	0022      	movs	r2, r4
 80040e0:	0029      	movs	r1, r5
 80040e2:	0030      	movs	r0, r6
 80040e4:	4b16      	ldr	r3, [pc, #88]	; (8004140 <_vfiprintf_r+0x270>)
 80040e6:	e000      	b.n	80040ea <_vfiprintf_r+0x21a>
 80040e8:	bf00      	nop
 80040ea:	9004      	str	r0, [sp, #16]
 80040ec:	9b04      	ldr	r3, [sp, #16]
 80040ee:	3301      	adds	r3, #1
 80040f0:	d1d1      	bne.n	8004096 <_vfiprintf_r+0x1c6>
 80040f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80040f4:	07db      	lsls	r3, r3, #31
 80040f6:	d405      	bmi.n	8004104 <_vfiprintf_r+0x234>
 80040f8:	89a3      	ldrh	r3, [r4, #12]
 80040fa:	059b      	lsls	r3, r3, #22
 80040fc:	d402      	bmi.n	8004104 <_vfiprintf_r+0x234>
 80040fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004100:	f7ff fcc2 	bl	8003a88 <__retarget_lock_release_recursive>
 8004104:	89a3      	ldrh	r3, [r4, #12]
 8004106:	065b      	lsls	r3, r3, #25
 8004108:	d500      	bpl.n	800410c <_vfiprintf_r+0x23c>
 800410a:	e70a      	b.n	8003f22 <_vfiprintf_r+0x52>
 800410c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800410e:	e70a      	b.n	8003f26 <_vfiprintf_r+0x56>
 8004110:	ab07      	add	r3, sp, #28
 8004112:	9300      	str	r3, [sp, #0]
 8004114:	0022      	movs	r2, r4
 8004116:	0029      	movs	r1, r5
 8004118:	0030      	movs	r0, r6
 800411a:	4b09      	ldr	r3, [pc, #36]	; (8004140 <_vfiprintf_r+0x270>)
 800411c:	f000 f882 	bl	8004224 <_printf_i>
 8004120:	e7e3      	b.n	80040ea <_vfiprintf_r+0x21a>
 8004122:	46c0      	nop			; (mov r8, r8)
 8004124:	08004c24 	.word	0x08004c24
 8004128:	08004c44 	.word	0x08004c44
 800412c:	08004c04 	.word	0x08004c04
 8004130:	08004c64 	.word	0x08004c64
 8004134:	08004c6a 	.word	0x08004c6a
 8004138:	08004c6e 	.word	0x08004c6e
 800413c:	00000000 	.word	0x00000000
 8004140:	08003eab 	.word	0x08003eab

08004144 <_printf_common>:
 8004144:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004146:	0015      	movs	r5, r2
 8004148:	9301      	str	r3, [sp, #4]
 800414a:	688a      	ldr	r2, [r1, #8]
 800414c:	690b      	ldr	r3, [r1, #16]
 800414e:	000c      	movs	r4, r1
 8004150:	9000      	str	r0, [sp, #0]
 8004152:	4293      	cmp	r3, r2
 8004154:	da00      	bge.n	8004158 <_printf_common+0x14>
 8004156:	0013      	movs	r3, r2
 8004158:	0022      	movs	r2, r4
 800415a:	602b      	str	r3, [r5, #0]
 800415c:	3243      	adds	r2, #67	; 0x43
 800415e:	7812      	ldrb	r2, [r2, #0]
 8004160:	2a00      	cmp	r2, #0
 8004162:	d001      	beq.n	8004168 <_printf_common+0x24>
 8004164:	3301      	adds	r3, #1
 8004166:	602b      	str	r3, [r5, #0]
 8004168:	6823      	ldr	r3, [r4, #0]
 800416a:	069b      	lsls	r3, r3, #26
 800416c:	d502      	bpl.n	8004174 <_printf_common+0x30>
 800416e:	682b      	ldr	r3, [r5, #0]
 8004170:	3302      	adds	r3, #2
 8004172:	602b      	str	r3, [r5, #0]
 8004174:	6822      	ldr	r2, [r4, #0]
 8004176:	2306      	movs	r3, #6
 8004178:	0017      	movs	r7, r2
 800417a:	401f      	ands	r7, r3
 800417c:	421a      	tst	r2, r3
 800417e:	d027      	beq.n	80041d0 <_printf_common+0x8c>
 8004180:	0023      	movs	r3, r4
 8004182:	3343      	adds	r3, #67	; 0x43
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	1e5a      	subs	r2, r3, #1
 8004188:	4193      	sbcs	r3, r2
 800418a:	6822      	ldr	r2, [r4, #0]
 800418c:	0692      	lsls	r2, r2, #26
 800418e:	d430      	bmi.n	80041f2 <_printf_common+0xae>
 8004190:	0022      	movs	r2, r4
 8004192:	9901      	ldr	r1, [sp, #4]
 8004194:	9800      	ldr	r0, [sp, #0]
 8004196:	9e08      	ldr	r6, [sp, #32]
 8004198:	3243      	adds	r2, #67	; 0x43
 800419a:	47b0      	blx	r6
 800419c:	1c43      	adds	r3, r0, #1
 800419e:	d025      	beq.n	80041ec <_printf_common+0xa8>
 80041a0:	2306      	movs	r3, #6
 80041a2:	6820      	ldr	r0, [r4, #0]
 80041a4:	682a      	ldr	r2, [r5, #0]
 80041a6:	68e1      	ldr	r1, [r4, #12]
 80041a8:	2500      	movs	r5, #0
 80041aa:	4003      	ands	r3, r0
 80041ac:	2b04      	cmp	r3, #4
 80041ae:	d103      	bne.n	80041b8 <_printf_common+0x74>
 80041b0:	1a8d      	subs	r5, r1, r2
 80041b2:	43eb      	mvns	r3, r5
 80041b4:	17db      	asrs	r3, r3, #31
 80041b6:	401d      	ands	r5, r3
 80041b8:	68a3      	ldr	r3, [r4, #8]
 80041ba:	6922      	ldr	r2, [r4, #16]
 80041bc:	4293      	cmp	r3, r2
 80041be:	dd01      	ble.n	80041c4 <_printf_common+0x80>
 80041c0:	1a9b      	subs	r3, r3, r2
 80041c2:	18ed      	adds	r5, r5, r3
 80041c4:	2700      	movs	r7, #0
 80041c6:	42bd      	cmp	r5, r7
 80041c8:	d120      	bne.n	800420c <_printf_common+0xc8>
 80041ca:	2000      	movs	r0, #0
 80041cc:	e010      	b.n	80041f0 <_printf_common+0xac>
 80041ce:	3701      	adds	r7, #1
 80041d0:	68e3      	ldr	r3, [r4, #12]
 80041d2:	682a      	ldr	r2, [r5, #0]
 80041d4:	1a9b      	subs	r3, r3, r2
 80041d6:	42bb      	cmp	r3, r7
 80041d8:	ddd2      	ble.n	8004180 <_printf_common+0x3c>
 80041da:	0022      	movs	r2, r4
 80041dc:	2301      	movs	r3, #1
 80041de:	9901      	ldr	r1, [sp, #4]
 80041e0:	9800      	ldr	r0, [sp, #0]
 80041e2:	9e08      	ldr	r6, [sp, #32]
 80041e4:	3219      	adds	r2, #25
 80041e6:	47b0      	blx	r6
 80041e8:	1c43      	adds	r3, r0, #1
 80041ea:	d1f0      	bne.n	80041ce <_printf_common+0x8a>
 80041ec:	2001      	movs	r0, #1
 80041ee:	4240      	negs	r0, r0
 80041f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80041f2:	2030      	movs	r0, #48	; 0x30
 80041f4:	18e1      	adds	r1, r4, r3
 80041f6:	3143      	adds	r1, #67	; 0x43
 80041f8:	7008      	strb	r0, [r1, #0]
 80041fa:	0021      	movs	r1, r4
 80041fc:	1c5a      	adds	r2, r3, #1
 80041fe:	3145      	adds	r1, #69	; 0x45
 8004200:	7809      	ldrb	r1, [r1, #0]
 8004202:	18a2      	adds	r2, r4, r2
 8004204:	3243      	adds	r2, #67	; 0x43
 8004206:	3302      	adds	r3, #2
 8004208:	7011      	strb	r1, [r2, #0]
 800420a:	e7c1      	b.n	8004190 <_printf_common+0x4c>
 800420c:	0022      	movs	r2, r4
 800420e:	2301      	movs	r3, #1
 8004210:	9901      	ldr	r1, [sp, #4]
 8004212:	9800      	ldr	r0, [sp, #0]
 8004214:	9e08      	ldr	r6, [sp, #32]
 8004216:	321a      	adds	r2, #26
 8004218:	47b0      	blx	r6
 800421a:	1c43      	adds	r3, r0, #1
 800421c:	d0e6      	beq.n	80041ec <_printf_common+0xa8>
 800421e:	3701      	adds	r7, #1
 8004220:	e7d1      	b.n	80041c6 <_printf_common+0x82>
	...

08004224 <_printf_i>:
 8004224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004226:	b08b      	sub	sp, #44	; 0x2c
 8004228:	9206      	str	r2, [sp, #24]
 800422a:	000a      	movs	r2, r1
 800422c:	3243      	adds	r2, #67	; 0x43
 800422e:	9307      	str	r3, [sp, #28]
 8004230:	9005      	str	r0, [sp, #20]
 8004232:	9204      	str	r2, [sp, #16]
 8004234:	7e0a      	ldrb	r2, [r1, #24]
 8004236:	000c      	movs	r4, r1
 8004238:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800423a:	2a78      	cmp	r2, #120	; 0x78
 800423c:	d807      	bhi.n	800424e <_printf_i+0x2a>
 800423e:	2a62      	cmp	r2, #98	; 0x62
 8004240:	d809      	bhi.n	8004256 <_printf_i+0x32>
 8004242:	2a00      	cmp	r2, #0
 8004244:	d100      	bne.n	8004248 <_printf_i+0x24>
 8004246:	e0c1      	b.n	80043cc <_printf_i+0x1a8>
 8004248:	2a58      	cmp	r2, #88	; 0x58
 800424a:	d100      	bne.n	800424e <_printf_i+0x2a>
 800424c:	e08c      	b.n	8004368 <_printf_i+0x144>
 800424e:	0026      	movs	r6, r4
 8004250:	3642      	adds	r6, #66	; 0x42
 8004252:	7032      	strb	r2, [r6, #0]
 8004254:	e022      	b.n	800429c <_printf_i+0x78>
 8004256:	0010      	movs	r0, r2
 8004258:	3863      	subs	r0, #99	; 0x63
 800425a:	2815      	cmp	r0, #21
 800425c:	d8f7      	bhi.n	800424e <_printf_i+0x2a>
 800425e:	f7fb ff53 	bl	8000108 <__gnu_thumb1_case_shi>
 8004262:	0016      	.short	0x0016
 8004264:	fff6001f 	.word	0xfff6001f
 8004268:	fff6fff6 	.word	0xfff6fff6
 800426c:	001ffff6 	.word	0x001ffff6
 8004270:	fff6fff6 	.word	0xfff6fff6
 8004274:	fff6fff6 	.word	0xfff6fff6
 8004278:	003600a8 	.word	0x003600a8
 800427c:	fff6009a 	.word	0xfff6009a
 8004280:	00b9fff6 	.word	0x00b9fff6
 8004284:	0036fff6 	.word	0x0036fff6
 8004288:	fff6fff6 	.word	0xfff6fff6
 800428c:	009e      	.short	0x009e
 800428e:	0026      	movs	r6, r4
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	3642      	adds	r6, #66	; 0x42
 8004294:	1d11      	adds	r1, r2, #4
 8004296:	6019      	str	r1, [r3, #0]
 8004298:	6813      	ldr	r3, [r2, #0]
 800429a:	7033      	strb	r3, [r6, #0]
 800429c:	2301      	movs	r3, #1
 800429e:	e0a7      	b.n	80043f0 <_printf_i+0x1cc>
 80042a0:	6808      	ldr	r0, [r1, #0]
 80042a2:	6819      	ldr	r1, [r3, #0]
 80042a4:	1d0a      	adds	r2, r1, #4
 80042a6:	0605      	lsls	r5, r0, #24
 80042a8:	d50b      	bpl.n	80042c2 <_printf_i+0x9e>
 80042aa:	680d      	ldr	r5, [r1, #0]
 80042ac:	601a      	str	r2, [r3, #0]
 80042ae:	2d00      	cmp	r5, #0
 80042b0:	da03      	bge.n	80042ba <_printf_i+0x96>
 80042b2:	232d      	movs	r3, #45	; 0x2d
 80042b4:	9a04      	ldr	r2, [sp, #16]
 80042b6:	426d      	negs	r5, r5
 80042b8:	7013      	strb	r3, [r2, #0]
 80042ba:	4b61      	ldr	r3, [pc, #388]	; (8004440 <_printf_i+0x21c>)
 80042bc:	270a      	movs	r7, #10
 80042be:	9303      	str	r3, [sp, #12]
 80042c0:	e01b      	b.n	80042fa <_printf_i+0xd6>
 80042c2:	680d      	ldr	r5, [r1, #0]
 80042c4:	601a      	str	r2, [r3, #0]
 80042c6:	0641      	lsls	r1, r0, #25
 80042c8:	d5f1      	bpl.n	80042ae <_printf_i+0x8a>
 80042ca:	b22d      	sxth	r5, r5
 80042cc:	e7ef      	b.n	80042ae <_printf_i+0x8a>
 80042ce:	680d      	ldr	r5, [r1, #0]
 80042d0:	6819      	ldr	r1, [r3, #0]
 80042d2:	1d08      	adds	r0, r1, #4
 80042d4:	6018      	str	r0, [r3, #0]
 80042d6:	062e      	lsls	r6, r5, #24
 80042d8:	d501      	bpl.n	80042de <_printf_i+0xba>
 80042da:	680d      	ldr	r5, [r1, #0]
 80042dc:	e003      	b.n	80042e6 <_printf_i+0xc2>
 80042de:	066d      	lsls	r5, r5, #25
 80042e0:	d5fb      	bpl.n	80042da <_printf_i+0xb6>
 80042e2:	680d      	ldr	r5, [r1, #0]
 80042e4:	b2ad      	uxth	r5, r5
 80042e6:	4b56      	ldr	r3, [pc, #344]	; (8004440 <_printf_i+0x21c>)
 80042e8:	2708      	movs	r7, #8
 80042ea:	9303      	str	r3, [sp, #12]
 80042ec:	2a6f      	cmp	r2, #111	; 0x6f
 80042ee:	d000      	beq.n	80042f2 <_printf_i+0xce>
 80042f0:	3702      	adds	r7, #2
 80042f2:	0023      	movs	r3, r4
 80042f4:	2200      	movs	r2, #0
 80042f6:	3343      	adds	r3, #67	; 0x43
 80042f8:	701a      	strb	r2, [r3, #0]
 80042fa:	6863      	ldr	r3, [r4, #4]
 80042fc:	60a3      	str	r3, [r4, #8]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	db03      	blt.n	800430a <_printf_i+0xe6>
 8004302:	2204      	movs	r2, #4
 8004304:	6821      	ldr	r1, [r4, #0]
 8004306:	4391      	bics	r1, r2
 8004308:	6021      	str	r1, [r4, #0]
 800430a:	2d00      	cmp	r5, #0
 800430c:	d102      	bne.n	8004314 <_printf_i+0xf0>
 800430e:	9e04      	ldr	r6, [sp, #16]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00c      	beq.n	800432e <_printf_i+0x10a>
 8004314:	9e04      	ldr	r6, [sp, #16]
 8004316:	0028      	movs	r0, r5
 8004318:	0039      	movs	r1, r7
 800431a:	f7fb ff85 	bl	8000228 <__aeabi_uidivmod>
 800431e:	9b03      	ldr	r3, [sp, #12]
 8004320:	3e01      	subs	r6, #1
 8004322:	5c5b      	ldrb	r3, [r3, r1]
 8004324:	7033      	strb	r3, [r6, #0]
 8004326:	002b      	movs	r3, r5
 8004328:	0005      	movs	r5, r0
 800432a:	429f      	cmp	r7, r3
 800432c:	d9f3      	bls.n	8004316 <_printf_i+0xf2>
 800432e:	2f08      	cmp	r7, #8
 8004330:	d109      	bne.n	8004346 <_printf_i+0x122>
 8004332:	6823      	ldr	r3, [r4, #0]
 8004334:	07db      	lsls	r3, r3, #31
 8004336:	d506      	bpl.n	8004346 <_printf_i+0x122>
 8004338:	6863      	ldr	r3, [r4, #4]
 800433a:	6922      	ldr	r2, [r4, #16]
 800433c:	4293      	cmp	r3, r2
 800433e:	dc02      	bgt.n	8004346 <_printf_i+0x122>
 8004340:	2330      	movs	r3, #48	; 0x30
 8004342:	3e01      	subs	r6, #1
 8004344:	7033      	strb	r3, [r6, #0]
 8004346:	9b04      	ldr	r3, [sp, #16]
 8004348:	1b9b      	subs	r3, r3, r6
 800434a:	6123      	str	r3, [r4, #16]
 800434c:	9b07      	ldr	r3, [sp, #28]
 800434e:	0021      	movs	r1, r4
 8004350:	9300      	str	r3, [sp, #0]
 8004352:	9805      	ldr	r0, [sp, #20]
 8004354:	9b06      	ldr	r3, [sp, #24]
 8004356:	aa09      	add	r2, sp, #36	; 0x24
 8004358:	f7ff fef4 	bl	8004144 <_printf_common>
 800435c:	1c43      	adds	r3, r0, #1
 800435e:	d14c      	bne.n	80043fa <_printf_i+0x1d6>
 8004360:	2001      	movs	r0, #1
 8004362:	4240      	negs	r0, r0
 8004364:	b00b      	add	sp, #44	; 0x2c
 8004366:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004368:	3145      	adds	r1, #69	; 0x45
 800436a:	700a      	strb	r2, [r1, #0]
 800436c:	4a34      	ldr	r2, [pc, #208]	; (8004440 <_printf_i+0x21c>)
 800436e:	9203      	str	r2, [sp, #12]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	6821      	ldr	r1, [r4, #0]
 8004374:	ca20      	ldmia	r2!, {r5}
 8004376:	601a      	str	r2, [r3, #0]
 8004378:	0608      	lsls	r0, r1, #24
 800437a:	d516      	bpl.n	80043aa <_printf_i+0x186>
 800437c:	07cb      	lsls	r3, r1, #31
 800437e:	d502      	bpl.n	8004386 <_printf_i+0x162>
 8004380:	2320      	movs	r3, #32
 8004382:	4319      	orrs	r1, r3
 8004384:	6021      	str	r1, [r4, #0]
 8004386:	2710      	movs	r7, #16
 8004388:	2d00      	cmp	r5, #0
 800438a:	d1b2      	bne.n	80042f2 <_printf_i+0xce>
 800438c:	2320      	movs	r3, #32
 800438e:	6822      	ldr	r2, [r4, #0]
 8004390:	439a      	bics	r2, r3
 8004392:	6022      	str	r2, [r4, #0]
 8004394:	e7ad      	b.n	80042f2 <_printf_i+0xce>
 8004396:	2220      	movs	r2, #32
 8004398:	6809      	ldr	r1, [r1, #0]
 800439a:	430a      	orrs	r2, r1
 800439c:	6022      	str	r2, [r4, #0]
 800439e:	0022      	movs	r2, r4
 80043a0:	2178      	movs	r1, #120	; 0x78
 80043a2:	3245      	adds	r2, #69	; 0x45
 80043a4:	7011      	strb	r1, [r2, #0]
 80043a6:	4a27      	ldr	r2, [pc, #156]	; (8004444 <_printf_i+0x220>)
 80043a8:	e7e1      	b.n	800436e <_printf_i+0x14a>
 80043aa:	0648      	lsls	r0, r1, #25
 80043ac:	d5e6      	bpl.n	800437c <_printf_i+0x158>
 80043ae:	b2ad      	uxth	r5, r5
 80043b0:	e7e4      	b.n	800437c <_printf_i+0x158>
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	680d      	ldr	r5, [r1, #0]
 80043b6:	1d10      	adds	r0, r2, #4
 80043b8:	6949      	ldr	r1, [r1, #20]
 80043ba:	6018      	str	r0, [r3, #0]
 80043bc:	6813      	ldr	r3, [r2, #0]
 80043be:	062e      	lsls	r6, r5, #24
 80043c0:	d501      	bpl.n	80043c6 <_printf_i+0x1a2>
 80043c2:	6019      	str	r1, [r3, #0]
 80043c4:	e002      	b.n	80043cc <_printf_i+0x1a8>
 80043c6:	066d      	lsls	r5, r5, #25
 80043c8:	d5fb      	bpl.n	80043c2 <_printf_i+0x19e>
 80043ca:	8019      	strh	r1, [r3, #0]
 80043cc:	2300      	movs	r3, #0
 80043ce:	9e04      	ldr	r6, [sp, #16]
 80043d0:	6123      	str	r3, [r4, #16]
 80043d2:	e7bb      	b.n	800434c <_printf_i+0x128>
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	1d11      	adds	r1, r2, #4
 80043d8:	6019      	str	r1, [r3, #0]
 80043da:	6816      	ldr	r6, [r2, #0]
 80043dc:	2100      	movs	r1, #0
 80043de:	0030      	movs	r0, r6
 80043e0:	6862      	ldr	r2, [r4, #4]
 80043e2:	f000 facf 	bl	8004984 <memchr>
 80043e6:	2800      	cmp	r0, #0
 80043e8:	d001      	beq.n	80043ee <_printf_i+0x1ca>
 80043ea:	1b80      	subs	r0, r0, r6
 80043ec:	6060      	str	r0, [r4, #4]
 80043ee:	6863      	ldr	r3, [r4, #4]
 80043f0:	6123      	str	r3, [r4, #16]
 80043f2:	2300      	movs	r3, #0
 80043f4:	9a04      	ldr	r2, [sp, #16]
 80043f6:	7013      	strb	r3, [r2, #0]
 80043f8:	e7a8      	b.n	800434c <_printf_i+0x128>
 80043fa:	6923      	ldr	r3, [r4, #16]
 80043fc:	0032      	movs	r2, r6
 80043fe:	9906      	ldr	r1, [sp, #24]
 8004400:	9805      	ldr	r0, [sp, #20]
 8004402:	9d07      	ldr	r5, [sp, #28]
 8004404:	47a8      	blx	r5
 8004406:	1c43      	adds	r3, r0, #1
 8004408:	d0aa      	beq.n	8004360 <_printf_i+0x13c>
 800440a:	6823      	ldr	r3, [r4, #0]
 800440c:	079b      	lsls	r3, r3, #30
 800440e:	d415      	bmi.n	800443c <_printf_i+0x218>
 8004410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004412:	68e0      	ldr	r0, [r4, #12]
 8004414:	4298      	cmp	r0, r3
 8004416:	daa5      	bge.n	8004364 <_printf_i+0x140>
 8004418:	0018      	movs	r0, r3
 800441a:	e7a3      	b.n	8004364 <_printf_i+0x140>
 800441c:	0022      	movs	r2, r4
 800441e:	2301      	movs	r3, #1
 8004420:	9906      	ldr	r1, [sp, #24]
 8004422:	9805      	ldr	r0, [sp, #20]
 8004424:	9e07      	ldr	r6, [sp, #28]
 8004426:	3219      	adds	r2, #25
 8004428:	47b0      	blx	r6
 800442a:	1c43      	adds	r3, r0, #1
 800442c:	d098      	beq.n	8004360 <_printf_i+0x13c>
 800442e:	3501      	adds	r5, #1
 8004430:	68e3      	ldr	r3, [r4, #12]
 8004432:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004434:	1a9b      	subs	r3, r3, r2
 8004436:	42ab      	cmp	r3, r5
 8004438:	dcf0      	bgt.n	800441c <_printf_i+0x1f8>
 800443a:	e7e9      	b.n	8004410 <_printf_i+0x1ec>
 800443c:	2500      	movs	r5, #0
 800443e:	e7f7      	b.n	8004430 <_printf_i+0x20c>
 8004440:	08004c75 	.word	0x08004c75
 8004444:	08004c86 	.word	0x08004c86

08004448 <_sbrk_r>:
 8004448:	2300      	movs	r3, #0
 800444a:	b570      	push	{r4, r5, r6, lr}
 800444c:	4d06      	ldr	r5, [pc, #24]	; (8004468 <_sbrk_r+0x20>)
 800444e:	0004      	movs	r4, r0
 8004450:	0008      	movs	r0, r1
 8004452:	602b      	str	r3, [r5, #0]
 8004454:	f7fc fb6e 	bl	8000b34 <_sbrk>
 8004458:	1c43      	adds	r3, r0, #1
 800445a:	d103      	bne.n	8004464 <_sbrk_r+0x1c>
 800445c:	682b      	ldr	r3, [r5, #0]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d000      	beq.n	8004464 <_sbrk_r+0x1c>
 8004462:	6023      	str	r3, [r4, #0]
 8004464:	bd70      	pop	{r4, r5, r6, pc}
 8004466:	46c0      	nop			; (mov r8, r8)
 8004468:	200001cc 	.word	0x200001cc

0800446c <__sread>:
 800446c:	b570      	push	{r4, r5, r6, lr}
 800446e:	000c      	movs	r4, r1
 8004470:	250e      	movs	r5, #14
 8004472:	5f49      	ldrsh	r1, [r1, r5]
 8004474:	f000 fb2e 	bl	8004ad4 <_read_r>
 8004478:	2800      	cmp	r0, #0
 800447a:	db03      	blt.n	8004484 <__sread+0x18>
 800447c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800447e:	181b      	adds	r3, r3, r0
 8004480:	6563      	str	r3, [r4, #84]	; 0x54
 8004482:	bd70      	pop	{r4, r5, r6, pc}
 8004484:	89a3      	ldrh	r3, [r4, #12]
 8004486:	4a02      	ldr	r2, [pc, #8]	; (8004490 <__sread+0x24>)
 8004488:	4013      	ands	r3, r2
 800448a:	81a3      	strh	r3, [r4, #12]
 800448c:	e7f9      	b.n	8004482 <__sread+0x16>
 800448e:	46c0      	nop			; (mov r8, r8)
 8004490:	ffffefff 	.word	0xffffefff

08004494 <__swrite>:
 8004494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004496:	001f      	movs	r7, r3
 8004498:	898b      	ldrh	r3, [r1, #12]
 800449a:	0005      	movs	r5, r0
 800449c:	000c      	movs	r4, r1
 800449e:	0016      	movs	r6, r2
 80044a0:	05db      	lsls	r3, r3, #23
 80044a2:	d505      	bpl.n	80044b0 <__swrite+0x1c>
 80044a4:	230e      	movs	r3, #14
 80044a6:	5ec9      	ldrsh	r1, [r1, r3]
 80044a8:	2200      	movs	r2, #0
 80044aa:	2302      	movs	r3, #2
 80044ac:	f000 f9ea 	bl	8004884 <_lseek_r>
 80044b0:	89a3      	ldrh	r3, [r4, #12]
 80044b2:	4a05      	ldr	r2, [pc, #20]	; (80044c8 <__swrite+0x34>)
 80044b4:	0028      	movs	r0, r5
 80044b6:	4013      	ands	r3, r2
 80044b8:	81a3      	strh	r3, [r4, #12]
 80044ba:	0032      	movs	r2, r6
 80044bc:	230e      	movs	r3, #14
 80044be:	5ee1      	ldrsh	r1, [r4, r3]
 80044c0:	003b      	movs	r3, r7
 80044c2:	f000 f875 	bl	80045b0 <_write_r>
 80044c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044c8:	ffffefff 	.word	0xffffefff

080044cc <__sseek>:
 80044cc:	b570      	push	{r4, r5, r6, lr}
 80044ce:	000c      	movs	r4, r1
 80044d0:	250e      	movs	r5, #14
 80044d2:	5f49      	ldrsh	r1, [r1, r5]
 80044d4:	f000 f9d6 	bl	8004884 <_lseek_r>
 80044d8:	89a3      	ldrh	r3, [r4, #12]
 80044da:	1c42      	adds	r2, r0, #1
 80044dc:	d103      	bne.n	80044e6 <__sseek+0x1a>
 80044de:	4a05      	ldr	r2, [pc, #20]	; (80044f4 <__sseek+0x28>)
 80044e0:	4013      	ands	r3, r2
 80044e2:	81a3      	strh	r3, [r4, #12]
 80044e4:	bd70      	pop	{r4, r5, r6, pc}
 80044e6:	2280      	movs	r2, #128	; 0x80
 80044e8:	0152      	lsls	r2, r2, #5
 80044ea:	4313      	orrs	r3, r2
 80044ec:	81a3      	strh	r3, [r4, #12]
 80044ee:	6560      	str	r0, [r4, #84]	; 0x54
 80044f0:	e7f8      	b.n	80044e4 <__sseek+0x18>
 80044f2:	46c0      	nop			; (mov r8, r8)
 80044f4:	ffffefff 	.word	0xffffefff

080044f8 <__sclose>:
 80044f8:	b510      	push	{r4, lr}
 80044fa:	230e      	movs	r3, #14
 80044fc:	5ec9      	ldrsh	r1, [r1, r3]
 80044fe:	f000 f8e3 	bl	80046c8 <_close_r>
 8004502:	bd10      	pop	{r4, pc}

08004504 <__swbuf_r>:
 8004504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004506:	0005      	movs	r5, r0
 8004508:	000e      	movs	r6, r1
 800450a:	0014      	movs	r4, r2
 800450c:	2800      	cmp	r0, #0
 800450e:	d004      	beq.n	800451a <__swbuf_r+0x16>
 8004510:	6983      	ldr	r3, [r0, #24]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <__swbuf_r+0x16>
 8004516:	f7ff fa15 	bl	8003944 <__sinit>
 800451a:	4b22      	ldr	r3, [pc, #136]	; (80045a4 <__swbuf_r+0xa0>)
 800451c:	429c      	cmp	r4, r3
 800451e:	d12e      	bne.n	800457e <__swbuf_r+0x7a>
 8004520:	686c      	ldr	r4, [r5, #4]
 8004522:	69a3      	ldr	r3, [r4, #24]
 8004524:	60a3      	str	r3, [r4, #8]
 8004526:	89a3      	ldrh	r3, [r4, #12]
 8004528:	071b      	lsls	r3, r3, #28
 800452a:	d532      	bpl.n	8004592 <__swbuf_r+0x8e>
 800452c:	6923      	ldr	r3, [r4, #16]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d02f      	beq.n	8004592 <__swbuf_r+0x8e>
 8004532:	6823      	ldr	r3, [r4, #0]
 8004534:	6922      	ldr	r2, [r4, #16]
 8004536:	b2f7      	uxtb	r7, r6
 8004538:	1a98      	subs	r0, r3, r2
 800453a:	6963      	ldr	r3, [r4, #20]
 800453c:	b2f6      	uxtb	r6, r6
 800453e:	4283      	cmp	r3, r0
 8004540:	dc05      	bgt.n	800454e <__swbuf_r+0x4a>
 8004542:	0021      	movs	r1, r4
 8004544:	0028      	movs	r0, r5
 8004546:	f000 f95d 	bl	8004804 <_fflush_r>
 800454a:	2800      	cmp	r0, #0
 800454c:	d127      	bne.n	800459e <__swbuf_r+0x9a>
 800454e:	68a3      	ldr	r3, [r4, #8]
 8004550:	3001      	adds	r0, #1
 8004552:	3b01      	subs	r3, #1
 8004554:	60a3      	str	r3, [r4, #8]
 8004556:	6823      	ldr	r3, [r4, #0]
 8004558:	1c5a      	adds	r2, r3, #1
 800455a:	6022      	str	r2, [r4, #0]
 800455c:	701f      	strb	r7, [r3, #0]
 800455e:	6963      	ldr	r3, [r4, #20]
 8004560:	4283      	cmp	r3, r0
 8004562:	d004      	beq.n	800456e <__swbuf_r+0x6a>
 8004564:	89a3      	ldrh	r3, [r4, #12]
 8004566:	07db      	lsls	r3, r3, #31
 8004568:	d507      	bpl.n	800457a <__swbuf_r+0x76>
 800456a:	2e0a      	cmp	r6, #10
 800456c:	d105      	bne.n	800457a <__swbuf_r+0x76>
 800456e:	0021      	movs	r1, r4
 8004570:	0028      	movs	r0, r5
 8004572:	f000 f947 	bl	8004804 <_fflush_r>
 8004576:	2800      	cmp	r0, #0
 8004578:	d111      	bne.n	800459e <__swbuf_r+0x9a>
 800457a:	0030      	movs	r0, r6
 800457c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800457e:	4b0a      	ldr	r3, [pc, #40]	; (80045a8 <__swbuf_r+0xa4>)
 8004580:	429c      	cmp	r4, r3
 8004582:	d101      	bne.n	8004588 <__swbuf_r+0x84>
 8004584:	68ac      	ldr	r4, [r5, #8]
 8004586:	e7cc      	b.n	8004522 <__swbuf_r+0x1e>
 8004588:	4b08      	ldr	r3, [pc, #32]	; (80045ac <__swbuf_r+0xa8>)
 800458a:	429c      	cmp	r4, r3
 800458c:	d1c9      	bne.n	8004522 <__swbuf_r+0x1e>
 800458e:	68ec      	ldr	r4, [r5, #12]
 8004590:	e7c7      	b.n	8004522 <__swbuf_r+0x1e>
 8004592:	0021      	movs	r1, r4
 8004594:	0028      	movs	r0, r5
 8004596:	f000 f81f 	bl	80045d8 <__swsetup_r>
 800459a:	2800      	cmp	r0, #0
 800459c:	d0c9      	beq.n	8004532 <__swbuf_r+0x2e>
 800459e:	2601      	movs	r6, #1
 80045a0:	4276      	negs	r6, r6
 80045a2:	e7ea      	b.n	800457a <__swbuf_r+0x76>
 80045a4:	08004c24 	.word	0x08004c24
 80045a8:	08004c44 	.word	0x08004c44
 80045ac:	08004c04 	.word	0x08004c04

080045b0 <_write_r>:
 80045b0:	b570      	push	{r4, r5, r6, lr}
 80045b2:	0004      	movs	r4, r0
 80045b4:	0008      	movs	r0, r1
 80045b6:	0011      	movs	r1, r2
 80045b8:	001a      	movs	r2, r3
 80045ba:	2300      	movs	r3, #0
 80045bc:	4d05      	ldr	r5, [pc, #20]	; (80045d4 <_write_r+0x24>)
 80045be:	602b      	str	r3, [r5, #0]
 80045c0:	f7fc fa6f 	bl	8000aa2 <_write>
 80045c4:	1c43      	adds	r3, r0, #1
 80045c6:	d103      	bne.n	80045d0 <_write_r+0x20>
 80045c8:	682b      	ldr	r3, [r5, #0]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d000      	beq.n	80045d0 <_write_r+0x20>
 80045ce:	6023      	str	r3, [r4, #0]
 80045d0:	bd70      	pop	{r4, r5, r6, pc}
 80045d2:	46c0      	nop			; (mov r8, r8)
 80045d4:	200001cc 	.word	0x200001cc

080045d8 <__swsetup_r>:
 80045d8:	4b37      	ldr	r3, [pc, #220]	; (80046b8 <__swsetup_r+0xe0>)
 80045da:	b570      	push	{r4, r5, r6, lr}
 80045dc:	681d      	ldr	r5, [r3, #0]
 80045de:	0006      	movs	r6, r0
 80045e0:	000c      	movs	r4, r1
 80045e2:	2d00      	cmp	r5, #0
 80045e4:	d005      	beq.n	80045f2 <__swsetup_r+0x1a>
 80045e6:	69ab      	ldr	r3, [r5, #24]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d102      	bne.n	80045f2 <__swsetup_r+0x1a>
 80045ec:	0028      	movs	r0, r5
 80045ee:	f7ff f9a9 	bl	8003944 <__sinit>
 80045f2:	4b32      	ldr	r3, [pc, #200]	; (80046bc <__swsetup_r+0xe4>)
 80045f4:	429c      	cmp	r4, r3
 80045f6:	d10f      	bne.n	8004618 <__swsetup_r+0x40>
 80045f8:	686c      	ldr	r4, [r5, #4]
 80045fa:	230c      	movs	r3, #12
 80045fc:	5ee2      	ldrsh	r2, [r4, r3]
 80045fe:	b293      	uxth	r3, r2
 8004600:	0711      	lsls	r1, r2, #28
 8004602:	d42d      	bmi.n	8004660 <__swsetup_r+0x88>
 8004604:	06d9      	lsls	r1, r3, #27
 8004606:	d411      	bmi.n	800462c <__swsetup_r+0x54>
 8004608:	2309      	movs	r3, #9
 800460a:	2001      	movs	r0, #1
 800460c:	6033      	str	r3, [r6, #0]
 800460e:	3337      	adds	r3, #55	; 0x37
 8004610:	4313      	orrs	r3, r2
 8004612:	81a3      	strh	r3, [r4, #12]
 8004614:	4240      	negs	r0, r0
 8004616:	bd70      	pop	{r4, r5, r6, pc}
 8004618:	4b29      	ldr	r3, [pc, #164]	; (80046c0 <__swsetup_r+0xe8>)
 800461a:	429c      	cmp	r4, r3
 800461c:	d101      	bne.n	8004622 <__swsetup_r+0x4a>
 800461e:	68ac      	ldr	r4, [r5, #8]
 8004620:	e7eb      	b.n	80045fa <__swsetup_r+0x22>
 8004622:	4b28      	ldr	r3, [pc, #160]	; (80046c4 <__swsetup_r+0xec>)
 8004624:	429c      	cmp	r4, r3
 8004626:	d1e8      	bne.n	80045fa <__swsetup_r+0x22>
 8004628:	68ec      	ldr	r4, [r5, #12]
 800462a:	e7e6      	b.n	80045fa <__swsetup_r+0x22>
 800462c:	075b      	lsls	r3, r3, #29
 800462e:	d513      	bpl.n	8004658 <__swsetup_r+0x80>
 8004630:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004632:	2900      	cmp	r1, #0
 8004634:	d008      	beq.n	8004648 <__swsetup_r+0x70>
 8004636:	0023      	movs	r3, r4
 8004638:	3344      	adds	r3, #68	; 0x44
 800463a:	4299      	cmp	r1, r3
 800463c:	d002      	beq.n	8004644 <__swsetup_r+0x6c>
 800463e:	0030      	movs	r0, r6
 8004640:	f000 f9ce 	bl	80049e0 <_free_r>
 8004644:	2300      	movs	r3, #0
 8004646:	6363      	str	r3, [r4, #52]	; 0x34
 8004648:	2224      	movs	r2, #36	; 0x24
 800464a:	89a3      	ldrh	r3, [r4, #12]
 800464c:	4393      	bics	r3, r2
 800464e:	81a3      	strh	r3, [r4, #12]
 8004650:	2300      	movs	r3, #0
 8004652:	6063      	str	r3, [r4, #4]
 8004654:	6923      	ldr	r3, [r4, #16]
 8004656:	6023      	str	r3, [r4, #0]
 8004658:	2308      	movs	r3, #8
 800465a:	89a2      	ldrh	r2, [r4, #12]
 800465c:	4313      	orrs	r3, r2
 800465e:	81a3      	strh	r3, [r4, #12]
 8004660:	6923      	ldr	r3, [r4, #16]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d10b      	bne.n	800467e <__swsetup_r+0xa6>
 8004666:	21a0      	movs	r1, #160	; 0xa0
 8004668:	2280      	movs	r2, #128	; 0x80
 800466a:	89a3      	ldrh	r3, [r4, #12]
 800466c:	0089      	lsls	r1, r1, #2
 800466e:	0092      	lsls	r2, r2, #2
 8004670:	400b      	ands	r3, r1
 8004672:	4293      	cmp	r3, r2
 8004674:	d003      	beq.n	800467e <__swsetup_r+0xa6>
 8004676:	0021      	movs	r1, r4
 8004678:	0030      	movs	r0, r6
 800467a:	f000 f93f 	bl	80048fc <__smakebuf_r>
 800467e:	220c      	movs	r2, #12
 8004680:	5ea3      	ldrsh	r3, [r4, r2]
 8004682:	2001      	movs	r0, #1
 8004684:	001a      	movs	r2, r3
 8004686:	b299      	uxth	r1, r3
 8004688:	4002      	ands	r2, r0
 800468a:	4203      	tst	r3, r0
 800468c:	d00f      	beq.n	80046ae <__swsetup_r+0xd6>
 800468e:	2200      	movs	r2, #0
 8004690:	60a2      	str	r2, [r4, #8]
 8004692:	6962      	ldr	r2, [r4, #20]
 8004694:	4252      	negs	r2, r2
 8004696:	61a2      	str	r2, [r4, #24]
 8004698:	2000      	movs	r0, #0
 800469a:	6922      	ldr	r2, [r4, #16]
 800469c:	4282      	cmp	r2, r0
 800469e:	d1ba      	bne.n	8004616 <__swsetup_r+0x3e>
 80046a0:	060a      	lsls	r2, r1, #24
 80046a2:	d5b8      	bpl.n	8004616 <__swsetup_r+0x3e>
 80046a4:	2240      	movs	r2, #64	; 0x40
 80046a6:	4313      	orrs	r3, r2
 80046a8:	81a3      	strh	r3, [r4, #12]
 80046aa:	3801      	subs	r0, #1
 80046ac:	e7b3      	b.n	8004616 <__swsetup_r+0x3e>
 80046ae:	0788      	lsls	r0, r1, #30
 80046b0:	d400      	bmi.n	80046b4 <__swsetup_r+0xdc>
 80046b2:	6962      	ldr	r2, [r4, #20]
 80046b4:	60a2      	str	r2, [r4, #8]
 80046b6:	e7ef      	b.n	8004698 <__swsetup_r+0xc0>
 80046b8:	2000000c 	.word	0x2000000c
 80046bc:	08004c24 	.word	0x08004c24
 80046c0:	08004c44 	.word	0x08004c44
 80046c4:	08004c04 	.word	0x08004c04

080046c8 <_close_r>:
 80046c8:	2300      	movs	r3, #0
 80046ca:	b570      	push	{r4, r5, r6, lr}
 80046cc:	4d06      	ldr	r5, [pc, #24]	; (80046e8 <_close_r+0x20>)
 80046ce:	0004      	movs	r4, r0
 80046d0:	0008      	movs	r0, r1
 80046d2:	602b      	str	r3, [r5, #0]
 80046d4:	f7fc fa01 	bl	8000ada <_close>
 80046d8:	1c43      	adds	r3, r0, #1
 80046da:	d103      	bne.n	80046e4 <_close_r+0x1c>
 80046dc:	682b      	ldr	r3, [r5, #0]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d000      	beq.n	80046e4 <_close_r+0x1c>
 80046e2:	6023      	str	r3, [r4, #0]
 80046e4:	bd70      	pop	{r4, r5, r6, pc}
 80046e6:	46c0      	nop			; (mov r8, r8)
 80046e8:	200001cc 	.word	0x200001cc

080046ec <__sflush_r>:
 80046ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046ee:	898b      	ldrh	r3, [r1, #12]
 80046f0:	0005      	movs	r5, r0
 80046f2:	000c      	movs	r4, r1
 80046f4:	071a      	lsls	r2, r3, #28
 80046f6:	d45f      	bmi.n	80047b8 <__sflush_r+0xcc>
 80046f8:	684a      	ldr	r2, [r1, #4]
 80046fa:	2a00      	cmp	r2, #0
 80046fc:	dc04      	bgt.n	8004708 <__sflush_r+0x1c>
 80046fe:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8004700:	2a00      	cmp	r2, #0
 8004702:	dc01      	bgt.n	8004708 <__sflush_r+0x1c>
 8004704:	2000      	movs	r0, #0
 8004706:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004708:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800470a:	2f00      	cmp	r7, #0
 800470c:	d0fa      	beq.n	8004704 <__sflush_r+0x18>
 800470e:	2200      	movs	r2, #0
 8004710:	2180      	movs	r1, #128	; 0x80
 8004712:	682e      	ldr	r6, [r5, #0]
 8004714:	602a      	str	r2, [r5, #0]
 8004716:	001a      	movs	r2, r3
 8004718:	0149      	lsls	r1, r1, #5
 800471a:	400a      	ands	r2, r1
 800471c:	420b      	tst	r3, r1
 800471e:	d034      	beq.n	800478a <__sflush_r+0x9e>
 8004720:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004722:	89a3      	ldrh	r3, [r4, #12]
 8004724:	075b      	lsls	r3, r3, #29
 8004726:	d506      	bpl.n	8004736 <__sflush_r+0x4a>
 8004728:	6863      	ldr	r3, [r4, #4]
 800472a:	1ac0      	subs	r0, r0, r3
 800472c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800472e:	2b00      	cmp	r3, #0
 8004730:	d001      	beq.n	8004736 <__sflush_r+0x4a>
 8004732:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004734:	1ac0      	subs	r0, r0, r3
 8004736:	0002      	movs	r2, r0
 8004738:	6a21      	ldr	r1, [r4, #32]
 800473a:	2300      	movs	r3, #0
 800473c:	0028      	movs	r0, r5
 800473e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004740:	47b8      	blx	r7
 8004742:	89a1      	ldrh	r1, [r4, #12]
 8004744:	1c43      	adds	r3, r0, #1
 8004746:	d106      	bne.n	8004756 <__sflush_r+0x6a>
 8004748:	682b      	ldr	r3, [r5, #0]
 800474a:	2b1d      	cmp	r3, #29
 800474c:	d831      	bhi.n	80047b2 <__sflush_r+0xc6>
 800474e:	4a2c      	ldr	r2, [pc, #176]	; (8004800 <__sflush_r+0x114>)
 8004750:	40da      	lsrs	r2, r3
 8004752:	07d3      	lsls	r3, r2, #31
 8004754:	d52d      	bpl.n	80047b2 <__sflush_r+0xc6>
 8004756:	2300      	movs	r3, #0
 8004758:	6063      	str	r3, [r4, #4]
 800475a:	6923      	ldr	r3, [r4, #16]
 800475c:	6023      	str	r3, [r4, #0]
 800475e:	04cb      	lsls	r3, r1, #19
 8004760:	d505      	bpl.n	800476e <__sflush_r+0x82>
 8004762:	1c43      	adds	r3, r0, #1
 8004764:	d102      	bne.n	800476c <__sflush_r+0x80>
 8004766:	682b      	ldr	r3, [r5, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d100      	bne.n	800476e <__sflush_r+0x82>
 800476c:	6560      	str	r0, [r4, #84]	; 0x54
 800476e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004770:	602e      	str	r6, [r5, #0]
 8004772:	2900      	cmp	r1, #0
 8004774:	d0c6      	beq.n	8004704 <__sflush_r+0x18>
 8004776:	0023      	movs	r3, r4
 8004778:	3344      	adds	r3, #68	; 0x44
 800477a:	4299      	cmp	r1, r3
 800477c:	d002      	beq.n	8004784 <__sflush_r+0x98>
 800477e:	0028      	movs	r0, r5
 8004780:	f000 f92e 	bl	80049e0 <_free_r>
 8004784:	2000      	movs	r0, #0
 8004786:	6360      	str	r0, [r4, #52]	; 0x34
 8004788:	e7bd      	b.n	8004706 <__sflush_r+0x1a>
 800478a:	2301      	movs	r3, #1
 800478c:	0028      	movs	r0, r5
 800478e:	6a21      	ldr	r1, [r4, #32]
 8004790:	47b8      	blx	r7
 8004792:	1c43      	adds	r3, r0, #1
 8004794:	d1c5      	bne.n	8004722 <__sflush_r+0x36>
 8004796:	682b      	ldr	r3, [r5, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d0c2      	beq.n	8004722 <__sflush_r+0x36>
 800479c:	2b1d      	cmp	r3, #29
 800479e:	d001      	beq.n	80047a4 <__sflush_r+0xb8>
 80047a0:	2b16      	cmp	r3, #22
 80047a2:	d101      	bne.n	80047a8 <__sflush_r+0xbc>
 80047a4:	602e      	str	r6, [r5, #0]
 80047a6:	e7ad      	b.n	8004704 <__sflush_r+0x18>
 80047a8:	2340      	movs	r3, #64	; 0x40
 80047aa:	89a2      	ldrh	r2, [r4, #12]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	81a3      	strh	r3, [r4, #12]
 80047b0:	e7a9      	b.n	8004706 <__sflush_r+0x1a>
 80047b2:	2340      	movs	r3, #64	; 0x40
 80047b4:	430b      	orrs	r3, r1
 80047b6:	e7fa      	b.n	80047ae <__sflush_r+0xc2>
 80047b8:	690f      	ldr	r7, [r1, #16]
 80047ba:	2f00      	cmp	r7, #0
 80047bc:	d0a2      	beq.n	8004704 <__sflush_r+0x18>
 80047be:	680a      	ldr	r2, [r1, #0]
 80047c0:	600f      	str	r7, [r1, #0]
 80047c2:	1bd2      	subs	r2, r2, r7
 80047c4:	9201      	str	r2, [sp, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	079b      	lsls	r3, r3, #30
 80047ca:	d100      	bne.n	80047ce <__sflush_r+0xe2>
 80047cc:	694a      	ldr	r2, [r1, #20]
 80047ce:	60a2      	str	r2, [r4, #8]
 80047d0:	9b01      	ldr	r3, [sp, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	dc00      	bgt.n	80047d8 <__sflush_r+0xec>
 80047d6:	e795      	b.n	8004704 <__sflush_r+0x18>
 80047d8:	003a      	movs	r2, r7
 80047da:	0028      	movs	r0, r5
 80047dc:	9b01      	ldr	r3, [sp, #4]
 80047de:	6a21      	ldr	r1, [r4, #32]
 80047e0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80047e2:	47b0      	blx	r6
 80047e4:	2800      	cmp	r0, #0
 80047e6:	dc06      	bgt.n	80047f6 <__sflush_r+0x10a>
 80047e8:	2340      	movs	r3, #64	; 0x40
 80047ea:	2001      	movs	r0, #1
 80047ec:	89a2      	ldrh	r2, [r4, #12]
 80047ee:	4240      	negs	r0, r0
 80047f0:	4313      	orrs	r3, r2
 80047f2:	81a3      	strh	r3, [r4, #12]
 80047f4:	e787      	b.n	8004706 <__sflush_r+0x1a>
 80047f6:	9b01      	ldr	r3, [sp, #4]
 80047f8:	183f      	adds	r7, r7, r0
 80047fa:	1a1b      	subs	r3, r3, r0
 80047fc:	9301      	str	r3, [sp, #4]
 80047fe:	e7e7      	b.n	80047d0 <__sflush_r+0xe4>
 8004800:	20400001 	.word	0x20400001

08004804 <_fflush_r>:
 8004804:	690b      	ldr	r3, [r1, #16]
 8004806:	b570      	push	{r4, r5, r6, lr}
 8004808:	0005      	movs	r5, r0
 800480a:	000c      	movs	r4, r1
 800480c:	2b00      	cmp	r3, #0
 800480e:	d102      	bne.n	8004816 <_fflush_r+0x12>
 8004810:	2500      	movs	r5, #0
 8004812:	0028      	movs	r0, r5
 8004814:	bd70      	pop	{r4, r5, r6, pc}
 8004816:	2800      	cmp	r0, #0
 8004818:	d004      	beq.n	8004824 <_fflush_r+0x20>
 800481a:	6983      	ldr	r3, [r0, #24]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d101      	bne.n	8004824 <_fflush_r+0x20>
 8004820:	f7ff f890 	bl	8003944 <__sinit>
 8004824:	4b14      	ldr	r3, [pc, #80]	; (8004878 <_fflush_r+0x74>)
 8004826:	429c      	cmp	r4, r3
 8004828:	d11b      	bne.n	8004862 <_fflush_r+0x5e>
 800482a:	686c      	ldr	r4, [r5, #4]
 800482c:	220c      	movs	r2, #12
 800482e:	5ea3      	ldrsh	r3, [r4, r2]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d0ed      	beq.n	8004810 <_fflush_r+0xc>
 8004834:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004836:	07d2      	lsls	r2, r2, #31
 8004838:	d404      	bmi.n	8004844 <_fflush_r+0x40>
 800483a:	059b      	lsls	r3, r3, #22
 800483c:	d402      	bmi.n	8004844 <_fflush_r+0x40>
 800483e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004840:	f7ff f921 	bl	8003a86 <__retarget_lock_acquire_recursive>
 8004844:	0028      	movs	r0, r5
 8004846:	0021      	movs	r1, r4
 8004848:	f7ff ff50 	bl	80046ec <__sflush_r>
 800484c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800484e:	0005      	movs	r5, r0
 8004850:	07db      	lsls	r3, r3, #31
 8004852:	d4de      	bmi.n	8004812 <_fflush_r+0xe>
 8004854:	89a3      	ldrh	r3, [r4, #12]
 8004856:	059b      	lsls	r3, r3, #22
 8004858:	d4db      	bmi.n	8004812 <_fflush_r+0xe>
 800485a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800485c:	f7ff f914 	bl	8003a88 <__retarget_lock_release_recursive>
 8004860:	e7d7      	b.n	8004812 <_fflush_r+0xe>
 8004862:	4b06      	ldr	r3, [pc, #24]	; (800487c <_fflush_r+0x78>)
 8004864:	429c      	cmp	r4, r3
 8004866:	d101      	bne.n	800486c <_fflush_r+0x68>
 8004868:	68ac      	ldr	r4, [r5, #8]
 800486a:	e7df      	b.n	800482c <_fflush_r+0x28>
 800486c:	4b04      	ldr	r3, [pc, #16]	; (8004880 <_fflush_r+0x7c>)
 800486e:	429c      	cmp	r4, r3
 8004870:	d1dc      	bne.n	800482c <_fflush_r+0x28>
 8004872:	68ec      	ldr	r4, [r5, #12]
 8004874:	e7da      	b.n	800482c <_fflush_r+0x28>
 8004876:	46c0      	nop			; (mov r8, r8)
 8004878:	08004c24 	.word	0x08004c24
 800487c:	08004c44 	.word	0x08004c44
 8004880:	08004c04 	.word	0x08004c04

08004884 <_lseek_r>:
 8004884:	b570      	push	{r4, r5, r6, lr}
 8004886:	0004      	movs	r4, r0
 8004888:	0008      	movs	r0, r1
 800488a:	0011      	movs	r1, r2
 800488c:	001a      	movs	r2, r3
 800488e:	2300      	movs	r3, #0
 8004890:	4d05      	ldr	r5, [pc, #20]	; (80048a8 <_lseek_r+0x24>)
 8004892:	602b      	str	r3, [r5, #0]
 8004894:	f7fc f942 	bl	8000b1c <_lseek>
 8004898:	1c43      	adds	r3, r0, #1
 800489a:	d103      	bne.n	80048a4 <_lseek_r+0x20>
 800489c:	682b      	ldr	r3, [r5, #0]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d000      	beq.n	80048a4 <_lseek_r+0x20>
 80048a2:	6023      	str	r3, [r4, #0]
 80048a4:	bd70      	pop	{r4, r5, r6, pc}
 80048a6:	46c0      	nop			; (mov r8, r8)
 80048a8:	200001cc 	.word	0x200001cc

080048ac <__swhatbuf_r>:
 80048ac:	b570      	push	{r4, r5, r6, lr}
 80048ae:	000e      	movs	r6, r1
 80048b0:	001d      	movs	r5, r3
 80048b2:	230e      	movs	r3, #14
 80048b4:	5ec9      	ldrsh	r1, [r1, r3]
 80048b6:	0014      	movs	r4, r2
 80048b8:	b096      	sub	sp, #88	; 0x58
 80048ba:	2900      	cmp	r1, #0
 80048bc:	da08      	bge.n	80048d0 <__swhatbuf_r+0x24>
 80048be:	220c      	movs	r2, #12
 80048c0:	5eb3      	ldrsh	r3, [r6, r2]
 80048c2:	2200      	movs	r2, #0
 80048c4:	602a      	str	r2, [r5, #0]
 80048c6:	061b      	lsls	r3, r3, #24
 80048c8:	d411      	bmi.n	80048ee <__swhatbuf_r+0x42>
 80048ca:	2380      	movs	r3, #128	; 0x80
 80048cc:	00db      	lsls	r3, r3, #3
 80048ce:	e00f      	b.n	80048f0 <__swhatbuf_r+0x44>
 80048d0:	466a      	mov	r2, sp
 80048d2:	f000 f913 	bl	8004afc <_fstat_r>
 80048d6:	2800      	cmp	r0, #0
 80048d8:	dbf1      	blt.n	80048be <__swhatbuf_r+0x12>
 80048da:	23f0      	movs	r3, #240	; 0xf0
 80048dc:	9901      	ldr	r1, [sp, #4]
 80048de:	021b      	lsls	r3, r3, #8
 80048e0:	4019      	ands	r1, r3
 80048e2:	4b05      	ldr	r3, [pc, #20]	; (80048f8 <__swhatbuf_r+0x4c>)
 80048e4:	18c9      	adds	r1, r1, r3
 80048e6:	424b      	negs	r3, r1
 80048e8:	4159      	adcs	r1, r3
 80048ea:	6029      	str	r1, [r5, #0]
 80048ec:	e7ed      	b.n	80048ca <__swhatbuf_r+0x1e>
 80048ee:	2340      	movs	r3, #64	; 0x40
 80048f0:	2000      	movs	r0, #0
 80048f2:	6023      	str	r3, [r4, #0]
 80048f4:	b016      	add	sp, #88	; 0x58
 80048f6:	bd70      	pop	{r4, r5, r6, pc}
 80048f8:	ffffe000 	.word	0xffffe000

080048fc <__smakebuf_r>:
 80048fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048fe:	2602      	movs	r6, #2
 8004900:	898b      	ldrh	r3, [r1, #12]
 8004902:	0005      	movs	r5, r0
 8004904:	000c      	movs	r4, r1
 8004906:	4233      	tst	r3, r6
 8004908:	d006      	beq.n	8004918 <__smakebuf_r+0x1c>
 800490a:	0023      	movs	r3, r4
 800490c:	3347      	adds	r3, #71	; 0x47
 800490e:	6023      	str	r3, [r4, #0]
 8004910:	6123      	str	r3, [r4, #16]
 8004912:	2301      	movs	r3, #1
 8004914:	6163      	str	r3, [r4, #20]
 8004916:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004918:	466a      	mov	r2, sp
 800491a:	ab01      	add	r3, sp, #4
 800491c:	f7ff ffc6 	bl	80048ac <__swhatbuf_r>
 8004920:	9900      	ldr	r1, [sp, #0]
 8004922:	0007      	movs	r7, r0
 8004924:	0028      	movs	r0, r5
 8004926:	f7ff f8d3 	bl	8003ad0 <_malloc_r>
 800492a:	2800      	cmp	r0, #0
 800492c:	d108      	bne.n	8004940 <__smakebuf_r+0x44>
 800492e:	220c      	movs	r2, #12
 8004930:	5ea3      	ldrsh	r3, [r4, r2]
 8004932:	059a      	lsls	r2, r3, #22
 8004934:	d4ef      	bmi.n	8004916 <__smakebuf_r+0x1a>
 8004936:	2203      	movs	r2, #3
 8004938:	4393      	bics	r3, r2
 800493a:	431e      	orrs	r6, r3
 800493c:	81a6      	strh	r6, [r4, #12]
 800493e:	e7e4      	b.n	800490a <__smakebuf_r+0xe>
 8004940:	4b0f      	ldr	r3, [pc, #60]	; (8004980 <__smakebuf_r+0x84>)
 8004942:	62ab      	str	r3, [r5, #40]	; 0x28
 8004944:	2380      	movs	r3, #128	; 0x80
 8004946:	89a2      	ldrh	r2, [r4, #12]
 8004948:	6020      	str	r0, [r4, #0]
 800494a:	4313      	orrs	r3, r2
 800494c:	81a3      	strh	r3, [r4, #12]
 800494e:	9b00      	ldr	r3, [sp, #0]
 8004950:	6120      	str	r0, [r4, #16]
 8004952:	6163      	str	r3, [r4, #20]
 8004954:	9b01      	ldr	r3, [sp, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00d      	beq.n	8004976 <__smakebuf_r+0x7a>
 800495a:	0028      	movs	r0, r5
 800495c:	230e      	movs	r3, #14
 800495e:	5ee1      	ldrsh	r1, [r4, r3]
 8004960:	f000 f8de 	bl	8004b20 <_isatty_r>
 8004964:	2800      	cmp	r0, #0
 8004966:	d006      	beq.n	8004976 <__smakebuf_r+0x7a>
 8004968:	2203      	movs	r2, #3
 800496a:	89a3      	ldrh	r3, [r4, #12]
 800496c:	4393      	bics	r3, r2
 800496e:	001a      	movs	r2, r3
 8004970:	2301      	movs	r3, #1
 8004972:	4313      	orrs	r3, r2
 8004974:	81a3      	strh	r3, [r4, #12]
 8004976:	89a0      	ldrh	r0, [r4, #12]
 8004978:	4307      	orrs	r7, r0
 800497a:	81a7      	strh	r7, [r4, #12]
 800497c:	e7cb      	b.n	8004916 <__smakebuf_r+0x1a>
 800497e:	46c0      	nop			; (mov r8, r8)
 8004980:	080038c9 	.word	0x080038c9

08004984 <memchr>:
 8004984:	b2c9      	uxtb	r1, r1
 8004986:	1882      	adds	r2, r0, r2
 8004988:	4290      	cmp	r0, r2
 800498a:	d101      	bne.n	8004990 <memchr+0xc>
 800498c:	2000      	movs	r0, #0
 800498e:	4770      	bx	lr
 8004990:	7803      	ldrb	r3, [r0, #0]
 8004992:	428b      	cmp	r3, r1
 8004994:	d0fb      	beq.n	800498e <memchr+0xa>
 8004996:	3001      	adds	r0, #1
 8004998:	e7f6      	b.n	8004988 <memchr+0x4>

0800499a <memmove>:
 800499a:	b510      	push	{r4, lr}
 800499c:	4288      	cmp	r0, r1
 800499e:	d902      	bls.n	80049a6 <memmove+0xc>
 80049a0:	188b      	adds	r3, r1, r2
 80049a2:	4298      	cmp	r0, r3
 80049a4:	d303      	bcc.n	80049ae <memmove+0x14>
 80049a6:	2300      	movs	r3, #0
 80049a8:	e007      	b.n	80049ba <memmove+0x20>
 80049aa:	5c8b      	ldrb	r3, [r1, r2]
 80049ac:	5483      	strb	r3, [r0, r2]
 80049ae:	3a01      	subs	r2, #1
 80049b0:	d2fb      	bcs.n	80049aa <memmove+0x10>
 80049b2:	bd10      	pop	{r4, pc}
 80049b4:	5ccc      	ldrb	r4, [r1, r3]
 80049b6:	54c4      	strb	r4, [r0, r3]
 80049b8:	3301      	adds	r3, #1
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d1fa      	bne.n	80049b4 <memmove+0x1a>
 80049be:	e7f8      	b.n	80049b2 <memmove+0x18>

080049c0 <__malloc_lock>:
 80049c0:	b510      	push	{r4, lr}
 80049c2:	4802      	ldr	r0, [pc, #8]	; (80049cc <__malloc_lock+0xc>)
 80049c4:	f7ff f85f 	bl	8003a86 <__retarget_lock_acquire_recursive>
 80049c8:	bd10      	pop	{r4, pc}
 80049ca:	46c0      	nop			; (mov r8, r8)
 80049cc:	200001c0 	.word	0x200001c0

080049d0 <__malloc_unlock>:
 80049d0:	b510      	push	{r4, lr}
 80049d2:	4802      	ldr	r0, [pc, #8]	; (80049dc <__malloc_unlock+0xc>)
 80049d4:	f7ff f858 	bl	8003a88 <__retarget_lock_release_recursive>
 80049d8:	bd10      	pop	{r4, pc}
 80049da:	46c0      	nop			; (mov r8, r8)
 80049dc:	200001c0 	.word	0x200001c0

080049e0 <_free_r>:
 80049e0:	b570      	push	{r4, r5, r6, lr}
 80049e2:	0005      	movs	r5, r0
 80049e4:	2900      	cmp	r1, #0
 80049e6:	d010      	beq.n	8004a0a <_free_r+0x2a>
 80049e8:	1f0c      	subs	r4, r1, #4
 80049ea:	6823      	ldr	r3, [r4, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	da00      	bge.n	80049f2 <_free_r+0x12>
 80049f0:	18e4      	adds	r4, r4, r3
 80049f2:	0028      	movs	r0, r5
 80049f4:	f7ff ffe4 	bl	80049c0 <__malloc_lock>
 80049f8:	4a1d      	ldr	r2, [pc, #116]	; (8004a70 <_free_r+0x90>)
 80049fa:	6813      	ldr	r3, [r2, #0]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d105      	bne.n	8004a0c <_free_r+0x2c>
 8004a00:	6063      	str	r3, [r4, #4]
 8004a02:	6014      	str	r4, [r2, #0]
 8004a04:	0028      	movs	r0, r5
 8004a06:	f7ff ffe3 	bl	80049d0 <__malloc_unlock>
 8004a0a:	bd70      	pop	{r4, r5, r6, pc}
 8004a0c:	42a3      	cmp	r3, r4
 8004a0e:	d908      	bls.n	8004a22 <_free_r+0x42>
 8004a10:	6821      	ldr	r1, [r4, #0]
 8004a12:	1860      	adds	r0, r4, r1
 8004a14:	4283      	cmp	r3, r0
 8004a16:	d1f3      	bne.n	8004a00 <_free_r+0x20>
 8004a18:	6818      	ldr	r0, [r3, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	1841      	adds	r1, r0, r1
 8004a1e:	6021      	str	r1, [r4, #0]
 8004a20:	e7ee      	b.n	8004a00 <_free_r+0x20>
 8004a22:	001a      	movs	r2, r3
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d001      	beq.n	8004a2e <_free_r+0x4e>
 8004a2a:	42a3      	cmp	r3, r4
 8004a2c:	d9f9      	bls.n	8004a22 <_free_r+0x42>
 8004a2e:	6811      	ldr	r1, [r2, #0]
 8004a30:	1850      	adds	r0, r2, r1
 8004a32:	42a0      	cmp	r0, r4
 8004a34:	d10b      	bne.n	8004a4e <_free_r+0x6e>
 8004a36:	6820      	ldr	r0, [r4, #0]
 8004a38:	1809      	adds	r1, r1, r0
 8004a3a:	1850      	adds	r0, r2, r1
 8004a3c:	6011      	str	r1, [r2, #0]
 8004a3e:	4283      	cmp	r3, r0
 8004a40:	d1e0      	bne.n	8004a04 <_free_r+0x24>
 8004a42:	6818      	ldr	r0, [r3, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	1841      	adds	r1, r0, r1
 8004a48:	6011      	str	r1, [r2, #0]
 8004a4a:	6053      	str	r3, [r2, #4]
 8004a4c:	e7da      	b.n	8004a04 <_free_r+0x24>
 8004a4e:	42a0      	cmp	r0, r4
 8004a50:	d902      	bls.n	8004a58 <_free_r+0x78>
 8004a52:	230c      	movs	r3, #12
 8004a54:	602b      	str	r3, [r5, #0]
 8004a56:	e7d5      	b.n	8004a04 <_free_r+0x24>
 8004a58:	6821      	ldr	r1, [r4, #0]
 8004a5a:	1860      	adds	r0, r4, r1
 8004a5c:	4283      	cmp	r3, r0
 8004a5e:	d103      	bne.n	8004a68 <_free_r+0x88>
 8004a60:	6818      	ldr	r0, [r3, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	1841      	adds	r1, r0, r1
 8004a66:	6021      	str	r1, [r4, #0]
 8004a68:	6063      	str	r3, [r4, #4]
 8004a6a:	6054      	str	r4, [r2, #4]
 8004a6c:	e7ca      	b.n	8004a04 <_free_r+0x24>
 8004a6e:	46c0      	nop			; (mov r8, r8)
 8004a70:	200001c4 	.word	0x200001c4

08004a74 <_realloc_r>:
 8004a74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a76:	0007      	movs	r7, r0
 8004a78:	000e      	movs	r6, r1
 8004a7a:	0014      	movs	r4, r2
 8004a7c:	2900      	cmp	r1, #0
 8004a7e:	d105      	bne.n	8004a8c <_realloc_r+0x18>
 8004a80:	0011      	movs	r1, r2
 8004a82:	f7ff f825 	bl	8003ad0 <_malloc_r>
 8004a86:	0005      	movs	r5, r0
 8004a88:	0028      	movs	r0, r5
 8004a8a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004a8c:	2a00      	cmp	r2, #0
 8004a8e:	d103      	bne.n	8004a98 <_realloc_r+0x24>
 8004a90:	f7ff ffa6 	bl	80049e0 <_free_r>
 8004a94:	0025      	movs	r5, r4
 8004a96:	e7f7      	b.n	8004a88 <_realloc_r+0x14>
 8004a98:	f000 f854 	bl	8004b44 <_malloc_usable_size_r>
 8004a9c:	9001      	str	r0, [sp, #4]
 8004a9e:	4284      	cmp	r4, r0
 8004aa0:	d803      	bhi.n	8004aaa <_realloc_r+0x36>
 8004aa2:	0035      	movs	r5, r6
 8004aa4:	0843      	lsrs	r3, r0, #1
 8004aa6:	42a3      	cmp	r3, r4
 8004aa8:	d3ee      	bcc.n	8004a88 <_realloc_r+0x14>
 8004aaa:	0021      	movs	r1, r4
 8004aac:	0038      	movs	r0, r7
 8004aae:	f7ff f80f 	bl	8003ad0 <_malloc_r>
 8004ab2:	1e05      	subs	r5, r0, #0
 8004ab4:	d0e8      	beq.n	8004a88 <_realloc_r+0x14>
 8004ab6:	9b01      	ldr	r3, [sp, #4]
 8004ab8:	0022      	movs	r2, r4
 8004aba:	429c      	cmp	r4, r3
 8004abc:	d900      	bls.n	8004ac0 <_realloc_r+0x4c>
 8004abe:	001a      	movs	r2, r3
 8004ac0:	0031      	movs	r1, r6
 8004ac2:	0028      	movs	r0, r5
 8004ac4:	f7fe fe90 	bl	80037e8 <memcpy>
 8004ac8:	0031      	movs	r1, r6
 8004aca:	0038      	movs	r0, r7
 8004acc:	f7ff ff88 	bl	80049e0 <_free_r>
 8004ad0:	e7da      	b.n	8004a88 <_realloc_r+0x14>
	...

08004ad4 <_read_r>:
 8004ad4:	b570      	push	{r4, r5, r6, lr}
 8004ad6:	0004      	movs	r4, r0
 8004ad8:	0008      	movs	r0, r1
 8004ada:	0011      	movs	r1, r2
 8004adc:	001a      	movs	r2, r3
 8004ade:	2300      	movs	r3, #0
 8004ae0:	4d05      	ldr	r5, [pc, #20]	; (8004af8 <_read_r+0x24>)
 8004ae2:	602b      	str	r3, [r5, #0]
 8004ae4:	f7fb ffc0 	bl	8000a68 <_read>
 8004ae8:	1c43      	adds	r3, r0, #1
 8004aea:	d103      	bne.n	8004af4 <_read_r+0x20>
 8004aec:	682b      	ldr	r3, [r5, #0]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d000      	beq.n	8004af4 <_read_r+0x20>
 8004af2:	6023      	str	r3, [r4, #0]
 8004af4:	bd70      	pop	{r4, r5, r6, pc}
 8004af6:	46c0      	nop			; (mov r8, r8)
 8004af8:	200001cc 	.word	0x200001cc

08004afc <_fstat_r>:
 8004afc:	2300      	movs	r3, #0
 8004afe:	b570      	push	{r4, r5, r6, lr}
 8004b00:	4d06      	ldr	r5, [pc, #24]	; (8004b1c <_fstat_r+0x20>)
 8004b02:	0004      	movs	r4, r0
 8004b04:	0008      	movs	r0, r1
 8004b06:	0011      	movs	r1, r2
 8004b08:	602b      	str	r3, [r5, #0]
 8004b0a:	f7fb fff0 	bl	8000aee <_fstat>
 8004b0e:	1c43      	adds	r3, r0, #1
 8004b10:	d103      	bne.n	8004b1a <_fstat_r+0x1e>
 8004b12:	682b      	ldr	r3, [r5, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d000      	beq.n	8004b1a <_fstat_r+0x1e>
 8004b18:	6023      	str	r3, [r4, #0]
 8004b1a:	bd70      	pop	{r4, r5, r6, pc}
 8004b1c:	200001cc 	.word	0x200001cc

08004b20 <_isatty_r>:
 8004b20:	2300      	movs	r3, #0
 8004b22:	b570      	push	{r4, r5, r6, lr}
 8004b24:	4d06      	ldr	r5, [pc, #24]	; (8004b40 <_isatty_r+0x20>)
 8004b26:	0004      	movs	r4, r0
 8004b28:	0008      	movs	r0, r1
 8004b2a:	602b      	str	r3, [r5, #0]
 8004b2c:	f7fb ffed 	bl	8000b0a <_isatty>
 8004b30:	1c43      	adds	r3, r0, #1
 8004b32:	d103      	bne.n	8004b3c <_isatty_r+0x1c>
 8004b34:	682b      	ldr	r3, [r5, #0]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d000      	beq.n	8004b3c <_isatty_r+0x1c>
 8004b3a:	6023      	str	r3, [r4, #0]
 8004b3c:	bd70      	pop	{r4, r5, r6, pc}
 8004b3e:	46c0      	nop			; (mov r8, r8)
 8004b40:	200001cc 	.word	0x200001cc

08004b44 <_malloc_usable_size_r>:
 8004b44:	1f0b      	subs	r3, r1, #4
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	1f18      	subs	r0, r3, #4
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	da01      	bge.n	8004b52 <_malloc_usable_size_r+0xe>
 8004b4e:	580b      	ldr	r3, [r1, r0]
 8004b50:	18c0      	adds	r0, r0, r3
 8004b52:	4770      	bx	lr

08004b54 <_init>:
 8004b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b56:	46c0      	nop			; (mov r8, r8)
 8004b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b5a:	bc08      	pop	{r3}
 8004b5c:	469e      	mov	lr, r3
 8004b5e:	4770      	bx	lr

08004b60 <_fini>:
 8004b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b62:	46c0      	nop			; (mov r8, r8)
 8004b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b66:	bc08      	pop	{r3}
 8004b68:	469e      	mov	lr, r3
 8004b6a:	4770      	bx	lr
